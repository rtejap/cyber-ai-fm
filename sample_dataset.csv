question,answer,context
How many heads of the departments are older than 56 ?,SELECT COUNT(*) FROM head WHERE age > 56,CREATE TABLE head (age INTEGER)
"List the name, born state and age of the heads of departments ordered by age.","SELECT name, born_state, age FROM head ORDER BY age","CREATE TABLE head (name VARCHAR, born_state VARCHAR, age VARCHAR)"
"List the creation year, name and budget of each department.","SELECT creation, name, budget_in_billions FROM department","CREATE TABLE department (creation VARCHAR, name VARCHAR, budget_in_billions VARCHAR)"
What are the maximum and minimum budget of the departments?,"SELECT MAX(budget_in_billions), MIN(budget_in_billions) FROM department",CREATE TABLE department (budget_in_billions INTEGER)
What is the average number of employees of the departments whose rank is between 10 and 15?,SELECT AVG(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15,"CREATE TABLE department (num_employees INTEGER, ranking INTEGER)"
What are the names of the heads who are born outside the California state?,SELECT name FROM head WHERE born_state <> 'California',"CREATE TABLE head (name VARCHAR, born_state VARCHAR)"
What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?,SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T3.born_state = 'Alabama',"CREATE TABLE department (creation VARCHAR, department_id VARCHAR); CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (head_id VARCHAR, born_state VARCHAR)"
What are the names of the states where at least 3 heads were born?,SELECT born_state FROM head GROUP BY born_state HAVING COUNT(*) >= 3,CREATE TABLE head (born_state VARCHAR)
In which year were most departments established?,SELECT creation FROM department GROUP BY creation ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE department (creation VARCHAR)
Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?,"SELECT T1.name, T1.num_employees FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes'","CREATE TABLE management (department_id VARCHAR, temporary_acting VARCHAR); CREATE TABLE department (name VARCHAR, num_employees VARCHAR, department_id VARCHAR)"
How many acting statuses are there?,SELECT COUNT(DISTINCT temporary_acting) FROM management,CREATE TABLE management (temporary_acting VARCHAR)
How many departments are led by heads who are not mentioned?,SELECT COUNT(*) FROM department WHERE NOT department_id IN (SELECT department_id FROM management),CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR)
What are the distinct ages of the heads who are acting?,SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id = T2.head_id WHERE T2.temporary_acting = 'Yes',"CREATE TABLE head (age VARCHAR, head_id VARCHAR); CREATE TABLE management (head_id VARCHAR, temporary_acting VARCHAR)"
List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.,SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id JOIN head AS T3 ON T2.head_id = T3.head_id WHERE T1.name = 'Homeland Security',"CREATE TABLE management (department_id VARCHAR, head_id VARCHAR); CREATE TABLE head (born_state VARCHAR, head_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)"
"Which department has more than 1 head at a time? List the id, name and the number of heads.","SELECT T1.department_id, T1.name, COUNT(*) FROM management AS T2 JOIN department AS T1 ON T1.department_id = T2.department_id GROUP BY T1.department_id HAVING COUNT(*) > 1","CREATE TABLE management (department_id VARCHAR); CREATE TABLE department (department_id VARCHAR, name VARCHAR)"
Which head's name has the substring 'Ha'? List the id and name.,"SELECT head_id, name FROM head WHERE name LIKE '%Ha%'","CREATE TABLE head (head_id VARCHAR, name VARCHAR)"
How many farms are there?,SELECT COUNT(*) FROM farm,CREATE TABLE farm (Id VARCHAR)
List the total number of horses on farms in ascending order.,SELECT Total_Horses FROM farm ORDER BY Total_Horses,CREATE TABLE farm (Total_Horses VARCHAR)
"What are the hosts of competitions whose theme is not ""Aliens""?",SELECT Hosts FROM farm_competition WHERE Theme <> 'Aliens',"CREATE TABLE farm_competition (Hosts VARCHAR, Theme VARCHAR)"
What are the themes of farm competitions sorted by year in ascending order?,SELECT Theme FROM farm_competition ORDER BY YEAR,"CREATE TABLE farm_competition (Theme VARCHAR, YEAR VARCHAR)"
What is the average number of working horses of farms with more than 5000 total number of horses?,SELECT AVG(Working_Horses) FROM farm WHERE Total_Horses > 5000,"CREATE TABLE farm (Working_Horses INTEGER, Total_Horses INTEGER)"
What are the maximum and minimum number of cows across all farms.,"SELECT MAX(Cows), MIN(Cows) FROM farm",CREATE TABLE farm (Cows INTEGER)
How many different statuses do cities have?,SELECT COUNT(DISTINCT Status) FROM city,CREATE TABLE city (Status VARCHAR)
List official names of cities in descending order of population.,SELECT Official_Name FROM city ORDER BY Population DESC,"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)"
List the official name and status of the city with the largest population.,"SELECT Official_Name, Status FROM city ORDER BY Population DESC LIMIT 1","CREATE TABLE city (Official_Name VARCHAR, Status VARCHAR, Population VARCHAR)"
Show the years and the official names of the host cities of competitions.,"SELECT T2.Year, T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID","CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Year VARCHAR, Host_city_ID VARCHAR)"
Show the official names of the cities that have hosted more than one competition.,SELECT T1.Official_Name FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID HAVING COUNT(*) > 1,"CREATE TABLE farm_competition (Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR)"
Show the status of the city that has hosted the greatest number of competitions.,SELECT T1.Status FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID GROUP BY T2.Host_city_ID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE city (Status VARCHAR, City_ID VARCHAR); CREATE TABLE farm_competition (Host_city_ID VARCHAR)"
Please show the themes of competitions with host cities having populations larger than 1000.,SELECT T2.Theme FROM city AS T1 JOIN farm_competition AS T2 ON T1.City_ID = T2.Host_city_ID WHERE T1.Population > 1000,"CREATE TABLE city (City_ID VARCHAR, Population INTEGER); CREATE TABLE farm_competition (Theme VARCHAR, Host_city_ID VARCHAR)"
Please show the different statuses of cities and the average population of cities with each status.,"SELECT Status, AVG(Population) FROM city GROUP BY Status","CREATE TABLE city (Status VARCHAR, Population INTEGER)"
"Please show the different statuses, ordered by the number of cities that have each.",SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*),CREATE TABLE city (Status VARCHAR)
List the most common type of Status across cities.,SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE city (Status VARCHAR)
List the official names of cities that have not held any competition.,SELECT Official_Name FROM city WHERE NOT City_ID IN (SELECT Host_city_ID FROM farm_competition),"CREATE TABLE farm_competition (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR); CREATE TABLE city (Official_Name VARCHAR, City_ID VARCHAR, Host_city_ID VARCHAR)"
Show the status shared by cities with population bigger than 1500 and smaller than 500.,SELECT Status FROM city WHERE Population > 1500 INTERSECT SELECT Status FROM city WHERE Population < 500,"CREATE TABLE city (Status VARCHAR, Population INTEGER)"
Find the official names of cities with population bigger than 1500 or smaller than 500.,SELECT Official_Name FROM city WHERE Population > 1500 OR Population < 500,"CREATE TABLE city (Official_Name VARCHAR, Population VARCHAR)"
"Show the census ranking of cities whose status are not ""Village"".","SELECT Census_Ranking FROM city WHERE Status <> ""Village""","CREATE TABLE city (Census_Ranking VARCHAR, Status VARCHAR)"
which course has most number of registered students?,SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_Id VARCHAR)"
what is id of students who registered some courses but the least number of courses in these students?,SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY COUNT(*) LIMIT 1,CREATE TABLE student_course_registrations (student_id VARCHAR)
what are the first name and last name of all candidates?,"SELECT T2.first_name, T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id","CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (first_name VARCHAR, last_name VARCHAR, person_id VARCHAR)"
List the id of students who never attends courses?,SELECT student_id FROM students WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance),CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE students (student_id VARCHAR)
List the id of students who attended some courses?,SELECT student_id FROM student_course_attendance,CREATE TABLE student_course_attendance (student_id VARCHAR)
What are the ids of all students for courses and what are the names of those courses?,"SELECT T1.student_id, T2.course_name FROM student_course_registrations AS T1 JOIN courses AS T2 ON T1.course_id = T2.course_id","CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR)"
What is detail of the student who most recently registered course?,SELECT T2.student_details FROM student_course_registrations AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.registration_date DESC LIMIT 1,"CREATE TABLE student_course_registrations (student_id VARCHAR, registration_date VARCHAR); CREATE TABLE students (student_details VARCHAR, student_id VARCHAR)"
How many students attend course English?,"SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""English""","CREATE TABLE student_course_attendance (course_id VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)"
How many courses do the student whose id is 171 attend?,SELECT COUNT(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T2.student_id = 171,"CREATE TABLE courses (course_id VARCHAR); CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR)"
Find id of the candidate whose email is stanley.monahan@example.org?,"SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = ""stanley.monahan@example.org""","CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (person_id VARCHAR, email_address VARCHAR)"
Find id of the candidate who most recently accessed the course?,SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1,"CREATE TABLE candidate_assessments (candidate_id VARCHAR, assessment_date VARCHAR)"
What is detail of the student who registered the most number of courses?,SELECT T1.student_details FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE students (student_details VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)"
List the id of students who registered some courses and the number of their registered courses?,"SELECT T1.student_id, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",CREATE TABLE students (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)
How many registed students do each course have? List course name and the number of their registered students?,"SELECT T3.course_name, COUNT(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id","CREATE TABLE students (student_id VARCHAR); CREATE TABLE courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)"
"Find id of candidates whose assessment code is ""Pass""?","SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = ""Pass""","CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)"
"Find the cell mobile number of the candidates whose assessment code is ""Fail""?","SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = ""Fail""","CREATE TABLE candidates (candidate_id VARCHAR); CREATE TABLE people (cell_mobile_number VARCHAR, person_id VARCHAR); CREATE TABLE candidate_assessments (candidate_id VARCHAR, asessment_outcome_code VARCHAR)"
What are the id of students who registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id = 301,"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR)"
What is the id of the student who most recently registered course 301?,SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1,"CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR)"
Find distinct cities of addresses of people?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id,"CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR)"
Find distinct cities of address of students?,SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id,"CREATE TABLE students (student_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE people_addresses (address_id VARCHAR, person_id VARCHAR)"
List the names of courses in alphabetical order?,SELECT course_name FROM courses ORDER BY course_name,CREATE TABLE courses (course_name VARCHAR)
List the first names of people in alphabetical order?,SELECT first_name FROM people ORDER BY first_name,CREATE TABLE people (first_name VARCHAR)
What are the id of students who registered courses or attended courses?,SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance,CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)
Find the id of courses which are registered or attended by student whose id is 121?,SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121,"CREATE TABLE student_course_attendance (course_id VARCHAR, student_id VARCHAR); CREATE TABLE student_course_registrations (course_id VARCHAR, student_id VARCHAR)"
What are all info of students who registered courses but not attended courses?,SELECT * FROM student_course_registrations WHERE NOT student_id IN (SELECT student_id FROM student_course_attendance),CREATE TABLE student_course_attendance (student_id VARCHAR); CREATE TABLE student_course_registrations (student_id VARCHAR)
List the id of students who registered course statistics in the order of registration date.,"SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.registration_date","CREATE TABLE student_course_registrations (student_id VARCHAR, course_id VARCHAR, registration_date VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)"
List the id of students who attended  statistics courses in the order of attendance date.,"SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""statistics"" ORDER BY T2.date_of_attendance","CREATE TABLE student_course_attendance (student_id VARCHAR, course_id VARCHAR, date_of_attendance VARCHAR); CREATE TABLE courses (course_id VARCHAR, course_name VARCHAR)"
Give me the dates when the max temperature was higher than 85.,SELECT date FROM weather WHERE max_temperature_f > 85,"CREATE TABLE weather (date VARCHAR, max_temperature_f INTEGER)"
What are the names of stations that have latitude lower than 37.5?,SELECT name FROM station WHERE lat < 37.5,"CREATE TABLE station (name VARCHAR, lat INTEGER)"
"For each city, return the highest latitude among its stations.","SELECT city, MAX(lat) FROM station GROUP BY city","CREATE TABLE station (city VARCHAR, lat INTEGER)"
Give me the start station and end station for the trips with the three oldest id.,"SELECT start_station_name, end_station_name FROM trip ORDER BY id LIMIT 3","CREATE TABLE trip (start_station_name VARCHAR, end_station_name VARCHAR, id VARCHAR)"
What is the average latitude and longitude of stations located in San Jose city?,"SELECT AVG(lat), AVG(long) FROM station WHERE city = ""San Jose""","CREATE TABLE station (lat INTEGER, long INTEGER, city VARCHAR)"
What is the id of the trip that has the shortest duration?,SELECT id FROM trip ORDER BY duration LIMIT 1,"CREATE TABLE trip (id VARCHAR, duration VARCHAR)"
What is the total and maximum duration of trips with bike id 636?,"SELECT SUM(duration), MAX(duration) FROM trip WHERE bike_id = 636","CREATE TABLE trip (duration INTEGER, bike_id VARCHAR)"
"For each zip code, return the average mean temperature of August there.","SELECT zip_code, AVG(mean_temperature_f) FROM weather WHERE date LIKE ""8/%"" GROUP BY zip_code","CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER, date VARCHAR)"
"From the trip record, find the number of unique bikes.",SELECT COUNT(DISTINCT bike_id) FROM trip,CREATE TABLE trip (bike_id VARCHAR)
What is the number of distinct cities the stations are located at?,SELECT COUNT(DISTINCT city) FROM station,CREATE TABLE station (city VARCHAR)
How many stations does Mountain View city has?,"SELECT COUNT(*) FROM station WHERE city = ""Mountain View""",CREATE TABLE station (city VARCHAR)
Return the unique name for stations that have ever had 7 bikes available.,SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available = 7,"CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available VARCHAR)"
Which start station had the most trips starting from August? Give me the name and id of the station.,"SELECT start_station_name, start_station_id FROM trip WHERE start_date LIKE ""8/%"" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE trip (start_station_name VARCHAR, start_station_id VARCHAR, start_date VARCHAR)"
Which bike traveled the most often in zip code 94002?,SELECT bike_id FROM trip WHERE zip_code = 94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE trip (bike_id VARCHAR, zip_code VARCHAR)"
How many days had both mean humidity above 50 and mean visibility above 8?,SELECT COUNT(*) FROM weather WHERE mean_humidity > 50 AND mean_visibility_miles > 8,"CREATE TABLE weather (mean_humidity VARCHAR, mean_visibility_miles VARCHAR)"
"What is the latitude, longitude, city of the station from which the shortest trip started?","SELECT T1.lat, T1.long, T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id ORDER BY T2.duration LIMIT 1","CREATE TABLE trip (start_station_id VARCHAR, duration VARCHAR); CREATE TABLE station (lat VARCHAR, long VARCHAR, city VARCHAR, id VARCHAR)"
What are the ids of stations that are located in San Francisco and have average bike availability above 10.,"SELECT id FROM station WHERE city = ""San Francisco"" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING AVG(bikes_available) > 10","CREATE TABLE status (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, city VARCHAR, bikes_available INTEGER)"
What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?,"SELECT T1.name, T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(T2.bikes_available) > 14 UNION SELECT name, id FROM station WHERE installation_date LIKE ""12/%""","CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE station (name VARCHAR, id VARCHAR, installation_date VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)"
What is the 3 most common cloud cover rates in the region of zip code 94107?,SELECT cloud_cover FROM weather WHERE zip_code = 94107 GROUP BY cloud_cover ORDER BY COUNT(*) DESC LIMIT 3,"CREATE TABLE weather (cloud_cover VARCHAR, zip_code VARCHAR)"
What is the zip code in which the average mean sea level pressure is the lowest?,SELECT zip_code FROM weather GROUP BY zip_code ORDER BY AVG(mean_sea_level_pressure_inches) LIMIT 1,"CREATE TABLE weather (zip_code VARCHAR, mean_sea_level_pressure_inches INTEGER)"
What is the average bike availability in stations that are not located in Palo Alto?,"SELECT AVG(bikes_available) FROM status WHERE NOT station_id IN (SELECT id FROM station WHERE city = ""Palo Alto"")","CREATE TABLE status (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR); CREATE TABLE station (bikes_available INTEGER, station_id VARCHAR, id VARCHAR, city VARCHAR)"
What is the average longitude of stations that never had bike availability more than 10?,SELECT AVG(long) FROM station WHERE NOT id IN (SELECT station_id FROM status GROUP BY station_id HAVING MAX(bikes_available) > 10),"CREATE TABLE station (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER); CREATE TABLE status (long INTEGER, id VARCHAR, station_id VARCHAR, bikes_available INTEGER)"
When and in what zip code did max temperature reach 80?,"SELECT date, zip_code FROM weather WHERE max_temperature_f >= 80","CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, max_temperature_f VARCHAR)"
Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.,SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code = T2.zip_code GROUP BY T2.zip_code HAVING AVG(T2.mean_temperature_f) > 60,"CREATE TABLE trip (id VARCHAR, zip_code VARCHAR); CREATE TABLE weather (zip_code VARCHAR, mean_temperature_f INTEGER)"
"For each zip code, return how many times max wind speed reached 25?","SELECT zip_code, COUNT(*) FROM weather WHERE max_wind_Speed_mph >= 25 GROUP BY zip_code","CREATE TABLE weather (zip_code VARCHAR, max_wind_Speed_mph VARCHAR)"
On which day and in which zip code was the min dew point lower than any day in zip code 94107?,"SELECT date, zip_code FROM weather WHERE min_dew_point_f < (SELECT MIN(min_dew_point_f) FROM weather WHERE zip_code = 94107)","CREATE TABLE weather (date VARCHAR, zip_code VARCHAR, min_dew_point_f INTEGER)"
"For each trip, return its ending station's installation date.","SELECT T1.id, T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id","CREATE TABLE station (installation_date VARCHAR, id VARCHAR); CREATE TABLE trip (id VARCHAR, end_station_id VARCHAR)"
Which trip started from the station with the largest dock count? Give me the trip id.,SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id = T2.id ORDER BY T2.dock_count DESC LIMIT 1,"CREATE TABLE trip (id VARCHAR, start_station_id VARCHAR); CREATE TABLE station (id VARCHAR, dock_count VARCHAR)"
Count the number of trips that did not end in San Francisco city.,"SELECT COUNT(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id = T2.id WHERE T2.city <> ""San Francisco""","CREATE TABLE trip (end_station_id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR)"
"In zip code 94107, on which day neither Fog nor Rain was not observed?","SELECT date FROM weather WHERE zip_code = 94107 AND EVENTS <> ""Fog"" AND EVENTS <> ""Rain""","CREATE TABLE weather (date VARCHAR, EVENTS VARCHAR, zip_code VARCHAR)"
What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?,SELECT id FROM station WHERE lat > 37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING MIN(bikes_available) < 7,"CREATE TABLE status (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER); CREATE TABLE station (id VARCHAR, station_id VARCHAR, lat INTEGER, bikes_available INTEGER)"
What are names of stations that have average bike availability above 10 and are not located in San Jose city?,"SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING AVG(bikes_available) > 10 EXCEPT SELECT name FROM station WHERE city = ""San Jose""","CREATE TABLE station (name VARCHAR, id VARCHAR); CREATE TABLE status (station_id VARCHAR); CREATE TABLE station (name VARCHAR, city VARCHAR, bikes_available INTEGER)"
"What are the name, latitude, and city of the station with the lowest latitude?","SELECT name, lat, city FROM station ORDER BY lat LIMIT 1","CREATE TABLE station (name VARCHAR, lat VARCHAR, city VARCHAR)"
"What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?","SELECT date, mean_temperature_f, mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3","CREATE TABLE weather (date VARCHAR, mean_temperature_f VARCHAR, mean_humidity VARCHAR, max_gust_speed_mph VARCHAR)"
List the name and the number of stations for all the cities that have at least 15 stations.,"SELECT city, COUNT(*) FROM station GROUP BY city HAVING COUNT(*) >= 15",CREATE TABLE station (city VARCHAR)
Find the ids and names of stations from which at least 200 trips started.,"SELECT start_station_id, start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*) >= 200","CREATE TABLE trip (start_station_id VARCHAR, start_station_name VARCHAR)"
Find the zip code in which the average mean visibility is lower than 10.,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_visibility_miles) < 10,"CREATE TABLE weather (zip_code VARCHAR, mean_visibility_miles INTEGER)"
List all the cities in a decreasing order of each city's stations' highest latitude.,SELECT city FROM station GROUP BY city ORDER BY MAX(lat) DESC,"CREATE TABLE station (city VARCHAR, lat INTEGER)"
What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.,"SELECT date, cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5","CREATE TABLE weather (date VARCHAR, cloud_cover VARCHAR)"
What are the ids and durations of the trips with the top 3 durations?,"SELECT id, duration FROM trip ORDER BY duration DESC LIMIT 3","CREATE TABLE trip (id VARCHAR, duration VARCHAR)"
"For each station, return its longitude and the average duration of trips that started from the station.","SELECT T1.name, T1.long, AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id","CREATE TABLE station (name VARCHAR, long VARCHAR, id VARCHAR); CREATE TABLE trip (duration INTEGER, start_station_id VARCHAR)"
"For each station, find its latitude and the minimum duration of trips that ended at the station.","SELECT T1.name, T1.lat, MIN(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T2.end_station_id","CREATE TABLE trip (duration INTEGER, end_station_id VARCHAR); CREATE TABLE station (name VARCHAR, lat VARCHAR, id VARCHAR)"
List all the distinct stations from which a trip of duration below 100 started.,SELECT DISTINCT start_station_name FROM trip WHERE duration < 100,"CREATE TABLE trip (start_station_name VARCHAR, duration INTEGER)"
Find all the zip codes in which the max dew point have never reached 70.,SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f >= 70,"CREATE TABLE weather (zip_code VARCHAR, max_dew_point_f VARCHAR)"
Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.,SELECT id FROM trip WHERE duration >= (SELECT AVG(duration) FROM trip WHERE zip_code = 94103),"CREATE TABLE trip (id VARCHAR, duration INTEGER, zip_code VARCHAR)"
What are the dates in which the mean sea level pressure was between 30.3 and 31?,SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31,"CREATE TABLE weather (date VARCHAR, mean_sea_level_pressure_inches INTEGER)"
Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.,"SELECT date, max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1","CREATE TABLE weather (date VARCHAR, max_temperature_f VARCHAR, min_temperature_f VARCHAR)"
What are the id and name of the stations that have ever had more than 12 bikes available?,"SELECT DISTINCT T1.id, T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T2.bikes_available > 12","CREATE TABLE station (id VARCHAR, name VARCHAR); CREATE TABLE status (station_id VARCHAR, bikes_available INTEGER)"
Give me the zip code where the average mean humidity is below 70 and at least 100 trips took place.,SELECT zip_code FROM weather GROUP BY zip_code HAVING AVG(mean_humidity) < 70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING COUNT(*) >= 100,"CREATE TABLE weather (zip_code VARCHAR, mean_humidity INTEGER); CREATE TABLE trip (zip_code VARCHAR, mean_humidity INTEGER)"
What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?,"SELECT name FROM station WHERE city = ""Palo Alto"" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING COUNT(*) > 100","CREATE TABLE trip (name VARCHAR, end_station_name VARCHAR, city VARCHAR); CREATE TABLE station (name VARCHAR, end_station_name VARCHAR, city VARCHAR)"
How many trips started from Mountain View city and ended at Palo Alto city?,"SELECT COUNT(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id = T2.start_station_id AND T2.id = T4.id AND T3.id = T4.end_station_id WHERE T1.city = ""Mountain View"" AND T3.city = ""Palo Alto""","CREATE TABLE station (city VARCHAR, id VARCHAR); CREATE TABLE trip (end_station_id VARCHAR, id VARCHAR); CREATE TABLE station (id VARCHAR, city VARCHAR); CREATE TABLE trip (start_station_id VARCHAR, id VARCHAR)"
What is the average latitude and longitude of the starting points of all trips?,"SELECT AVG(T1.lat), AVG(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id","CREATE TABLE trip (start_station_id VARCHAR); CREATE TABLE station (lat INTEGER, long INTEGER, id VARCHAR)"
How many books are there?,SELECT COUNT(*) FROM book,CREATE TABLE book (Id VARCHAR)
List the writers of the books in ascending alphabetical order.,SELECT Writer FROM book ORDER BY Writer,CREATE TABLE book (Writer VARCHAR)
List the titles of the books in ascending order of issues.,SELECT Title FROM book ORDER BY Issues,"CREATE TABLE book (Title VARCHAR, Issues VARCHAR)"
"What are the titles of the books whose writer is not ""Elaine Lee""?","SELECT Title FROM book WHERE Writer <> ""Elaine Lee""","CREATE TABLE book (Title VARCHAR, Writer VARCHAR)"
What are the title and issues of the books?,"SELECT Title, Issues FROM book","CREATE TABLE book (Title VARCHAR, Issues VARCHAR)"
What are the dates of publications in descending order of price?,SELECT Publication_Date FROM publication ORDER BY Price DESC,"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)"
What are the distinct publishers of publications with price higher than 5000000?,SELECT DISTINCT Publisher FROM publication WHERE Price > 5000000,"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)"
List the publisher of the publication with the highest price.,SELECT Publisher FROM publication ORDER BY Price DESC LIMIT 1,"CREATE TABLE publication (Publisher VARCHAR, Price VARCHAR)"
List the publication dates of publications with 3 lowest prices.,SELECT Publication_Date FROM publication ORDER BY Price LIMIT 3,"CREATE TABLE publication (Publication_Date VARCHAR, Price VARCHAR)"
Show the title and publication dates of books.,"SELECT T1.Title, T2.Publication_Date FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID","CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Publication_Date VARCHAR, Book_ID VARCHAR)"
Show writers who have published a book with price more than 4000000.,SELECT T1.Writer FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID WHERE T2.Price > 4000000,"CREATE TABLE publication (Book_ID VARCHAR, Price INTEGER); CREATE TABLE book (Writer VARCHAR, Book_ID VARCHAR)"
Show the titles of books in descending order of publication price.,SELECT T1.Title FROM book AS T1 JOIN publication AS T2 ON T1.Book_ID = T2.Book_ID ORDER BY T2.Price DESC,"CREATE TABLE publication (Book_ID VARCHAR, Price VARCHAR); CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR)"
Show publishers that have more than one publication.,SELECT Publisher FROM publication GROUP BY Publisher HAVING COUNT(*) > 1,CREATE TABLE publication (Publisher VARCHAR)
Show different publishers together with the number of publications they have.,"SELECT Publisher, COUNT(*) FROM publication GROUP BY Publisher",CREATE TABLE publication (Publisher VARCHAR)
Please show the most common publication date.,SELECT Publication_Date FROM publication GROUP BY Publication_Date ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE publication (Publication_Date VARCHAR)
List the writers who have written more than one book.,SELECT Writer FROM book GROUP BY Writer HAVING COUNT(*) > 1,CREATE TABLE book (Writer VARCHAR)
List the titles of books that are not published.,SELECT Title FROM book WHERE NOT Book_ID IN (SELECT Book_ID FROM publication),"CREATE TABLE book (Title VARCHAR, Book_ID VARCHAR); CREATE TABLE publication (Title VARCHAR, Book_ID VARCHAR)"
Show the publishers that have publications with price higher than 10000000 and publications with price lower than 5000000.,SELECT Publisher FROM publication WHERE Price > 10000000 INTERSECT SELECT Publisher FROM publication WHERE Price < 5000000,"CREATE TABLE publication (Publisher VARCHAR, Price INTEGER)"
What is the number of distinct publication dates?,SELECT COUNT(DISTINCT Publication_Date) FROM publication,CREATE TABLE publication (Publication_Date VARCHAR)
"Show the prices of publications whose publisher is either ""Person"" or ""Wiley""","SELECT Price FROM publication WHERE Publisher = ""Person"" OR Publisher = ""Wiley""","CREATE TABLE publication (Price VARCHAR, Publisher VARCHAR)"
How many actors are there?,SELECT COUNT(*) FROM actor,CREATE TABLE actor (Id VARCHAR)
List the name of actors in ascending alphabetical order.,SELECT Name FROM actor ORDER BY Name,CREATE TABLE actor (Name VARCHAR)
What are the characters and duration of actors?,"SELECT Character, Duration FROM actor","CREATE TABLE actor (Character VARCHAR, Duration VARCHAR)"
List the name of actors whose age is not 20.,SELECT Name FROM actor WHERE Age <> 20,"CREATE TABLE actor (Name VARCHAR, Age VARCHAR)"
What are the characters of actors in descending order of age?,SELECT Character FROM actor ORDER BY age DESC,"CREATE TABLE actor (Character VARCHAR, age VARCHAR)"
What is the duration of the oldest actor?,SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1,"CREATE TABLE actor (Duration VARCHAR, Age VARCHAR)"
"What are the names of musicals with nominee ""Bob Fosse""?","SELECT Name FROM musical WHERE Nominee = ""Bob Fosse""","CREATE TABLE musical (Name VARCHAR, Nominee VARCHAR)"
"What are the distinct nominees of the musicals with the award that is not ""Tony Award""?","SELECT DISTINCT Nominee FROM musical WHERE Award <> ""Tony Award""","CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
Show names of actors and names of musicals they are in.,"SELECT T1.Name, T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID","CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
"Show names of actors that have appeared in musical with name ""The Phantom of the Opera"".","SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID WHERE T2.Name = ""The Phantom of the Opera""","CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Musical_ID VARCHAR, Name VARCHAR)"
Show names of actors in descending order of the year their musical is awarded.,SELECT T1.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID ORDER BY T2.Year DESC,"CREATE TABLE musical (Musical_ID VARCHAR, Year VARCHAR); CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR)"
Show names of musicals and the number of actors who have appeared in the musicals.,"SELECT T2.Name, COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID","CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
Show names of musicals which have at least three actors.,SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID = T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*) >= 3,"CREATE TABLE actor (Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
Show different nominees and the number of musicals they have been nominated.,"SELECT Nominee, COUNT(*) FROM musical GROUP BY Nominee",CREATE TABLE musical (Nominee VARCHAR)
Please show the nominee who has been nominated the greatest number of times.,SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE musical (Nominee VARCHAR)
List the most common result of the musicals.,SELECT RESULT FROM musical GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE musical (RESULT VARCHAR)
List the nominees that have been nominated more than two musicals.,SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*) > 2,CREATE TABLE musical (Nominee VARCHAR)
List the name of musicals that do not have actors.,SELECT Name FROM musical WHERE NOT Musical_ID IN (SELECT Musical_ID FROM actor),"CREATE TABLE actor (Name VARCHAR, Musical_ID VARCHAR); CREATE TABLE musical (Name VARCHAR, Musical_ID VARCHAR)"
"Show the nominees that have nominated musicals for both ""Tony Award"" and ""Drama Desk Award"".","SELECT Nominee FROM musical WHERE Award = ""Tony Award"" INTERSECT SELECT Nominee FROM musical WHERE Award = ""Drama Desk Award""","CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
"Show the musical nominee with award ""Bob Fosse"" or ""Cleavant Derricks"".","SELECT Nominee FROM musical WHERE Award = ""Tony Award"" OR Award = ""Cleavant Derricks""","CREATE TABLE musical (Nominee VARCHAR, Award VARCHAR)"
"Find the emails of the user named ""Mary"".",SELECT email FROM user_profiles WHERE name = 'Mary',"CREATE TABLE user_profiles (email VARCHAR, name VARCHAR)"
"What is the partition id of the user named ""Iron Man"".",SELECT partitionid FROM user_profiles WHERE name = 'Iron Man',"CREATE TABLE user_profiles (partitionid VARCHAR, name VARCHAR)"
How many users are there?,SELECT COUNT(*) FROM user_profiles,CREATE TABLE user_profiles (Id VARCHAR)
How many followers does each user have?,SELECT COUNT(*) FROM follows,CREATE TABLE follows (Id VARCHAR)
Find the number of followers for each user.,SELECT COUNT(*) FROM follows GROUP BY f1,CREATE TABLE follows (f1 VARCHAR)
Find the number of tweets in record.,SELECT COUNT(*) FROM tweets,CREATE TABLE tweets (Id VARCHAR)
Find the number of users who posted some tweets.,SELECT COUNT(DISTINCT UID) FROM tweets,CREATE TABLE tweets (UID VARCHAR)
Find the name and email of the user whose name contains the word ‘Swift’.,"SELECT name, email FROM user_profiles WHERE name LIKE '%Swift%'","CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)"
Find the names of users whose emails contain ‘superstar’ or ‘edu’.,SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%',"CREATE TABLE user_profiles (name VARCHAR, email VARCHAR)"
Return the text of tweets about the topic 'intern'.,SELECT text FROM tweets WHERE text LIKE '%intern%',CREATE TABLE tweets (text VARCHAR)
Find the name and email of the users who have more than 1000 followers.,"SELECT name, email FROM user_profiles WHERE followers > 1000","CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers INTEGER)"
"Find the names of the users whose number of followers is greater than that of the user named ""Tyler Swift"".",SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > (SELECT COUNT(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 WHERE T1.name = 'Tyler Swift'),"CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
Find the name and email for the users who have more than one follower.,"SELECT T1.name, T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f1 GROUP BY T2.f1 HAVING COUNT(*) > 1","CREATE TABLE follows (f1 VARCHAR); CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, uid VARCHAR)"
Find the names of users who have more than one tweet.,SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1,"CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
Find the id of users who are followed by Mary and Susan.,"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Susan""","CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)"
Find the id of users who are followed by Mary or Susan.,"SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid = T2.f2 WHERE T1.name = ""Mary"" OR T1.name = ""Susan""","CREATE TABLE follows (f1 VARCHAR, f2 VARCHAR); CREATE TABLE user_profiles (uid VARCHAR, name VARCHAR)"
Find the name of the user who has the largest number of followers.,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1,"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
Find the name and email of the user followed by the least number of people.,"SELECT name, email FROM user_profiles ORDER BY followers LIMIT 1","CREATE TABLE user_profiles (name VARCHAR, email VARCHAR, followers VARCHAR)"
"List the name and number of followers for each user, and sort the results by the number of followers in descending order.","SELECT name, followers FROM user_profiles ORDER BY followers DESC","CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
List the names of 5 users followed by the largest number of other users.,SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5,"CREATE TABLE user_profiles (name VARCHAR, followers VARCHAR)"
List the text of all tweets in the order of date.,SELECT text FROM tweets ORDER BY createdate,"CREATE TABLE tweets (text VARCHAR, createdate VARCHAR)"
Find the name of each user and number of tweets tweeted by each of them.,"SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid","CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
Find the name and partition id for users who tweeted less than twice.,"SELECT T1.name, T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) < 2","CREATE TABLE user_profiles (name VARCHAR, partitionid VARCHAR, uid VARCHAR); CREATE TABLE tweets (uid VARCHAR)"
"Find the name of the user who tweeted more than once, and number of tweets tweeted by them.","SELECT T1.name, COUNT(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid HAVING COUNT(*) > 1","CREATE TABLE tweets (uid VARCHAR); CREATE TABLE user_profiles (name VARCHAR, uid VARCHAR)"
Find the average number of followers for the users who do not have any tweet.,SELECT AVG(followers) FROM user_profiles WHERE NOT UID IN (SELECT UID FROM tweets),"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)"
Find the average number of followers for the users who had some tweets.,SELECT AVG(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets),"CREATE TABLE user_profiles (followers INTEGER, UID VARCHAR); CREATE TABLE tweets (followers INTEGER, UID VARCHAR)"
Find the maximum and total number of followers of all users.,"SELECT MAX(followers), SUM(followers) FROM user_profiles",CREATE TABLE user_profiles (followers INTEGER)
Find the names of all the catalog entries.,SELECT DISTINCT (catalog_entry_name) FROM catalog_contents,CREATE TABLE catalog_contents (catalog_entry_name VARCHAR)
Find the list of attribute data types possessed by more than 3 attribute definitions.,SELECT attribute_data_type FROM Attribute_Definitions GROUP BY attribute_data_type HAVING COUNT(*) > 3,CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR)
"What is the attribute data type of the attribute with name ""Green""?","SELECT attribute_data_type FROM Attribute_Definitions WHERE attribute_name = ""Green""","CREATE TABLE Attribute_Definitions (attribute_data_type VARCHAR, attribute_name VARCHAR)"
Find the name and level of catalog structure with level between 5 and 10.,"SELECT catalog_level_name, catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10","CREATE TABLE Catalog_Structure (catalog_level_name VARCHAR, catalog_level_number INTEGER)"
"Find all the catalog publishers whose name contains ""Murray""","SELECT DISTINCT (catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE ""%Murray%""",CREATE TABLE catalogs (catalog_publisher VARCHAR)
Which catalog publisher has published the most catalogs?,SELECT catalog_publisher FROM catalogs GROUP BY catalog_publisher ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE catalogs (catalog_publisher VARCHAR)
Find the names and publication dates of all catalogs that have catalog level number greater than 5.,"SELECT t1.catalog_name, t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id = t2.catalog_id WHERE catalog_level_number > 5","CREATE TABLE catalogs (catalog_name VARCHAR, date_of_publication VARCHAR, catalog_id VARCHAR); CREATE TABLE catalog_structure (catalog_id VARCHAR)"
What are the entry names of catalog with the attribute possessed by most entries.,SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.attribute_value = (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR); CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_value VARCHAR)"
What is the entry name of the most expensive catalog (in USD)?,SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1,"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, price_in_dollars VARCHAR)"
What is the level name of the cheapest catalog (in USD)?,SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number = t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1,"CREATE TABLE catalog_structure (catalog_level_name VARCHAR, catalog_level_number VARCHAR); CREATE TABLE catalog_contents (catalog_level_number VARCHAR, price_in_dollars VARCHAR)"
What are the average and minimum price (in Euro) of all products?,"SELECT AVG(price_in_euros), MIN(price_in_euros) FROM catalog_contents",CREATE TABLE catalog_contents (price_in_euros INTEGER)
What is the product with the highest height? Give me the catalog entry name.,SELECT catalog_entry_name FROM catalog_contents ORDER BY height DESC LIMIT 1,"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, height VARCHAR)"
Find the name of the product that has the smallest capacity.,SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity LIMIT 1,"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, capacity VARCHAR)"
"Find the names of all the products whose stock number starts with ""2"".","SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE ""2%""","CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, product_stock_number VARCHAR)"
Find the names of catalog entries with level number 8.,"SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id = t2.catalog_entry_id WHERE t2.catalog_level_number = ""8""","CREATE TABLE Catalog_Contents_Additional_Attributes (catalog_entry_id VARCHAR, catalog_level_number VARCHAR); CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, catalog_entry_id VARCHAR)"
Find the names of the products with length smaller than 3 or height greater than 5.,SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH < 3 OR width > 5,"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, LENGTH VARCHAR, width VARCHAR)"
Find the name and attribute ID of the attribute definitions with attribute value 0.,"SELECT t1.attribute_name, t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id = t2.attribute_id WHERE t2.attribute_value = 0","CREATE TABLE Catalog_Contents_Additional_Attributes (attribute_id VARCHAR, attribute_value VARCHAR); CREATE TABLE Attribute_Definitions (attribute_name VARCHAR, attribute_id VARCHAR)"
Find the name and capacity of products with price greater than 700 (in USD).,"SELECT catalog_entry_name, capacity FROM Catalog_Contents WHERE price_in_dollars > 700","CREATE TABLE Catalog_Contents (catalog_entry_name VARCHAR, capacity VARCHAR, price_in_dollars INTEGER)"
Find the dates on which more than one revisions were made.,SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING COUNT(*) > 1,CREATE TABLE Catalogs (date_of_latest_revision VARCHAR)
How many products are there in the records?,SELECT COUNT(*) FROM catalog_contents,CREATE TABLE catalog_contents (Id VARCHAR)
Name all the products with next entry ID greater than 8.,SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id > 8,"CREATE TABLE catalog_contents (catalog_entry_name VARCHAR, next_entry_id INTEGER)"
How many aircrafts do we have?,SELECT COUNT(*) FROM Aircraft,CREATE TABLE Aircraft (Id VARCHAR)
Show name and distance for all aircrafts.,"SELECT name, distance FROM Aircraft","CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)"
Show ids for all aircrafts with more than 1000 distance.,SELECT aid FROM Aircraft WHERE distance > 1000,"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER)"
How many aircrafts have distance between 1000 and 5000?,SELECT COUNT(*) FROM Aircraft WHERE distance BETWEEN 1000 AND 5000,CREATE TABLE Aircraft (distance INTEGER)
What is the name and distance for aircraft with id 12?,"SELECT name, distance FROM Aircraft WHERE aid = 12","CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR, aid VARCHAR)"
"What is the minimum, average, and maximum distance of all aircrafts.","SELECT MIN(distance), AVG(distance), MAX(distance) FROM Aircraft",CREATE TABLE Aircraft (distance INTEGER)
Show the id and name of the aircraft with the maximum distance.,"SELECT aid, name FROM Aircraft ORDER BY distance DESC LIMIT 1","CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR, distance VARCHAR)"
Show the name of aircrafts with top three lowest distances.,SELECT name FROM Aircraft ORDER BY distance LIMIT 3,"CREATE TABLE Aircraft (name VARCHAR, distance VARCHAR)"
Show names for all aircrafts with distances more than the average.,SELECT name FROM Aircraft WHERE distance > (SELECT AVG(distance) FROM Aircraft),"CREATE TABLE Aircraft (name VARCHAR, distance INTEGER)"
How many employees do we have?,SELECT COUNT(*) FROM Employee,CREATE TABLE Employee (Id VARCHAR)
Show name and salary for all employees sorted by salary.,"SELECT name, salary FROM Employee ORDER BY salary","CREATE TABLE Employee (name VARCHAR, salary VARCHAR)"
Show ids for all employees with at least 100000 salary.,SELECT eid FROM Employee WHERE salary > 100000,"CREATE TABLE Employee (eid VARCHAR, salary INTEGER)"
How many employees have salary between 100000 and 200000?,SELECT COUNT(*) FROM Employee WHERE salary BETWEEN 100000 AND 200000,CREATE TABLE Employee (salary INTEGER)
What is the name and salary for employee with id 242518965?,"SELECT name, salary FROM Employee WHERE eid = 242518965","CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)"
What is average and maximum salary of all employees.,"SELECT AVG(salary), MAX(salary) FROM Employee",CREATE TABLE Employee (salary INTEGER)
Show the id and name of the employee with maximum salary.,"SELECT eid, name FROM Employee ORDER BY salary DESC LIMIT 1","CREATE TABLE Employee (eid VARCHAR, name VARCHAR, salary VARCHAR)"
Show the name of employees with three lowest salaries.,SELECT name FROM Employee ORDER BY salary LIMIT 3,"CREATE TABLE Employee (name VARCHAR, salary VARCHAR)"
Show names for all employees with salary more than the average.,SELECT name FROM Employee WHERE salary > (SELECT AVG(salary) FROM Employee),"CREATE TABLE Employee (name VARCHAR, salary INTEGER)"
Show the id and salary of Mark Young.,"SELECT eid, salary FROM Employee WHERE name = 'Mark Young'","CREATE TABLE Employee (eid VARCHAR, salary VARCHAR, name VARCHAR)"
How many flights do we have?,SELECT COUNT(*) FROM Flight,CREATE TABLE Flight (Id VARCHAR)
"Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.","SELECT flno, origin, destination FROM Flight ORDER BY origin","CREATE TABLE Flight (flno VARCHAR, origin VARCHAR, destination VARCHAR)"
Show all flight number from Los Angeles.,"SELECT flno FROM Flight WHERE origin = ""Los Angeles""","CREATE TABLE Flight (flno VARCHAR, origin VARCHAR)"
Show origins of all flights with destination Honolulu.,"SELECT origin FROM Flight WHERE destination = ""Honolulu""","CREATE TABLE Flight (origin VARCHAR, destination VARCHAR)"
Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.,"SELECT departure_date, arrival_date FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu""","CREATE TABLE Flight (departure_date VARCHAR, arrival_date VARCHAR, origin VARCHAR, destination VARCHAR)"
Show flight number for all flights with more than 2000 distance.,SELECT flno FROM Flight WHERE distance > 2000,"CREATE TABLE Flight (flno VARCHAR, distance INTEGER)"
What is the average price for flights from Los Angeles to Honolulu.,"SELECT AVG(price) FROM Flight WHERE origin = ""Los Angeles"" AND destination = ""Honolulu""","CREATE TABLE Flight (price INTEGER, origin VARCHAR, destination VARCHAR)"
Show origin and destination for flights with price higher than 300.,"SELECT origin, destination FROM Flight WHERE price > 300","CREATE TABLE Flight (origin VARCHAR, destination VARCHAR, price INTEGER)"
Show the flight number and distance of the flight with maximum price.,"SELECT flno, distance FROM Flight ORDER BY price DESC LIMIT 1","CREATE TABLE Flight (flno VARCHAR, distance VARCHAR, price VARCHAR)"
Show the flight number of flights with three lowest distances.,SELECT flno FROM Flight ORDER BY distance LIMIT 3,"CREATE TABLE Flight (flno VARCHAR, distance VARCHAR)"
What is the average distance and average price for flights from Los Angeles.,"SELECT AVG(distance), AVG(price) FROM Flight WHERE origin = ""Los Angeles""","CREATE TABLE Flight (distance INTEGER, price INTEGER, origin VARCHAR)"
Show all origins and the number of flights from each origin.,"SELECT origin, COUNT(*) FROM Flight GROUP BY origin",CREATE TABLE Flight (origin VARCHAR)
Show all destinations and the number of flights to each destination.,"SELECT destination, COUNT(*) FROM Flight GROUP BY destination",CREATE TABLE Flight (destination VARCHAR)
Which origin has most number of flights?,SELECT origin FROM Flight GROUP BY origin ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Flight (origin VARCHAR)
Which destination has least number of flights?,SELECT destination FROM Flight GROUP BY destination ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Flight (destination VARCHAR)
What is the aircraft name for the flight with number 99,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno = 99,"CREATE TABLE Flight (aid VARCHAR, flno VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)"
Show all flight numbers with aircraft Airbus A340-300.,"SELECT T1.flno FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = ""Airbus A340-300""","CREATE TABLE Flight (flno VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)"
Show aircraft names and number of flights for each aircraft.,"SELECT T2.name, COUNT(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid","CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)"
Show names for all aircraft with at least two flights.,SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid HAVING COUNT(*) >= 2,"CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Flight (aid VARCHAR)"
How many employees have certificate.,SELECT COUNT(DISTINCT eid) FROM Certificate,CREATE TABLE Certificate (eid VARCHAR)
Show ids for all employees who don't have a certificate.,SELECT eid FROM Employee EXCEPT SELECT eid FROM Certificate,CREATE TABLE Employee (eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR)
Show names for all aircrafts of which John Williams has certificates.,"SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T1.name = ""John Williams""","CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR); CREATE TABLE Employee (eid VARCHAR, name VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)"
Show names for all employees who have certificate of Boeing 737-800.,"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800""","CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)"
Show names for all employees who have certificates on both Boeing 737-800 and Airbus A340-300.,"SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800"" INTERSECT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Airbus A340-300""","CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)"
Show names for all employees who do not have certificate of Boeing 737-800.,"SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.name = ""Boeing 737-800""","CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Employee (name VARCHAR); CREATE TABLE Aircraft (aid VARCHAR, name VARCHAR)"
Show the name of aircraft which fewest people have its certificate.,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid GROUP BY T1.aid ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR)"
Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.,SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid = T1.aid WHERE T2.distance > 5000 GROUP BY T1.aid ORDER BY COUNT(*) >= 5,"CREATE TABLE Certificate (aid VARCHAR); CREATE TABLE Aircraft (name VARCHAR, aid VARCHAR, distance INTEGER)"
what is the salary and name of the employee who has the most number of aircraft certificates?,"SELECT T1.name, T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Certificate (eid VARCHAR); CREATE TABLE Employee (name VARCHAR, salary VARCHAR, eid VARCHAR)"
What is the salary and name of the employee who has the most number of certificates on aircrafts with distance more than 5000?,SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid = T2.eid JOIN Aircraft AS T3 ON T3.aid = T2.aid WHERE T3.distance > 5000 GROUP BY T1.eid ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Aircraft (aid VARCHAR, distance INTEGER); CREATE TABLE Employee (name VARCHAR, eid VARCHAR); CREATE TABLE Certificate (eid VARCHAR, aid VARCHAR)"
How many allergies are there?,SELECT COUNT(DISTINCT allergy) FROM Allergy_type,CREATE TABLE Allergy_type (allergy VARCHAR)
How many different allergy types exist?,SELECT COUNT(DISTINCT allergytype) FROM Allergy_type,CREATE TABLE Allergy_type (allergytype VARCHAR)
Show all allergy types.,SELECT DISTINCT allergytype FROM Allergy_type,CREATE TABLE Allergy_type (allergytype VARCHAR)
Show all allergies and their types.,"SELECT allergy, allergytype FROM Allergy_type","CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
Show all allergies with type food.,"SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype = ""food""","CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
What is the type of allergy Cat?,"SELECT allergytype FROM Allergy_type WHERE allergy = ""Cat""","CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)"
How many allergies have type animal?,"SELECT COUNT(*) FROM Allergy_type WHERE allergytype = ""animal""",CREATE TABLE Allergy_type (allergytype VARCHAR)
Show all allergy types and the number of allergies in each type.,"SELECT allergytype, COUNT(*) FROM Allergy_type GROUP BY allergytype",CREATE TABLE Allergy_type (allergytype VARCHAR)
Which allergy type has most number of allergies?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Allergy_type (allergytype VARCHAR)
Which allergy type has least number of allergies?,SELECT allergytype FROM Allergy_type GROUP BY allergytype ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Allergy_type (allergytype VARCHAR)
How many students are there?,SELECT COUNT(*) FROM Student,CREATE TABLE Student (Id VARCHAR)
Show first name and last name for all students.,"SELECT Fname, Lname FROM Student","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR)"
How many different advisors are listed?,SELECT COUNT(DISTINCT advisor) FROM Student,CREATE TABLE Student (advisor VARCHAR)
Show all majors.,SELECT DISTINCT Major FROM Student,CREATE TABLE Student (Major VARCHAR)
Show all cities where students live.,SELECT DISTINCT city_code FROM Student,CREATE TABLE Student (city_code VARCHAR)
"Show first name, last name, age for all female students. Their sex is F.","SELECT Fname, Lname, Age FROM Student WHERE Sex = 'F'","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Sex VARCHAR)"
Show student ids for all male students.,SELECT StuID FROM Student WHERE Sex = 'M',"CREATE TABLE Student (StuID VARCHAR, Sex VARCHAR)"
How many students are age 18?,SELECT COUNT(*) FROM Student WHERE age = 18,CREATE TABLE Student (age VARCHAR)
Show all student ids who are older than 20.,SELECT StuID FROM Student WHERE age > 20,"CREATE TABLE Student (StuID VARCHAR, age INTEGER)"
"Which city does the student whose last name is ""Kim"" live in?","SELECT city_code FROM Student WHERE LName = ""Kim""","CREATE TABLE Student (city_code VARCHAR, LName VARCHAR)"
Who is the advisor of student with ID 1004?,SELECT Advisor FROM Student WHERE StuID = 1004,"CREATE TABLE Student (Advisor VARCHAR, StuID VARCHAR)"
How many students live in HKG or CHI?,"SELECT COUNT(*) FROM Student WHERE city_code = ""HKG"" OR city_code = ""CHI""",CREATE TABLE Student (city_code VARCHAR)
"Show the minimum, average, and maximum age of all students.","SELECT MIN(age), AVG(age), MAX(age) FROM Student",CREATE TABLE Student (age INTEGER)
What is the last name of the youngest student?,SELECT LName FROM Student WHERE age = (SELECT MIN(age) FROM Student),"CREATE TABLE Student (LName VARCHAR, age INTEGER)"
Show the student id of the oldest student.,SELECT StuID FROM Student WHERE age = (SELECT MAX(age) FROM Student),"CREATE TABLE Student (StuID VARCHAR, age INTEGER)"
Show all majors and corresponding number of students.,"SELECT major, COUNT(*) FROM Student GROUP BY major",CREATE TABLE Student (major VARCHAR)
Which major has most number of students?,SELECT major FROM Student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Student (major VARCHAR)
Show all ages and corresponding number of students.,"SELECT age, COUNT(*) FROM Student GROUP BY age",CREATE TABLE Student (age VARCHAR)
Show the average age for male and female students.,"SELECT AVG(age), sex FROM Student GROUP BY sex","CREATE TABLE Student (sex VARCHAR, age INTEGER)"
Show all cities and corresponding number of students.,"SELECT city_code, COUNT(*) FROM Student GROUP BY city_code",CREATE TABLE Student (city_code VARCHAR)
Show all advisors and corresponding number of students.,"SELECT advisor, COUNT(*) FROM Student GROUP BY advisor",CREATE TABLE Student (advisor VARCHAR)
Which advisor has most number of students?,SELECT advisor FROM Student GROUP BY advisor ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Student (advisor VARCHAR)
How many students have cat allergies?,"SELECT COUNT(*) FROM Has_allergy WHERE Allergy = ""Cat""",CREATE TABLE Has_allergy (Allergy VARCHAR)
Show all student IDs who have at least two allergies.,SELECT StuID FROM Has_allergy GROUP BY StuID HAVING COUNT(*) >= 2,CREATE TABLE Has_allergy (StuID VARCHAR)
What are the student ids of students who don't have any allergies?,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy,CREATE TABLE Has_allergy (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)
How many female students have milk or egg allergies?,"SELECT COUNT(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.sex = ""F"" AND T1.allergy = ""Milk"" OR T1.allergy = ""Eggs""","CREATE TABLE Student (StuID VARCHAR, sex VARCHAR); CREATE TABLE has_allergy (StuID VARCHAR, allergy VARCHAR)"
How many students have a food allergy?,"SELECT COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy WHERE T2.allergytype = ""food""","CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergy VARCHAR, allergytype VARCHAR)"
Which allergy has most number of students affected?,SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Has_allergy (Allergy VARCHAR)
Show all allergies with number of students affected.,"SELECT Allergy, COUNT(*) FROM Has_allergy GROUP BY Allergy",CREATE TABLE Has_allergy (Allergy VARCHAR)
Show all allergy type with number of students affected.,"SELECT T2.allergytype, COUNT(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype","CREATE TABLE Has_allergy (allergy VARCHAR); CREATE TABLE Allergy_type (allergytype VARCHAR, allergy VARCHAR)"
Find the last name and age of the student who has allergy to both milk and cat.,"SELECT lname, age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")","CREATE TABLE Has_allergy (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (lname VARCHAR, age VARCHAR, StuID VARCHAR, Allergy VARCHAR)"
What are the allergies and their types that the student with first name Lisa has? And order the result by name of allergies.,"SELECT T1.Allergy, T1.AllergyType FROM Allergy_type AS T1 JOIN Has_allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T3.StuID = T2.StuID WHERE T3.Fname = ""Lisa"" ORDER BY T1.Allergy","CREATE TABLE Has_allergy (Allergy VARCHAR, StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR); CREATE TABLE Allergy_type (Allergy VARCHAR, AllergyType VARCHAR)"
Find the first name and gender of the student who has allergy to milk but not cat.,"SELECT fname, sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Milk"" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy = ""Cat"")","CREATE TABLE Student (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Has_allergy (fname VARCHAR, sex VARCHAR, StuID VARCHAR, Allergy VARCHAR)"
Find the average age of the students who have allergies with food and animal types.,"SELECT AVG(age) FROM Student WHERE StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""animal"")","CREATE TABLE Student (age INTEGER, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)"
List the first and last name of the students who do not have any food type allergy.,"SELECT fname, lname FROM Student WHERE NOT StuID IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")","CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (StuID VARCHAR, Allergy VARCHAR)"
Find the number of male (sex is 'M') students who have some food type allery.,"SELECT COUNT(*) FROM Student WHERE sex = ""M"" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"")","CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Student (sex VARCHAR, StuID VARCHAR)"
Find the different first names and cities of the students who have allergy to milk or cat.,"SELECT DISTINCT T1.fname, T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid = T2.stuid WHERE T2.Allergy = ""Milk"" OR T2.Allergy = ""Cat""","CREATE TABLE Has_Allergy (stuid VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, city_code VARCHAR, stuid VARCHAR)"
Find the number of students who are older than 18 and do not have allergy to either food or animal.,"SELECT COUNT(*) FROM Student WHERE age > 18 AND NOT StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = ""food"" OR T2.allergytype = ""animal"")","CREATE TABLE Allergy_Type (Allergy VARCHAR, allergytype VARCHAR); CREATE TABLE Has_allergy (Allergy VARCHAR); CREATE TABLE Student (age VARCHAR, StuID VARCHAR)"
Find the first name and major of the students who are not allegry to soy.,"SELECT fname, major FROM Student WHERE NOT StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = ""Soy"")","CREATE TABLE Has_allergy (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR); CREATE TABLE Student (fname VARCHAR, major VARCHAR, StuID VARCHAR, Allergy VARCHAR)"
A list of the top 5 countries by number of invoices. List country name and number of invoices.,"SELECT billing_country, COUNT(*) FROM invoices GROUP BY billing_country ORDER BY COUNT(*) DESC LIMIT 5",CREATE TABLE invoices (billing_country VARCHAR)
A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.,"SELECT billing_country, SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8","CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)"
A list of the top 10 countries by average invoice size. List country name and average invoice size.,"SELECT billing_country, AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10","CREATE TABLE invoices (billing_country VARCHAR, total INTEGER)"
Find out 5 customers who most recently purchased something. List customers' first and last name.,"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY T2.invoice_date DESC LIMIT 5","CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR, invoice_date VARCHAR)"
Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.,"SELECT T1.first_name, T1.last_name, COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10","CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)"
List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.,"SELECT T1.first_name, T1.last_name, SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10","CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR)"
List the top 5 genres by number of tracks. List genres name and total tracks.,"SELECT T1.name, COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 5","CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)"
List every album's title.,SELECT title FROM albums,CREATE TABLE albums (title VARCHAR)
List every album ordered by album title in ascending order.,SELECT title FROM albums ORDER BY title,CREATE TABLE albums (title VARCHAR)
List every album whose title starts with A in alphabetical order.,SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title,CREATE TABLE albums (title VARCHAR)
List the customers first and last name of 10 least expensive invoices.,"SELECT T1.first_name, T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id ORDER BY total LIMIT 10","CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE invoices (customer_id VARCHAR)"
"List total amount of  invoice from Chicago, IL.","SELECT SUM(total) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL""","CREATE TABLE invoices (total INTEGER, billing_city VARCHAR, billing_state VARCHAR)"
"List the number of invoices from Chicago, IL.","SELECT COUNT(*) FROM invoices WHERE billing_city = ""Chicago"" AND billing_state = ""IL""","CREATE TABLE invoices (billing_city VARCHAR, billing_state VARCHAR)"
"List the number of invoices from the US, grouped by state.","SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state","CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)"
List the state in the US with the most invoices.,"SELECT billing_state, COUNT(*) FROM invoices WHERE billing_country = ""USA"" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE invoices (billing_state VARCHAR, billing_country VARCHAR)"
List the number of invoices and the invoice total from California.,"SELECT billing_state, COUNT(*), SUM(total) FROM invoices WHERE billing_state = ""CA""","CREATE TABLE invoices (billing_state VARCHAR, total INTEGER)"
List Aerosmith's albums.,"SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Aerosmith""","CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)"
How many albums does Billy Cobham has?,"SELECT COUNT(*) FROM albums AS T1 JOIN artists AS T2 ON T1.artist_id = T2.id WHERE T2.name = ""Billy Cobham""","CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (artist_id VARCHAR)"
Eduardo Martins is a customer at which company?,"SELECT company FROM customers WHERE first_name = ""Eduardo"" AND last_name = ""Martins""","CREATE TABLE customers (company VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is Astrid Gruber's email and phone number?,"SELECT email, phone FROM customers WHERE first_name = ""Astrid"" AND last_name = ""Gruber""","CREATE TABLE customers (email VARCHAR, phone VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many customers live in Prague city?,"SELECT COUNT(*) FROM customers WHERE city = ""Prague""",CREATE TABLE customers (city VARCHAR)
How many customers in state of CA?,"SELECT COUNT(*) FROM customers WHERE state = ""CA""",CREATE TABLE customers (state VARCHAR)
What country does Roberto Almeida live?,"SELECT country FROM customers WHERE first_name = ""Roberto"" AND last_name = ""Almeida""","CREATE TABLE customers (country VARCHAR, first_name VARCHAR, last_name VARCHAR)"
List the name of albums that are released by aritist whose name has 'Led',SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id = T2.artist_id WHERE T1.name LIKE '%Led%',"CREATE TABLE artists (id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, artist_id VARCHAR)"
How many customers does Steve Johnson support?,"SELECT COUNT(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = ""Steve"" AND T1.last_name = ""Johnson""","CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)"
"What is the title, phone and hire date of Nancy Edwards?","SELECT title, phone, hire_date FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards""","CREATE TABLE employees (title VARCHAR, phone VARCHAR, hire_date VARCHAR, first_name VARCHAR, last_name VARCHAR)"
find the full name of employees who report to Nancy Edwards?,"SELECT T2.first_name, T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = ""Nancy"" AND T1.last_name = ""Edwards""","CREATE TABLE employees (id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, reports_to VARCHAR)"
What is the address of employee Nancy Edwards?,"SELECT address FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards""","CREATE TABLE employees (address VARCHAR, first_name VARCHAR, last_name VARCHAR)"
Find the full name of employee who supported the most number of customers.,"SELECT T1.first_name, T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE customers (support_rep_id VARCHAR)"
How many employees are living in Canada?,"SELECT COUNT(*) FROM employees WHERE country = ""Canada""",CREATE TABLE employees (country VARCHAR)
What is employee Nancy Edwards's phone number?,"SELECT phone FROM employees WHERE first_name = ""Nancy"" AND last_name = ""Edwards""","CREATE TABLE employees (phone VARCHAR, first_name VARCHAR, last_name VARCHAR)"
Who is the youngest employee in the company? List employee's first and last name.,"SELECT first_name, last_name FROM employees ORDER BY birth_date DESC LIMIT 1","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)"
List top 10 employee work longest in the company. List employee's first and last name.,"SELECT first_name, last_name FROM employees ORDER BY hire_date LIMIT 10","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR)"
Find the number of employees whose title is IT Staff from each city?,"SELECT COUNT(*), city FROM employees WHERE title = 'IT Staff' GROUP BY city","CREATE TABLE employees (city VARCHAR, title VARCHAR)"
"Which employee manage most number of peoples? List employee's first and last name, and number of people report to that employee.","SELECT T2.first_name, T2.last_name, COUNT(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY COUNT(T1.reports_to) DESC LIMIT 1","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, id VARCHAR); CREATE TABLE employees (reports_to VARCHAR)"
How many orders does Lucas Mancini has?,"SELECT COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini""","CREATE TABLE invoices (customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is the total amount of money spent by Lucas Mancini?,"SELECT SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = ""Lucas"" AND T1.last_name = ""Mancini""","CREATE TABLE invoices (total INTEGER, customer_id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
List all media types.,SELECT name FROM media_types,CREATE TABLE media_types (name VARCHAR)
List all different genre types.,SELECT DISTINCT name FROM genres,CREATE TABLE genres (name VARCHAR)
List the name of all playlist.,SELECT name FROM playlists,CREATE TABLE playlists (name VARCHAR)
Who is the composer of track Fast As a Shark?,"SELECT composer FROM tracks WHERE name = ""Fast As a Shark""","CREATE TABLE tracks (composer VARCHAR, name VARCHAR)"
How long does track Fast As a Shark has?,"SELECT milliseconds FROM tracks WHERE name = ""Fast As a Shark""","CREATE TABLE tracks (milliseconds VARCHAR, name VARCHAR)"
What is the name of tracks whose genre is Rock?,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock""","CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)"
What is title of album which track Balls to the Wall belongs to?,"SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = ""Balls to the Wall""","CREATE TABLE tracks (genre_id VARCHAR, name VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)"
List name of all tracks in Balls to the Wall.,"SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = ""Balls to the Wall""","CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR); CREATE TABLE albums (id VARCHAR, title VARCHAR)"
List title of albums have the number of tracks greater than 10.,SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING COUNT(T1.id) > 10,"CREATE TABLE tracks (album_id VARCHAR); CREATE TABLE albums (title VARCHAR, id VARCHAR)"
List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" AND T3.name = ""MPEG audio file""","CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)"
List the name of tracks belongs to genre Rock or media type is MPEG audio file.,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = ""Rock"" OR T3.name = ""MPEG audio file""","CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR, media_type_id VARCHAR); CREATE TABLE media_types (id VARCHAR, name VARCHAR)"
List the name of tracks belongs to genre Rock or genre Jazz.,"SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = ""Rock"" OR T1.name = ""Jazz""","CREATE TABLE genres (id VARCHAR, name VARCHAR); CREATE TABLE tracks (name VARCHAR, genre_id VARCHAR)"
List the name of all tracks in the playlists of Movies.,"SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = ""Movies""","CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)"
List the name of playlist which has number of tracks greater than 100.,SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING COUNT(T1.track_id) > 100,"CREATE TABLE playlist_tracks (playlist_id VARCHAR, track_id VARCHAR); CREATE TABLE playlists (name VARCHAR, id VARCHAR)"
List all tracks bought by customer Daan Peeters.,"SELECT T1.name FROM tracks AS T1 JOIN invoice_lines AS T2 ON T1.id = T2.track_id JOIN invoices AS T3 ON T3.id = T2.invoice_id JOIN customers AS T4 ON T4.id = T3.customer_id WHERE T4.first_name = ""Daan"" AND T4.last_name = ""Peeters""","CREATE TABLE invoices (id VARCHAR, customer_id VARCHAR); CREATE TABLE invoice_lines (track_id VARCHAR, invoice_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR); CREATE TABLE customers (id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How much is the track Fast As a Shark?,"SELECT unit_price FROM tracks WHERE name = ""Fast As a Shark""","CREATE TABLE tracks (unit_price VARCHAR, name VARCHAR)"
Find the name of tracks which are in Movies playlist but not in music playlist.,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music',"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)"
Find the name of tracks which are in both Movies and music playlists.,SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T2.playlist_id = T3.id WHERE T3.name = 'Music',"CREATE TABLE playlists (id VARCHAR, name VARCHAR); CREATE TABLE playlist_tracks (track_id VARCHAR, playlist_id VARCHAR); CREATE TABLE tracks (name VARCHAR, id VARCHAR)"
Find number of tracks in each genre?,"SELECT COUNT(*), T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name","CREATE TABLE tracks (genre_id VARCHAR); CREATE TABLE genres (name VARCHAR, id VARCHAR)"
How many editors are there?,SELECT COUNT(*) FROM editor,CREATE TABLE editor (Id VARCHAR)
List the names of editors in ascending order of age.,SELECT Name FROM editor ORDER BY Age,"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
What are the names and ages of editors?,"SELECT Name, Age FROM editor","CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
List the names of editors who are older than 25.,SELECT Name FROM editor WHERE Age > 25,"CREATE TABLE editor (Name VARCHAR, Age INTEGER)"
Show the names of editors of age either 24 or 25.,SELECT Name FROM editor WHERE Age = 24 OR Age = 25,"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
What is the name of the youngest editor?,SELECT Name FROM editor ORDER BY Age LIMIT 1,"CREATE TABLE editor (Name VARCHAR, Age VARCHAR)"
What are the different ages of editors? Show each age along with the number of editors of that age.,"SELECT Age, COUNT(*) FROM editor GROUP BY Age",CREATE TABLE editor (Age VARCHAR)
Please show the most common age of editors.,SELECT Age FROM editor GROUP BY Age ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE editor (Age VARCHAR)
Show the distinct themes of journals.,SELECT DISTINCT Theme FROM journal,CREATE TABLE journal (Theme VARCHAR)
Show the names of editors and the theme of journals for which they serve on committees.,"SELECT T2.Name, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID","CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)"
"Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.","SELECT T2.Name, T2.age, T3.Theme FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID ORDER BY T3.Theme","CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, age VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Theme VARCHAR, Journal_ID VARCHAR)"
Show the names of editors that are on the committee of journals with sales bigger than 3000.,SELECT T2.Name FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000,"CREATE TABLE journal_committee (Editor_ID VARCHAR, Journal_ID VARCHAR); CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal (Journal_ID VARCHAR, Sales INTEGER)"
"Show the id, name of each editor and the number of journal committees they are on.","SELECT T1.editor_id, T1.Name, COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id","CREATE TABLE editor (editor_id VARCHAR, Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)"
Show the names of editors that are on at least two journal committees.,SELECT T1.Name FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.Name HAVING COUNT(*) >= 2,"CREATE TABLE editor (Name VARCHAR, Editor_ID VARCHAR); CREATE TABLE journal_committee (Editor_ID VARCHAR)"
List the names of editors that are not on any journal committee.,SELECT Name FROM editor WHERE NOT editor_id IN (SELECT editor_id FROM journal_committee),"CREATE TABLE editor (Name VARCHAR, editor_id VARCHAR); CREATE TABLE journal_committee (Name VARCHAR, editor_id VARCHAR)"
"List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.","SELECT date, theme, sales FROM journal EXCEPT SELECT T1.date, T1.theme, T1.sales FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID","CREATE TABLE journal_committee (journal_ID VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR); CREATE TABLE journal (date VARCHAR, theme VARCHAR, sales VARCHAR, journal_ID VARCHAR)"
What is the average sales of the journals that have an editor whose work type is 'Photo'?,SELECT AVG(T1.sales) FROM journal AS T1 JOIN journal_committee AS T2 ON T1.journal_ID = T2.journal_ID WHERE T2.work_type = 'Photo',"CREATE TABLE journal_committee (journal_ID VARCHAR, work_type VARCHAR); CREATE TABLE journal (sales INTEGER, journal_ID VARCHAR)"
How many accounts do we have?,SELECT COUNT(*) FROM Accounts,CREATE TABLE Accounts (Id VARCHAR)
"Show ids, customer ids, names for all accounts.","SELECT account_id, customer_id, account_name FROM Accounts","CREATE TABLE Accounts (account_id VARCHAR, customer_id VARCHAR, account_name VARCHAR)"
Show other account details for account with name 338.,"SELECT other_account_details FROM Accounts WHERE account_name = ""338""","CREATE TABLE Accounts (other_account_details VARCHAR, account_name VARCHAR)"
"What is the first name, last name, and phone of the customer with account name 162?","SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""162""","CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR)"
How many accounts does the customer with first name Art and last name Turcotte have?,"SELECT COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte""","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
Show all customer ids and the number of accounts for each customer.,"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id",CREATE TABLE Accounts (customer_id VARCHAR)
Show the customer id and number of accounts with most accounts.,"SELECT customer_id, COUNT(*) FROM Accounts GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Accounts (customer_id VARCHAR)
"What is the customer first, last name and id with least number of accounts.","SELECT T2.customer_first_name, T2.customer_last_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
Show the number of all customers without an account.,SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Accounts),CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)
Show the first names and last names of customers without any account.,"SELECT customer_first_name, customer_last_name FROM Customers EXCEPT SELECT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR)"
Show distinct first and last names for all customers with an account.,"SELECT DISTINCT T1.customer_first_name, T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
How many customers have an account?,SELECT COUNT(DISTINCT customer_id) FROM Accounts,CREATE TABLE Accounts (customer_id VARCHAR)
How many customers do we have?,SELECT COUNT(*) FROM Customers,CREATE TABLE Customers (Id VARCHAR)
"Show ids, first names, last names, and phones for all customers.","SELECT customer_id, customer_first_name, customer_last_name, customer_phone FROM Customers","CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR)"
What is the phone and email for customer with first name Aniyah and last name Feest?,"SELECT customer_phone, customer_email FROM Customers WHERE customer_first_name = ""Aniyah"" AND customer_last_name = ""Feest""","CREATE TABLE Customers (customer_phone VARCHAR, customer_email VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
Show the number of customer cards.,SELECT COUNT(*) FROM Customers_cards,CREATE TABLE Customers_cards (Id VARCHAR)
"Show ids, customer ids, card type codes, card numbers for all cards.","SELECT card_id, customer_id, card_type_code, card_number FROM Customers_cards","CREATE TABLE Customers_cards (card_id VARCHAR, customer_id VARCHAR, card_type_code VARCHAR, card_number VARCHAR)"
Show the date valid from and the date valid to for the card with card number '4560596484842'.,"SELECT date_valid_from, date_valid_to FROM Customers_cards WHERE card_number = ""4560596484842""","CREATE TABLE Customers_cards (date_valid_from VARCHAR, date_valid_to VARCHAR, card_number VARCHAR)"
"What is the first name, last name, and phone of the customer with card 4560596484842.","SELECT T2.customer_first_name, T2.customer_last_name, T2.customer_phone FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.card_number = ""4560596484842""","CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE Customers_cards (customer_id VARCHAR, card_number VARCHAR)"
How many cards does customer Art Turcotte have?,"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Art"" AND T2.customer_last_name = ""Turcotte""","CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
How many debit cards do we have?,"SELECT COUNT(*) FROM Customers_cards WHERE card_type_code = ""Debit""",CREATE TABLE Customers_cards (card_type_code VARCHAR)
How many credit cards does customer Blanche Huels have?,"SELECT COUNT(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Blanche"" AND T2.customer_last_name = ""Huels"" AND T1.card_type_code = ""Credit""","CREATE TABLE Customers_cards (customer_id VARCHAR, card_type_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR)"
Show all customer ids and the number of cards owned by each customer.,"SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id",CREATE TABLE Customers_cards (customer_id VARCHAR)
"What is the customer id with most number of cards, and how many does he have?","SELECT customer_id, COUNT(*) FROM Customers_cards GROUP BY customer_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Customers_cards (customer_id VARCHAR)
"Show id, first and last names for all customers with at least two cards.","SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
"What is the customer id, first and last name with least number of accounts.","SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
Show all card type codes and the number of cards in each type.,"SELECT card_type_code, COUNT(*) FROM Customers_cards GROUP BY card_type_code",CREATE TABLE Customers_cards (card_type_code VARCHAR)
What is the card type code with most number of cards?,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Customers_cards (card_type_code VARCHAR)
Show card type codes with at least 5 cards.,SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING COUNT(*) >= 5,CREATE TABLE Customers_cards (card_type_code VARCHAR)
Show all card type codes and the number of customers holding cards in each type.,"SELECT card_type_code, COUNT(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code","CREATE TABLE Customers_cards (card_type_code VARCHAR, customer_id VARCHAR)"
Show the customer ids and firstname without a credit card.,"SELECT customer_id, customer_first_name FROM Customers EXCEPT SELECT T1.customer_id, T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE card_type_code = ""Credit""","CREATE TABLE Customers_cards (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, card_type_code VARCHAR)"
Show all card type codes.,SELECT DISTINCT card_type_code FROM Customers_Cards,CREATE TABLE Customers_Cards (card_type_code VARCHAR)
Show the number of card types.,SELECT COUNT(DISTINCT card_type_code) FROM Customers_Cards,CREATE TABLE Customers_Cards (card_type_code VARCHAR)
Show all transaction types.,SELECT DISTINCT transaction_type FROM Financial_Transactions,CREATE TABLE Financial_Transactions (transaction_type VARCHAR)
Show the number of transaction types.,SELECT COUNT(DISTINCT transaction_type) FROM Financial_Transactions,CREATE TABLE Financial_Transactions (transaction_type VARCHAR)
What is the average and total transaction amount?,"SELECT AVG(transaction_amount), SUM(transaction_amount) FROM Financial_transactions",CREATE TABLE Financial_transactions (transaction_amount INTEGER)
Show the card type codes and the number of transactions.,"SELECT T2.card_type_code, COUNT(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id = T2.card_id GROUP BY T2.card_type_code","CREATE TABLE Financial_transactions (card_id VARCHAR); CREATE TABLE Customers_cards (card_type_code VARCHAR, card_id VARCHAR)"
Show the transaction type and the number of transactions.,"SELECT transaction_type, COUNT(*) FROM Financial_transactions GROUP BY transaction_type",CREATE TABLE Financial_transactions (transaction_type VARCHAR)
What is the transaction type that has processed the greatest total amount in transactions?,SELECT transaction_type FROM Financial_transactions GROUP BY transaction_type ORDER BY SUM(transaction_amount) DESC LIMIT 1,"CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)"
Show the account id and the number of transactions for each account,"SELECT account_id, COUNT(*) FROM Financial_transactions GROUP BY account_id",CREATE TABLE Financial_transactions (account_id VARCHAR)
How many tracks do we have?,SELECT COUNT(*) FROM track,CREATE TABLE track (Id VARCHAR)
Show the name and location for all tracks.,"SELECT name, LOCATION FROM track","CREATE TABLE track (name VARCHAR, LOCATION VARCHAR)"
"Show names and seatings, ordered by seating for all tracks opened after 2000.","SELECT name, seating FROM track WHERE year_opened > 2000 ORDER BY seating","CREATE TABLE track (name VARCHAR, seating VARCHAR, year_opened INTEGER)"
"What is the name, location and seating for the most recently opened track?","SELECT name, LOCATION, seating FROM track ORDER BY year_opened DESC LIMIT 1","CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, seating VARCHAR, year_opened VARCHAR)"
"What is the minimum, maximum, and average seating for all tracks.","SELECT MIN(seating), MAX(seating), AVG(seating) FROM track",CREATE TABLE track (seating INTEGER)
"Show the name, location, open year for all tracks with a seating higher than the average.","SELECT name, LOCATION, year_opened FROM track WHERE seating > (SELECT AVG(seating) FROM track)","CREATE TABLE track (name VARCHAR, LOCATION VARCHAR, year_opened VARCHAR, seating INTEGER)"
What are distinct locations where tracks are located?,SELECT DISTINCT LOCATION FROM track,CREATE TABLE track (LOCATION VARCHAR)
How many races are there?,SELECT COUNT(*) FROM race,CREATE TABLE race (Id VARCHAR)
What are the distinct classes that races can have?,SELECT DISTINCT CLASS FROM race,CREATE TABLE race (CLASS VARCHAR)
"Show name, class, and date for all races.","SELECT name, CLASS, date FROM race","CREATE TABLE race (name VARCHAR, CLASS VARCHAR, date VARCHAR)"
Show the race class and number of races in each class.,"SELECT CLASS, COUNT(*) FROM race GROUP BY CLASS",CREATE TABLE race (CLASS VARCHAR)
What is the race class with most number of races.,SELECT CLASS FROM race GROUP BY CLASS ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE race (CLASS VARCHAR)
List the race class with at least two races.,SELECT CLASS FROM race GROUP BY CLASS HAVING COUNT(*) >= 2,CREATE TABLE race (CLASS VARCHAR)
What are the names for tracks without a race in class 'GT'.,SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id WHERE T1.class = 'GT',"CREATE TABLE race (track_id VARCHAR, class VARCHAR); CREATE TABLE track (name VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)"
Show all track names that have had no races.,SELECT name FROM track WHERE NOT track_id IN (SELECT track_id FROM race),"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (name VARCHAR, track_id VARCHAR)"
Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.,SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000,"CREATE TABLE track (year_opened VARCHAR, seating INTEGER)"
Show the name of track and the number of races in each track.,"SELECT T2.name, COUNT(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id","CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)"
Show the name of track with most number of races.,SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE track (name VARCHAR, track_id VARCHAR); CREATE TABLE race (track_id VARCHAR)"
Show the name and date for each race and its track name.,"SELECT T1.name, T1.date, T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id","CREATE TABLE race (name VARCHAR, date VARCHAR, track_id VARCHAR); CREATE TABLE track (name VARCHAR, track_id VARCHAR)"
Show the name and location of track with 1 race.,"SELECT T2.name, T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id HAVING COUNT(*) = 1","CREATE TABLE race (track_id VARCHAR); CREATE TABLE track (name VARCHAR, location VARCHAR, track_id VARCHAR)"
Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.,SELECT LOCATION FROM track WHERE seating > 90000 INTERSECT SELECT LOCATION FROM track WHERE seating < 70000,"CREATE TABLE track (LOCATION VARCHAR, seating INTEGER)"
How many members have the black membership card?,SELECT COUNT(*) FROM member WHERE Membership_card = 'Black',CREATE TABLE member (Membership_card VARCHAR)
Find the number of members living in each address.,"SELECT COUNT(*), address FROM member GROUP BY address",CREATE TABLE member (address VARCHAR)
Give me the names of members whose address is in Harford or Waterbury.,SELECT name FROM member WHERE address = 'Harford' OR address = 'Waterbury',"CREATE TABLE member (name VARCHAR, address VARCHAR)"
Find the ids and names of members who are under age 30 or with black membership card.,"SELECT name, member_id FROM member WHERE Membership_card = 'Black' OR age < 30","CREATE TABLE member (name VARCHAR, member_id VARCHAR, Membership_card VARCHAR, age VARCHAR)"
"Find the purchase time, age and address of each member, and show the results in the order of purchase time.","SELECT Time_of_purchase, age, address FROM member ORDER BY Time_of_purchase","CREATE TABLE member (Time_of_purchase VARCHAR, age VARCHAR, address VARCHAR)"
Which membership card has more than 5 members?,SELECT Membership_card FROM member GROUP BY Membership_card HAVING COUNT(*) > 5,CREATE TABLE member (Membership_card VARCHAR)
Which address has both members younger than 30 and members older than 40?,SELECT address FROM member WHERE age < 30 INTERSECT SELECT address FROM member WHERE age > 40,"CREATE TABLE member (address VARCHAR, age INTEGER)"
What is the membership card held by both members living in Hartford and ones living in Waterbury address?,SELECT membership_card FROM member WHERE address = 'Hartford' INTERSECT SELECT membership_card FROM member WHERE address = 'Waterbury',"CREATE TABLE member (membership_card VARCHAR, address VARCHAR)"
How many members are not living in Hartford?,SELECT COUNT(*) FROM member WHERE address <> 'Hartford',CREATE TABLE member (address VARCHAR)
Which address do not have any member with the black membership card?,SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card = 'Black',"CREATE TABLE member (address VARCHAR, Membership_card VARCHAR)"
Show the shop addresses ordered by their opening year.,SELECT address FROM shop ORDER BY open_year,"CREATE TABLE shop (address VARCHAR, open_year VARCHAR)"
What are the average score and average staff number of all shops?,"SELECT AVG(num_of_staff), AVG(score) FROM shop","CREATE TABLE shop (num_of_staff INTEGER, score INTEGER)"
Find the id and address of the shops whose score is below the average score.,"SELECT shop_id, address FROM shop WHERE score < (SELECT AVG(score) FROM shop)","CREATE TABLE shop (shop_id VARCHAR, address VARCHAR, score INTEGER)"
Find the address and staff number of the shops that do not have any happy hour.,"SELECT address, num_of_staff FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM happy_hour)","CREATE TABLE shop (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (address VARCHAR, num_of_staff VARCHAR, shop_id VARCHAR)"
What are the id and address of the shops which have a happy hour in May?,"SELECT t1.address, t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id = t2.shop_id WHERE MONTH = 'May'","CREATE TABLE shop (address VARCHAR, shop_id VARCHAR); CREATE TABLE happy_hour (shop_id VARCHAR)"
which shop has happy hour most frequently? List its id and number of happy hours.,"SELECT shop_id, COUNT(*) FROM happy_hour GROUP BY shop_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE happy_hour (shop_id VARCHAR)
Which month has the most happy hours?,SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE happy_hour (MONTH VARCHAR)
Which months have more than 2 happy hours?,SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING COUNT(*) > 2,CREATE TABLE happy_hour (MONTH VARCHAR)
How many albums are there?,SELECT COUNT(*) FROM ALBUM,CREATE TABLE ALBUM (Id VARCHAR)
List the names of all music genres.,SELECT Name FROM GENRE,CREATE TABLE GENRE (Name VARCHAR)
Find all the customer information in state NY.,"SELECT * FROM CUSTOMER WHERE State = ""NY""",CREATE TABLE CUSTOMER (State VARCHAR)
What are the first names and last names of the employees who live in Calgary city.,"SELECT FirstName, LastName FROM EMPLOYEE WHERE City = ""Calgary""","CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, City VARCHAR)"
What are the distinct billing countries of the invoices?,SELECT DISTINCT (BillingCountry) FROM INVOICE,CREATE TABLE INVOICE (BillingCountry VARCHAR)
"Find the names of all artists that have ""a"" in their names.","SELECT Name FROM ARTIST WHERE Name LIKE ""%a%""",CREATE TABLE ARTIST (Name VARCHAR)
"Find the title of all the albums of the artist ""AC/DC"".","SELECT Title FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""AC/DC""","CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)"
"Hom many albums does the artist ""Metallica"" have?","SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T2.Name = ""Metallica""","CREATE TABLE ARTIST (ArtistId VARCHAR, Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)"
"Which artist does the album ""Balls to the Wall"" belong to?","SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId WHERE T1.Title = ""Balls to the Wall""","CREATE TABLE ALBUM (ArtistId VARCHAR, Title VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)"
Which artist has the most albums?,SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T2.Name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)"
"Find the names of all the tracks that contain the word ""you"".",SELECT Name FROM TRACK WHERE Name LIKE '%you%',CREATE TABLE TRACK (Name VARCHAR)
What is the average unit price of all the tracks?,SELECT AVG(UnitPrice) FROM TRACK,CREATE TABLE TRACK (UnitPrice INTEGER)
What are the durations of the longest and the shortest tracks in milliseconds?,"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM TRACK",CREATE TABLE TRACK (Milliseconds INTEGER)
"Show the album names, ids and the number of tracks for each album.","SELECT T1.Title, T2.AlbumID, COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID","CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR)"
What is the name of the most common genre in all tracks?,SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE GENRE (Name VARCHAR, GenreId VARCHAR); CREATE TABLE TRACK (GenreId VARCHAR)"
What is the least common media type in all tracks?,SELECT T1.Name FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId GROUP BY T2.MediaTypeId ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE MEDIATYPE (Name VARCHAR, MediaTypeId VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)"
Show the album names and ids for albums that contain tracks with unit price bigger than 1.,"SELECT T1.Title, T2.AlbumID FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 GROUP BY T2.AlbumID","CREATE TABLE ALBUM (Title VARCHAR, AlbumId VARCHAR); CREATE TABLE TRACK (AlbumID VARCHAR, AlbumId VARCHAR, UnitPrice INTEGER)"
How many tracks belong to rock genre?,"SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock""","CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
What is the average unit price of tracks that belong to Jazz genre?,"SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Jazz""","CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
"What is the first name and last name of the customer that has email ""luisg@embraer.com.br""?","SELECT FirstName, LastName FROM CUSTOMER WHERE Email = ""luisg@embraer.com.br""","CREATE TABLE CUSTOMER (FirstName VARCHAR, LastName VARCHAR, Email VARCHAR)"
"How many customers have email that contains ""gmail.com""?","SELECT COUNT(*) FROM CUSTOMER WHERE Email LIKE ""%gmail.com%""",CREATE TABLE CUSTOMER (Email VARCHAR)
What is the first name and last name employee helps the customer with first name Leonie?,"SELECT T2.FirstName, T2.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.FirstName = ""Leonie""","CREATE TABLE CUSTOMER (SupportRepId VARCHAR, FirstName VARCHAR); CREATE TABLE EMPLOYEE (FirstName VARCHAR, LastName VARCHAR, EmployeeId VARCHAR)"
What city does the employee who helps the customer with postal code 70174 live in?,"SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.PostalCode = ""70174""","CREATE TABLE EMPLOYEE (City VARCHAR, EmployeeId VARCHAR); CREATE TABLE CUSTOMER (SupportRepId VARCHAR, PostalCode VARCHAR)"
How many distinct cities does the employees live in?,SELECT COUNT(DISTINCT city) FROM EMPLOYEE,CREATE TABLE EMPLOYEE (city VARCHAR)
Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.,"SELECT T2.InvoiceDate FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = ""Astrid"" AND LastName = ""Gruber""","CREATE TABLE CUSTOMER (CustomerId VARCHAR, FirstName VARCHAR); CREATE TABLE INVOICE (InvoiceDate VARCHAR, CustomerId VARCHAR)"
Find all the customer last names that do not have invoice totals larger than 20.,SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.total > 20,"CREATE TABLE CUSTOMER (LastName VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, CustomerId VARCHAR); CREATE TABLE Invoice (CustomerId VARCHAR, total INTEGER)"
Find the first names of all customers that live in Brazil and have an invoice.,"SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Brazil""","CREATE TABLE CUSTOMER (FirstName VARCHAR, CustomerId VARCHAR, country VARCHAR); CREATE TABLE INVOICE (CustomerId VARCHAR)"
Find the address of all customers that live in Germany and have invoice.,"SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.country = ""Germany""","CREATE TABLE INVOICE (CustomerId VARCHAR); CREATE TABLE CUSTOMER (Address VARCHAR, CustomerId VARCHAR, country VARCHAR)"
List the phone numbers of all employees.,SELECT Phone FROM EMPLOYEE,CREATE TABLE EMPLOYEE (Phone VARCHAR)
How many tracks are in the AAC audio file media type?,"SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId = T2.MediaTypeId WHERE T1.Name = ""AAC audio file""","CREATE TABLE MEDIATYPE (MediaTypeId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (MediaTypeId VARCHAR)"
What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?,"SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Latin"" OR T1.Name = ""Pop""","CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
Please show the employee first names and ids of employees who serve at least 10 customers.,"SELECT T1.FirstName, T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) >= 10","CREATE TABLE CUSTOMER (FirstName VARCHAR, SupportRepId VARCHAR); CREATE TABLE EMPLOYEE (EmployeeId VARCHAR)"
Please show the employee last names that serves no more than 20 customers.,SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*) <= 20,"CREATE TABLE EMPLOYEE (EmployeeId VARCHAR); CREATE TABLE CUSTOMER (LastName VARCHAR, SupportRepId VARCHAR)"
Please list all album titles in alphabetical order.,SELECT Title FROM ALBUM ORDER BY Title,CREATE TABLE ALBUM (Title VARCHAR)
Please list the name and id of all artists that have at least 3 albums in alphabetical order.,"SELECT T2.Name, T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*) >= 3 ORDER BY T2.Name","CREATE TABLE ARTIST (Name VARCHAR, ArtistID VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR)"
Find the names of artists that do not have any albums.,SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId = T2.ArtistId,"CREATE TABLE ARTIST (Name VARCHAR); CREATE TABLE ALBUM (ArtistId VARCHAR); CREATE TABLE ARTIST (Name VARCHAR, ArtistId VARCHAR)"
What is the average unit price of rock tracks?,"SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Rock""","CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR); CREATE TABLE TRACK (UnitPrice INTEGER, GenreId VARCHAR)"
What are the duration of the longest and shortest pop tracks in milliseconds?,"SELECT MAX(Milliseconds), MIN(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId = T2.GenreId WHERE T1.Name = ""Pop""","CREATE TABLE TRACK (GenreId VARCHAR); CREATE TABLE GENRE (GenreId VARCHAR, Name VARCHAR)"
What are the birth dates of employees living in Edmonton?,"SELECT BirthDate FROM EMPLOYEE WHERE City = ""Edmonton""","CREATE TABLE EMPLOYEE (BirthDate VARCHAR, City VARCHAR)"
What are the distinct unit prices of all tracks?,SELECT DISTINCT (UnitPrice) FROM TRACK,CREATE TABLE TRACK (UnitPrice VARCHAR)
How many artists do not have any album?,SELECT COUNT(*) FROM ARTIST WHERE NOT artistid IN (SELECT artistid FROM ALBUM),CREATE TABLE ARTIST (artistid VARCHAR); CREATE TABLE ALBUM (artistid VARCHAR)
What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?,SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Reggae' INTERSECT SELECT T1.Title FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId JOIN Genre AS T3 ON T2.GenreID = T3.GenreID WHERE T3.Name = 'Rock',"CREATE TABLE Genre (GenreID VARCHAR, Name VARCHAR); CREATE TABLE Track (AlbumId VARCHAR, GenreID VARCHAR); CREATE TABLE Album (Title VARCHAR, AlbumId VARCHAR)"
Find all the phone numbers.,SELECT customer_phone FROM available_policies,CREATE TABLE available_policies (customer_phone VARCHAR)
"What are the customer phone numbers under the policy ""Life Insurance""?","SELECT customer_phone FROM available_policies WHERE policy_type_code = ""Life Insurance""","CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)"
Which policy type has the most records in the database?,SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE available_policies (policy_type_code VARCHAR)
What are all the customer phone numbers under the most popular policy type?,SELECT customer_phone FROM available_policies WHERE policy_type_code = (SELECT policy_type_code FROM available_policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE available_policies (customer_phone VARCHAR, policy_type_code VARCHAR)"
Find the policy type used by more than 4 customers.,SELECT policy_type_code FROM available_policies GROUP BY policy_type_code HAVING COUNT(*) > 4,CREATE TABLE available_policies (policy_type_code VARCHAR)
Find the total and average amount of settlements.,"SELECT SUM(settlement_amount), AVG(settlement_amount) FROM settlements",CREATE TABLE settlements (settlement_amount INTEGER)
Find the name of services that have been used for more than 2 times in first notification of loss.,SELECT t2.service_name FROM first_notification_of_loss AS t1 JOIN services AS t2 ON t1.service_id = t2.service_id GROUP BY t1.service_id HAVING COUNT(*) > 2,"CREATE TABLE services (service_name VARCHAR, service_id VARCHAR); CREATE TABLE first_notification_of_loss (service_id VARCHAR)"
What is the effective date of the claim that has the largest amount of total settlement?,SELECT t1.Effective_Date FROM claims AS t1 JOIN settlements AS t2 ON t1.claim_id = t2.claim_id GROUP BY t1.claim_id ORDER BY SUM(t2.settlement_amount) DESC LIMIT 1,"CREATE TABLE settlements (claim_id VARCHAR, settlement_amount INTEGER); CREATE TABLE claims (Effective_Date VARCHAR, claim_id VARCHAR)"
"How many policies are listed for the customer named ""Dayana Robel""?","SELECT COUNT(*) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = ""Dayana Robel""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)"
What is the name of the customer who has the most policies listed?,SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR)"
"What are all the policy types of the customer named ""Dayana Robel""?","SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = ""Dayana Robel""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)"
What are all the policy types of the customer that has the most policies listed?,SELECT DISTINCT t3.policy_type_code FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id JOIN available_policies AS t3 ON t2.policy_id = t3.policy_id WHERE t1.customer_name = (SELECT t1.customer_name FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_name ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE available_policies (policy_type_code VARCHAR, policy_id VARCHAR); CREATE TABLE customers_policies (customer_id VARCHAR, policy_id VARCHAR)"
List all the services in the alphabetical order.,SELECT service_name FROM services ORDER BY service_name,CREATE TABLE services (service_name VARCHAR)
How many services are there?,SELECT COUNT(*) FROM services,CREATE TABLE services (Id VARCHAR)
Find the names of users who do not have a first notification of loss record.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id,"CREATE TABLE first_notification_of_loss (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR)"
"Find the names of customers who have used either the service ""Close a policy"" or the service ""Upgrade a policy"".","SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""Close a policy"" OR t3.service_name = ""Upgrade a policy""","CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)"
"Find the names of customers who have used both the service ""Close a policy"" and the service ""New policy application"".","SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""Close a policy"" INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN first_notification_of_loss AS t2 ON t1.customer_id = t2.customer_id JOIN services AS t3 ON t2.service_id = t3.service_id WHERE t3.service_name = ""New policy application""","CREATE TABLE first_notification_of_loss (customer_id VARCHAR, service_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE services (service_id VARCHAR, service_name VARCHAR)"
"Find the IDs of customers whose name contains ""Diana"".","SELECT customer_id FROM customers WHERE customer_name LIKE ""%Diana%""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)"
What are the maximum and minimum settlement amount on record?,"SELECT MAX(settlement_amount), MIN(settlement_amount) FROM settlements",CREATE TABLE settlements (settlement_amount INTEGER)
List all the customers in increasing order of IDs.,"SELECT customer_id, customer_name FROM customers ORDER BY customer_id","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR)"
"Retrieve the open and close dates of all the policies associated with the customer whose name contains ""Diana""","SELECT t2.date_opened, t2.date_closed FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE ""%Diana%""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customers_policies (date_opened VARCHAR, date_closed VARCHAR, customer_id VARCHAR)"
How many kinds of enzymes are there?,SELECT COUNT(*) FROM enzyme,CREATE TABLE enzyme (Id VARCHAR)
List the name of enzymes in descending lexicographical order.,SELECT name FROM enzyme ORDER BY name DESC,CREATE TABLE enzyme (name VARCHAR)
List the names and the locations that the enzymes can make an effect.,"SELECT name, LOCATION FROM enzyme","CREATE TABLE enzyme (name VARCHAR, LOCATION VARCHAR)"
What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?,SELECT MAX(OMIM) FROM enzyme,CREATE TABLE enzyme (OMIM INTEGER)
"What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?","SELECT product, chromosome, porphyria FROM enzyme WHERE LOCATION = 'Cytosol'","CREATE TABLE enzyme (product VARCHAR, chromosome VARCHAR, porphyria VARCHAR, LOCATION VARCHAR)"
What are the names of enzymes who does not produce 'Heme'?,SELECT name FROM enzyme WHERE product <> 'Heme',"CREATE TABLE enzyme (name VARCHAR, product VARCHAR)"
What are the names and trade names of the medicines which has 'Yes' value in the FDA record?,"SELECT name, trade_name FROM medicine WHERE FDA_approved = 'Yes'","CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, FDA_approved VARCHAR)"
What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?,SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id = T3.id WHERE T3.name = 'Amisulpride' AND T2.interaction_type = 'inhibitor',"CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, medicine_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (name VARCHAR, id VARCHAR)"
What are the ids and names of the medicine that can interact with two or more enzymes?,"SELECT T1.id, T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR)"
"What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.","SELECT T1.id, T1.Name, T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC","CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR); CREATE TABLE medicine (id VARCHAR, Name VARCHAR, FDA_approved VARCHAR)"
What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?,"SELECT T1.id, T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T2.interaction_type = 'activitor' GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR); CREATE TABLE enzyme (id VARCHAR, name VARCHAR)"
What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?,SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id = T2.id JOIN enzyme AS T3 ON T1.enzyme_id = T3.id WHERE T3.name = 'ALA synthase' AND T2.name = 'Aripiprazole',"CREATE TABLE enzyme (id VARCHAR, name VARCHAR); CREATE TABLE medicine (id VARCHAR, name VARCHAR); CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR, medicine_id VARCHAR, enzyme_id VARCHAR)"
What is the most common interaction type between enzymes and medicine? And how many are there?,"SELECT interaction_type, COUNT(*) FROM medicine_enzyme_interaction GROUP BY interaction_type ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE medicine_enzyme_interaction (interaction_type VARCHAR)
How many medicines have the FDA approval status 'No' ?,SELECT COUNT(*) FROM medicine WHERE FDA_approved = 'No',CREATE TABLE medicine (FDA_approved VARCHAR)
How many enzymes do not have any interactions?,SELECT COUNT(*) FROM enzyme WHERE NOT id IN (SELECT enzyme_id FROM medicine_enzyme_interaction),"CREATE TABLE medicine_enzyme_interaction (id VARCHAR, enzyme_id VARCHAR); CREATE TABLE enzyme (id VARCHAR, enzyme_id VARCHAR)"
What is the id and trade name of the medicines can interact with at least 3 enzymes?,"SELECT T1.id, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 3","CREATE TABLE medicine (id VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)"
"What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?","SELECT DISTINCT T1.name, T1.location, T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id = T1.id WHERE T2.interaction_type = 'inhibitor'","CREATE TABLE enzyme (name VARCHAR, location VARCHAR, product VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (enzyme_id VARCHAR, interaction_type VARCHAR)"
List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.,"SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'inhibitor' INTERSECT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id WHERE interaction_type = 'activitor'","CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR)"
Show the medicine names and trade names that cannot interact with the enzyme with product 'Heme'.,"SELECT name, trade_name FROM medicine EXCEPT SELECT T1.name, T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id = T1.id JOIN enzyme AS T3 ON T3.id = T2.enzyme_id WHERE T3.product = 'Protoporphyrinogen IX'","CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR); CREATE TABLE medicine_enzyme_interaction (medicine_id VARCHAR, enzyme_id VARCHAR); CREATE TABLE medicine (name VARCHAR, trade_name VARCHAR, id VARCHAR); CREATE TABLE enzyme (id VARCHAR, product VARCHAR)"
How many distinct FDA approval statuses are there for the medicines?,SELECT COUNT(DISTINCT FDA_approved) FROM medicine,CREATE TABLE medicine (FDA_approved VARCHAR)
"Which enzyme names have the substring ""ALA""?","SELECT name FROM enzyme WHERE name LIKE ""%ALA%""",CREATE TABLE enzyme (name VARCHAR)
find the number of medicines offered by each trade.,"SELECT trade_name, COUNT(*) FROM medicine GROUP BY trade_name",CREATE TABLE medicine (trade_name VARCHAR)
List all schools and their nicknames in the order of founded year.,"SELECT school, nickname FROM university ORDER BY founded","CREATE TABLE university (school VARCHAR, nickname VARCHAR, founded VARCHAR)"
List all public schools and their locations.,"SELECT school, LOCATION FROM university WHERE affiliation = 'Public'","CREATE TABLE university (school VARCHAR, LOCATION VARCHAR, affiliation VARCHAR)"
When was the school with the largest enrollment founded?,SELECT founded FROM university ORDER BY enrollment DESC LIMIT 1,"CREATE TABLE university (founded VARCHAR, enrollment VARCHAR)"
Find the founded year of the newest non public school.,SELECT founded FROM university WHERE affiliation <> 'Public' ORDER BY founded DESC LIMIT 1,"CREATE TABLE university (founded VARCHAR, affiliation VARCHAR)"
How many schools are in the basketball match?,SELECT COUNT(DISTINCT school_id) FROM basketball_match,CREATE TABLE basketball_match (school_id VARCHAR)
What is the highest acc percent score in the competition?,SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1,CREATE TABLE basketball_match (acc_percent VARCHAR)
What is the primary conference of the school that has the lowest acc percent score in the competition?,SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t2.acc_percent LIMIT 1,"CREATE TABLE basketball_match (school_id VARCHAR, acc_percent VARCHAR); CREATE TABLE university (Primary_conference VARCHAR, school_id VARCHAR)"
What is the team name and acc regular season score of the school that was founded for the longest time?,"SELECT t2.team_name, t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id ORDER BY t1.founded LIMIT 1","CREATE TABLE university (school_id VARCHAR, founded VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, ACC_Regular_Season VARCHAR, school_id VARCHAR)"
Find the location and all games score of the school that has Clemson as its team name.,"SELECT t2.All_Games, t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE team_name = 'Clemson'","CREATE TABLE basketball_match (All_Games VARCHAR, school_id VARCHAR); CREATE TABLE university (location VARCHAR, school_id VARCHAR)"
What are the average enrollment size of the universities that are founded before 1850?,SELECT AVG(enrollment) FROM university WHERE founded < 1850,"CREATE TABLE university (enrollment INTEGER, founded INTEGER)"
Show the enrollment and primary_conference of the oldest college.,"SELECT enrollment, primary_conference FROM university ORDER BY founded LIMIT 1","CREATE TABLE university (enrollment VARCHAR, primary_conference VARCHAR, founded VARCHAR)"
What is the total and minimum enrollment of all schools?,"SELECT SUM(enrollment), MIN(enrollment) FROM university",CREATE TABLE university (enrollment INTEGER)
Find the total student enrollment for different affiliation type schools.,"SELECT SUM(enrollment), affiliation FROM university GROUP BY affiliation","CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)"
How many schools do not participate in the basketball match?,SELECT COUNT(*) FROM university WHERE NOT school_id IN (SELECT school_id FROM basketball_match),CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (school_id VARCHAR)
Find the schools that were either founded after 1850 or public.,SELECT school FROM university WHERE founded > 1850 OR affiliation = 'Public',"CREATE TABLE university (school VARCHAR, founded VARCHAR, affiliation VARCHAR)"
Find how many different affiliation types there are.,SELECT COUNT(DISTINCT affiliation) FROM university,CREATE TABLE university (affiliation VARCHAR)
Find how many school locations have the word 'NY'.,"SELECT COUNT(*) FROM university WHERE LOCATION LIKE ""%NY%""",CREATE TABLE university (LOCATION VARCHAR)
Find the team names of the universities whose enrollments are smaller than the average enrollment size.,SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id = t2.school_id WHERE enrollment < (SELECT AVG(enrollment) FROM university),"CREATE TABLE university (school_id VARCHAR); CREATE TABLE basketball_match (team_name VARCHAR, school_id VARCHAR); CREATE TABLE university (enrollment INTEGER)"
Find the number of universities that have over a 20000 enrollment size for each affiliation type.,"SELECT COUNT(*), affiliation FROM university WHERE enrollment > 20000 GROUP BY affiliation","CREATE TABLE university (affiliation VARCHAR, enrollment INTEGER)"
Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.,"SELECT SUM(Enrollment), affiliation FROM university WHERE founded > 1850 GROUP BY affiliation","CREATE TABLE university (affiliation VARCHAR, Enrollment INTEGER, founded INTEGER)"
What is the maximum enrollment across all schools?,SELECT MAX(Enrollment) FROM university,CREATE TABLE university (Enrollment INTEGER)
List all information regarding the basketball match.,SELECT * FROM basketball_match,CREATE TABLE basketball_match (Id VARCHAR)
"List names of all teams in the basketball competition, ordered by all home scores in descending order.",SELECT team_name FROM basketball_match ORDER BY All_Home DESC,"CREATE TABLE basketball_match (team_name VARCHAR, All_Home VARCHAR)"
the names of models that launched between 2002 and 2004.,SELECT Model_name FROM chip_model WHERE Launch_year BETWEEN 2002 AND 2004,"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year INTEGER)"
Which model has the least amount of RAM? List the model name and the amount of RAM.,"SELECT Model_name, RAM_MiB FROM chip_model ORDER BY RAM_MiB LIMIT 1","CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR)"
"What are the chip model and screen mode of the phone with hardware model name ""LG-P760""?","SELECT chip_model, screen_mode FROM phone WHERE Hardware_Model_name = ""LG-P760""","CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR)"
"How many phone hardware models are produced by the company named ""Nokia Corporation""?","SELECT COUNT(*) FROM phone WHERE Company_name = ""Nokia Corporation""",CREATE TABLE phone (Company_name VARCHAR)
"What is maximum and minimum RAM size of phone produced by company named ""Nokia Corporation""?","SELECT MAX(T1.RAM_MiB), MIN(T1.RAM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = ""Nokia Corporation""","CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (RAM_MiB INTEGER, Model_name VARCHAR)"
"What is the average ROM size of phones produced by the company named ""Nokia Corporation""?","SELECT AVG(T1.ROM_MiB) FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T2.Company_name = ""Nokia Corporation""","CREATE TABLE phone (chip_model VARCHAR, Company_name VARCHAR); CREATE TABLE chip_model (ROM_MiB INTEGER, Model_name VARCHAR)"
List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.,"SELECT T2.Hardware_Model_name, T2.Company_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 OR T1.RAM_MiB > 32","CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, chip_model VARCHAR)"
Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.,"SELECT Hardware_Model_name, Company_name FROM phone WHERE Accreditation_type LIKE 'Full'","CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, Accreditation_type VARCHAR)"
"Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is ""LG-P760"".","SELECT T1.Char_cells, T1.Pixels, T1.Hardware_colours FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T2.Hardware_Model_name = ""LG-P760""","CREATE TABLE phone (screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE screen_mode (Char_cells VARCHAR, Pixels VARCHAR, Hardware_colours VARCHAR, Graphics_mode VARCHAR)"
"List the hardware model name and company name for the phone whose screen mode type is ""Graphics.""","SELECT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = ""Graphics""","CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)"
Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.,"SELECT Company_name, COUNT(*) FROM phone GROUP BY Company_name ORDER BY COUNT(*) LIMIT 1",CREATE TABLE phone (Company_name VARCHAR)
List the name of the company that produced more than one phone model.,SELECT Company_name FROM phone GROUP BY Company_name HAVING COUNT(*) > 1,CREATE TABLE phone (Company_name VARCHAR)
"List the maximum, minimum and average number of used kb in screen mode.","SELECT MAX(used_kb), MIN(used_kb), AVG(used_kb) FROM screen_mode",CREATE TABLE screen_mode (used_kb INTEGER)
List the name of the phone model launched in year 2002 and with the highest RAM size.,SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model WHERE T1.Launch_year = 2002 ORDER BY T1.RAM_MiB DESC LIMIT 1,"CREATE TABLE chip_model (Model_name VARCHAR, Launch_year VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR)"
"What are the wifi and screen mode type of the hardware model named ""LG-P760""?","SELECT T1.WiFi, T3.Type FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T2.Hardware_Model_name = ""LG-P760""","CREATE TABLE phone (chip_model VARCHAR, screen_mode VARCHAR, Hardware_Model_name VARCHAR); CREATE TABLE chip_model (WiFi VARCHAR, Model_name VARCHAR); CREATE TABLE screen_mode (Type VARCHAR, Graphics_mode VARCHAR)"
"List the hardware model name for the phones that have screen mode type ""Text"" or RAM size greater than 32.","SELECT T2.Hardware_Model_name FROM chip_model AS T1 JOIN phone AS T2 ON T1.Model_name = T2.chip_model JOIN screen_mode AS T3 ON T2.screen_mode = T3.Graphics_mode WHERE T3.Type = ""Text"" OR T1.RAM_MiB > 32","CREATE TABLE chip_model (Model_name VARCHAR, RAM_MiB VARCHAR); CREATE TABLE phone (Hardware_Model_name VARCHAR, chip_model VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)"
"List the hardware model name for the phones that were produced by ""Nokia Corporation"" or whose screen mode type is ""Graphics.""","SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.Type = ""Graphics"" OR t2.Company_name = ""Nokia Corporation""","CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)"
"List the hardware model name for the phons that were produced by ""Nokia Corporation"" but whose screen mode type is not Text.","SELECT DISTINCT T2.Hardware_Model_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE t2.Company_name = ""Nokia Corporation"" AND T1.Type <> ""Text""","CREATE TABLE phone (Hardware_Model_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, Type VARCHAR)"
List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.,"SELECT DISTINCT T2.Hardware_Model_name, T2.Company_name FROM screen_mode AS T1 JOIN phone AS T2 ON T1.Graphics_mode = T2.screen_mode WHERE T1.used_kb BETWEEN 10 AND 15","CREATE TABLE phone (Hardware_Model_name VARCHAR, Company_name VARCHAR, screen_mode VARCHAR); CREATE TABLE screen_mode (Graphics_mode VARCHAR, used_kb INTEGER)"
Find the number of phones for each accreditation type.,"SELECT Accreditation_type, COUNT(*) FROM phone GROUP BY Accreditation_type",CREATE TABLE phone (Accreditation_type VARCHAR)
Find the accreditation level that more than 3 phones use.,SELECT Accreditation_level FROM phone GROUP BY Accreditation_level HAVING COUNT(*) > 3,CREATE TABLE phone (Accreditation_level VARCHAR)
Find the details for all chip models.,SELECT * FROM chip_model,CREATE TABLE chip_model (Id VARCHAR)
How many models do not have the wifi function?,SELECT COUNT(*) FROM chip_model WHERE wifi = 'No',CREATE TABLE chip_model (wifi VARCHAR)
List all the model names sorted by their launch year.,SELECT model_name FROM chip_model ORDER BY launch_year,"CREATE TABLE chip_model (model_name VARCHAR, launch_year VARCHAR)"
Find the average ram mib size of the chip models that are never used by any phone.,SELECT AVG(RAM_MiB) FROM chip_model WHERE NOT model_name IN (SELECT chip_model FROM phone),"CREATE TABLE chip_model (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR); CREATE TABLE phone (RAM_MiB INTEGER, model_name VARCHAR, chip_model VARCHAR)"
Find the names of the chip models that are not used by any phone with full accreditation type.,SELECT model_name FROM chip_model EXCEPT SELECT chip_model FROM phone WHERE Accreditation_type = 'Full',"CREATE TABLE chip_model (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR); CREATE TABLE phone (model_name VARCHAR, chip_model VARCHAR, Accreditation_type VARCHAR)"
Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.,SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Provisional' INTERSECT SELECT t1.pixels FROM screen_mode AS t1 JOIN phone AS t2 ON t1.Graphics_mode = t2.screen_mode WHERE t2.Accreditation_type = 'Full',"CREATE TABLE phone (screen_mode VARCHAR, Accreditation_type VARCHAR); CREATE TABLE screen_mode (pixels VARCHAR, Graphics_mode VARCHAR)"
How many countries are there in total?,SELECT COUNT(*) FROM country,CREATE TABLE country (Id VARCHAR)
Show the country name and capital of all countries.,"SELECT Country_name, Capital FROM country","CREATE TABLE country (Country_name VARCHAR, Capital VARCHAR)"
"Show all official native languages that contain the word ""English"".","SELECT Official_native_language FROM country WHERE Official_native_language LIKE ""%English%""",CREATE TABLE country (Official_native_language VARCHAR)
Show all distinct positions of matches.,SELECT DISTINCT POSITION FROM match_season,CREATE TABLE match_season (POSITION VARCHAR)
Show the players from college UCLA.,"SELECT Player FROM match_season WHERE College = ""UCLA""","CREATE TABLE match_season (Player VARCHAR, College VARCHAR)"
Show the distinct position of players from college UCLA or Duke.,"SELECT DISTINCT POSITION FROM match_season WHERE College = ""UCLA"" OR College = ""Duke""","CREATE TABLE match_season (POSITION VARCHAR, College VARCHAR)"
Show the draft pick numbers and draft classes of players whose positions are defenders.,"SELECT Draft_Pick_Number, Draft_Class FROM match_season WHERE POSITION = ""Defender""","CREATE TABLE match_season (Draft_Pick_Number VARCHAR, Draft_Class VARCHAR, POSITION VARCHAR)"
How many distinct teams are involved in match seasons?,SELECT COUNT(DISTINCT Team) FROM match_season,CREATE TABLE match_season (Team VARCHAR)
Show the players and the years played.,"SELECT Player, Years_Played FROM player","CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR)"
Show all team names.,SELECT Name FROM Team,CREATE TABLE Team (Name VARCHAR)
"Show the season, the player, and the name of the country that player belongs to.","SELECT T2.Season, T2.Player, T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country","CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)"
Which players are from Indonesia?,"SELECT T2.Player FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Country_name = ""Indonesia""","CREATE TABLE country (Country_id VARCHAR, Country_name VARCHAR); CREATE TABLE match_season (Player VARCHAR, Country VARCHAR)"
What are the distinct positions of the players from a country whose capital is Dublin?,"SELECT DISTINCT T2.Position FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T1.Capital = ""Dublin""","CREATE TABLE country (Country_id VARCHAR, Capital VARCHAR); CREATE TABLE match_season (Position VARCHAR, Country VARCHAR)"
What are the official languages of the countries of players from Maryland or Duke college?,"SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = ""Maryland"" OR T2.College = ""Duke""","CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, College VARCHAR)"
How many distinct official languages are there among countries of players whose positions are defenders.,"SELECT COUNT(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Defender""","CREATE TABLE country (Official_native_language VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)"
"Show the season, the player, and the name of the team that players belong to.","SELECT T1.Season, T1.Player, T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id","CREATE TABLE team (Name VARCHAR, Team_id VARCHAR); CREATE TABLE match_season (Season VARCHAR, Player VARCHAR, Team VARCHAR)"
"Show the positions of the players from the team with name ""Ryley Goldner"".","SELECT T1.Position FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Ryley Goldner""","CREATE TABLE match_season (Position VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)"
"How many distinct colleges are associated with players from the team with name ""Columbus Crew"".","SELECT COUNT(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Columbus Crew""","CREATE TABLE match_season (College VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)"
"Show the players and years played for players from team ""Columbus Crew"".","SELECT T1.Player, T1.Years_Played FROM player AS T1 JOIN team AS T2 ON T1.Team = T2.Team_id WHERE T2.Name = ""Columbus Crew""","CREATE TABLE player (Player VARCHAR, Years_Played VARCHAR, Team VARCHAR); CREATE TABLE team (Team_id VARCHAR, Name VARCHAR)"
Show the position of players and the corresponding number of players.,"SELECT POSITION, COUNT(*) FROM match_season GROUP BY POSITION",CREATE TABLE match_season (POSITION VARCHAR)
Show the country names and the corresponding number of players.,"SELECT Country_name, COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country GROUP BY T1.Country_name","CREATE TABLE match_season (Country VARCHAR); CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR)"
Return all players sorted by college in ascending alphabetical order.,SELECT player FROM match_season ORDER BY College,"CREATE TABLE match_season (player VARCHAR, College VARCHAR)"
Show the most common position of players in match seasons.,SELECT POSITION FROM match_season GROUP BY POSITION ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE match_season (POSITION VARCHAR)
Show the top 3 most common colleges of players in match seasons.,SELECT College FROM match_season GROUP BY College ORDER BY COUNT(*) DESC LIMIT 3,CREATE TABLE match_season (College VARCHAR)
Show the name of colleges that have at least two players.,SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2,CREATE TABLE match_season (College VARCHAR)
Show the name of colleges that have at least two players in descending alphabetical order.,SELECT College FROM match_season GROUP BY College HAVING COUNT(*) >= 2 ORDER BY College DESC,CREATE TABLE match_season (College VARCHAR)
What are the names of teams that do no have match season record?,SELECT Name FROM team WHERE NOT Team_id IN (SELECT Team FROM match_season),"CREATE TABLE match_season (Name VARCHAR, Team_id VARCHAR, Team VARCHAR); CREATE TABLE team (Name VARCHAR, Team_id VARCHAR, Team VARCHAR)"
What are the names of countries that have both players with position forward and players with position defender?,"SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Forward"" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = ""Defender""","CREATE TABLE country (Country_name VARCHAR, Country_id VARCHAR); CREATE TABLE match_season (Country VARCHAR, Position VARCHAR)"
Which college have both players with position midfielder and players with position defender?,"SELECT College FROM match_season WHERE POSITION = ""Midfielder"" INTERSECT SELECT College FROM match_season WHERE POSITION = ""Defender""","CREATE TABLE match_season (College VARCHAR, POSITION VARCHAR)"
How many climbers are there?,SELECT COUNT(*) FROM climber,CREATE TABLE climber (Id VARCHAR)
List the names of climbers in descending order of points.,SELECT Name FROM climber ORDER BY Points DESC,"CREATE TABLE climber (Name VARCHAR, Points VARCHAR)"
List the names of climbers whose country is not Switzerland.,"SELECT Name FROM climber WHERE Country <> ""Switzerland""","CREATE TABLE climber (Name VARCHAR, Country VARCHAR)"
What is the maximum point for climbers whose country is United Kingdom?,"SELECT MAX(Points) FROM climber WHERE Country = ""United Kingdom""","CREATE TABLE climber (Points INTEGER, Country VARCHAR)"
How many distinct countries are the climbers from?,SELECT COUNT(DISTINCT Country) FROM climber,CREATE TABLE climber (Country VARCHAR)
What are the names of mountains in ascending alphabetical order?,SELECT Name FROM mountain ORDER BY Name,CREATE TABLE mountain (Name VARCHAR)
What are the countries of mountains with height bigger than 5000?,SELECT Country FROM mountain WHERE Height > 5000,"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)"
What is the name of the highest mountain?,SELECT Name FROM mountain ORDER BY Height DESC LIMIT 1,"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR)"
List the distinct ranges of the mountains with the top 3 prominence.,SELECT DISTINCT Range FROM mountain ORDER BY Prominence DESC LIMIT 3,"CREATE TABLE mountain (Range VARCHAR, Prominence VARCHAR)"
Show names of climbers and the names of mountains they climb.,"SELECT T1.Name, T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)"
Show the names of climbers and the heights of mountains they climb.,"SELECT T1.Name, T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID","CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)"
Show the height of the mountain climbed by the climber with the maximum points.,SELECT T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Points DESC LIMIT 1,"CREATE TABLE climber (Mountain_ID VARCHAR, Points VARCHAR); CREATE TABLE mountain (Height VARCHAR, Mountain_ID VARCHAR)"
"Show the distinct names of mountains climbed by climbers from country ""West Germany"".","SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T1.Country = ""West Germany""","CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Mountain_ID VARCHAR, Country VARCHAR)"
Show the times used by climbers to climb mountains in Country Uganda.,"SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID WHERE T2.Country = ""Uganda""","CREATE TABLE mountain (Mountain_ID VARCHAR, Country VARCHAR); CREATE TABLE climber (Time VARCHAR, Mountain_ID VARCHAR)"
Please show the countries and the number of climbers from each country.,"SELECT Country, COUNT(*) FROM climber GROUP BY Country",CREATE TABLE climber (Country VARCHAR)
List the countries that have more than one mountain.,SELECT Country FROM mountain GROUP BY Country HAVING COUNT(*) > 1,CREATE TABLE mountain (Country VARCHAR)
List the names of mountains that do not have any climber.,SELECT Name FROM mountain WHERE NOT Mountain_ID IN (SELECT Mountain_ID FROM climber),"CREATE TABLE mountain (Name VARCHAR, Mountain_ID VARCHAR); CREATE TABLE climber (Name VARCHAR, Mountain_ID VARCHAR)"
Show the countries that have mountains with height more than 5600 stories and mountains with height less than 5200.,SELECT Country FROM mountain WHERE Height > 5600 INTERSECT SELECT Country FROM mountain WHERE Height < 5200,"CREATE TABLE mountain (Country VARCHAR, Height INTEGER)"
Show the range that has the most number of mountains.,SELECT Range FROM mountain GROUP BY Range ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE mountain (Range VARCHAR)
Show the names of mountains with height more than 5000 or prominence more than 1000.,SELECT Name FROM mountain WHERE Height > 5000 OR Prominence > 1000,"CREATE TABLE mountain (Name VARCHAR, Height VARCHAR, Prominence VARCHAR)"
How many body builders are there?,SELECT COUNT(*) FROM body_builder,CREATE TABLE body_builder (Id VARCHAR)
List the total scores of body builders in ascending order.,SELECT Total FROM body_builder ORDER BY Total,CREATE TABLE body_builder (Total VARCHAR)
List the snatch score and clean jerk score of body builders in ascending order of snatch score.,"SELECT Snatch, Clean_Jerk FROM body_builder ORDER BY Snatch","CREATE TABLE body_builder (Snatch VARCHAR, Clean_Jerk VARCHAR)"
What is the average snatch score of body builders?,SELECT AVG(Snatch) FROM body_builder,CREATE TABLE body_builder (Snatch INTEGER)
What are the clean and jerk score of the body builder with the highest total score?,SELECT Clean_Jerk FROM body_builder ORDER BY Total DESC LIMIT 1,"CREATE TABLE body_builder (Clean_Jerk VARCHAR, Total VARCHAR)"
What are the birthdays of people in ascending order of height?,SELECT Birth_Date FROM People ORDER BY Height,"CREATE TABLE People (Birth_Date VARCHAR, Height VARCHAR)"
What are the names of body builders?,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID,"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What are the names of body builders whose total score is higher than 300?,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total > 300,"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)"
What is the name of the body builder with the greatest body weight?,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,"CREATE TABLE body_builder (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)"
What are the birth date and birth place of the body builder with the highest total points?,"SELECT T2.Birth_Date, T2.Birth_Place FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC LIMIT 1","CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, Birth_Place VARCHAR, People_ID VARCHAR)"
What are the heights of body builders with total score smaller than 315?,SELECT T2.Height FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Total < 315,"CREATE TABLE people (Height VARCHAR, People_ID VARCHAR); CREATE TABLE body_builder (People_ID VARCHAR, Total INTEGER)"
What is the average total score of body builders with height bigger than 200?,SELECT AVG(T1.Total) FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 200,"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE body_builder (Total INTEGER, People_ID VARCHAR)"
What are the names of body builders in descending order of total scores?,SELECT T2.Name FROM body_builder AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Total DESC,"CREATE TABLE body_builder (People_ID VARCHAR, Total VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
List each birth place along with the number of people from there.,"SELECT Birth_Place, COUNT(*) FROM people GROUP BY Birth_Place",CREATE TABLE people (Birth_Place VARCHAR)
What is the most common birth place of people?,SELECT Birth_Place FROM people GROUP BY Birth_Place ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE people (Birth_Place VARCHAR)
What are the birth places that are shared by at least two people?,SELECT Birth_Place FROM people GROUP BY Birth_Place HAVING COUNT(*) >= 2,CREATE TABLE people (Birth_Place VARCHAR)
List the height and weight of people in descending order of height.,"SELECT Height, Weight FROM people ORDER BY Height DESC","CREATE TABLE people (Height VARCHAR, Weight VARCHAR)"
Show all information about each body builder.,SELECT * FROM body_builder,CREATE TABLE body_builder (Id VARCHAR)
List the names and origins of people who are not body builders.,"SELECT Name, birth_place FROM people EXCEPT SELECT T1.Name, T1.birth_place FROM people AS T1 JOIN body_builder AS T2 ON T1.people_id = T2.people_id","CREATE TABLE people (Name VARCHAR, birth_place VARCHAR, people_id VARCHAR); CREATE TABLE body_builder (people_id VARCHAR); CREATE TABLE people (Name VARCHAR, birth_place VARCHAR)"
How many distinct birth places are there?,SELECT COUNT(DISTINCT Birth_Place) FROM people,CREATE TABLE people (Birth_Place VARCHAR)
How many persons are not body builders?,SELECT COUNT(*) FROM people WHERE NOT people_id IN (SELECT People_ID FROM body_builder),"CREATE TABLE body_builder (people_id VARCHAR, People_ID VARCHAR); CREATE TABLE people (people_id VARCHAR, People_ID VARCHAR)"
List the weight of the body builders who have snatch score higher than 140 or have the height greater than 200.,SELECT T2.weight FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T1.snatch > 140 OR T2.height > 200,"CREATE TABLE people (weight VARCHAR, people_id VARCHAR, height VARCHAR); CREATE TABLE body_builder (people_id VARCHAR, snatch VARCHAR)"
"What are the total scores of the body builders whose birthday contains the string ""January"" ?","SELECT T1.total FROM body_builder AS T1 JOIN people AS T2 ON T1.people_id = T2.people_id WHERE T2.Birth_Date LIKE ""%January%""","CREATE TABLE people (people_id VARCHAR, Birth_Date VARCHAR); CREATE TABLE body_builder (total VARCHAR, people_id VARCHAR)"
What is the minimum snatch score?,SELECT MIN(snatch) FROM body_builder,CREATE TABLE body_builder (snatch INTEGER)
How many elections are there?,SELECT COUNT(*) FROM election,CREATE TABLE election (Id VARCHAR)
List the votes of elections in descending order.,SELECT Votes FROM election ORDER BY Votes DESC,CREATE TABLE election (Votes VARCHAR)
List the dates and vote percents of elections.,"SELECT Date, Vote_Percent FROM election","CREATE TABLE election (Date VARCHAR, Vote_Percent VARCHAR)"
What are the minimum and maximum vote percents of elections?,"SELECT MIN(Vote_Percent), MAX(Vote_Percent) FROM election",CREATE TABLE election (Vote_Percent INTEGER)
What are the names and parties of representatives?,"SELECT Name, Party FROM representative","CREATE TABLE representative (Name VARCHAR, Party VARCHAR)"
"What are the names of representatives whose party is not ""Republican""?","SELECT Name FROM Representative WHERE Party <> ""Republican""","CREATE TABLE Representative (Name VARCHAR, Party VARCHAR)"
What are the life spans of representatives from New York state or Indiana state?,"SELECT Lifespan FROM representative WHERE State = ""New York"" OR State = ""Indiana""","CREATE TABLE representative (Lifespan VARCHAR, State VARCHAR)"
What are the names of representatives and the dates of elections they participated in.,"SELECT T2.Name, T1.Date FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID","CREATE TABLE election (Date VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)"
What are the names of representatives with more than 10000 votes in election?,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE Votes > 10000,"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)"
What are the names of representatives in descending order of votes?,SELECT T2.Name FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes DESC,"CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)"
What is the party of the representative that has the smallest number of votes.,SELECT T2.Party FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY votes LIMIT 1,"CREATE TABLE representative (Party VARCHAR, Representative_ID VARCHAR); CREATE TABLE election (Representative_ID VARCHAR)"
What are the lifespans of representatives in descending order of vote percent?,SELECT T2.Lifespan FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID ORDER BY Vote_Percent DESC,"CREATE TABLE election (Representative_ID VARCHAR); CREATE TABLE representative (Lifespan VARCHAR, Representative_ID VARCHAR)"
"What is the average number of votes of representatives from party ""Republican""?","SELECT AVG(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = ""Republican""","CREATE TABLE election (Votes INTEGER, Representative_ID VARCHAR); CREATE TABLE representative (Representative_ID VARCHAR, Party VARCHAR)"
What are the different parties of representative? Show the party name and the number of representatives in each party.,"SELECT Party, COUNT(*) FROM representative GROUP BY Party",CREATE TABLE representative (Party VARCHAR)
What is the party that has the largest number of representatives?,"SELECT Party, COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE representative (Party VARCHAR)
What parties have at least three representatives?,SELECT Party FROM representative GROUP BY Party HAVING COUNT(*) >= 3,CREATE TABLE representative (Party VARCHAR)
What states have at least two representatives?,SELECT State FROM representative GROUP BY State HAVING COUNT(*) >= 2,CREATE TABLE representative (State VARCHAR)
List the names of representatives that have not participated in elections listed here.,SELECT Name FROM representative WHERE NOT Representative_ID IN (SELECT Representative_ID FROM election),"CREATE TABLE election (Name VARCHAR, Representative_ID VARCHAR); CREATE TABLE representative (Name VARCHAR, Representative_ID VARCHAR)"
Show the parties that have both representatives in New York state and representatives in Pennsylvania state.,"SELECT Party FROM representative WHERE State = ""New York"" INTERSECT SELECT Party FROM representative WHERE State = ""Pennsylvania""","CREATE TABLE representative (Party VARCHAR, State VARCHAR)"
How many distinct parties are there for representatives?,SELECT COUNT(DISTINCT Party) FROM representative,CREATE TABLE representative (Party VARCHAR)
How many apartment bookings are there in total?,SELECT COUNT(*) FROM Apartment_Bookings,CREATE TABLE Apartment_Bookings (Id VARCHAR)
Show the start dates and end dates of all the apartment bookings.,"SELECT booking_start_date, booking_end_date FROM Apartment_Bookings","CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, booking_end_date VARCHAR)"
Show all distinct building descriptions.,SELECT DISTINCT building_description FROM Apartment_Buildings,CREATE TABLE Apartment_Buildings (building_description VARCHAR)
"Show the short names of the buildings managed by ""Emma"".","SELECT building_short_name FROM Apartment_Buildings WHERE building_manager = ""Emma""","CREATE TABLE Apartment_Buildings (building_short_name VARCHAR, building_manager VARCHAR)"
"Show the addresses and phones of all the buildings managed by ""Brenden"".","SELECT building_address, building_phone FROM Apartment_Buildings WHERE building_manager = ""Brenden""","CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_phone VARCHAR, building_manager VARCHAR)"
"What are the building full names that contain the word ""court""?","SELECT building_full_name FROM Apartment_Buildings WHERE building_full_name LIKE ""%court%""",CREATE TABLE Apartment_Buildings (building_full_name VARCHAR)
What is the minimum and maximum number of bathrooms of all the apartments?,"SELECT MIN(bathroom_count), MAX(bathroom_count) FROM Apartments",CREATE TABLE Apartments (bathroom_count INTEGER)
What is the average number of bedrooms of all apartments?,SELECT AVG(bedroom_count) FROM Apartments,CREATE TABLE Apartments (bedroom_count INTEGER)
Return the apartment number and the number of rooms for each apartment.,"SELECT apt_number, room_count FROM Apartments","CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)"
"What is the average number of rooms of apartments with type code ""Studio""?","SELECT AVG(room_count) FROM Apartments WHERE apt_type_code = ""Studio""","CREATE TABLE Apartments (room_count INTEGER, apt_type_code VARCHAR)"
"Return the apartment numbers of the apartments with type code ""Flat"".","SELECT apt_number FROM Apartments WHERE apt_type_code = ""Flat""","CREATE TABLE Apartments (apt_number VARCHAR, apt_type_code VARCHAR)"
Return the first names and last names of all guests,"SELECT guest_first_name, guest_last_name FROM Guests","CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR)"
"Return the date of birth for all the guests with gender code ""Male"".","SELECT date_of_birth FROM Guests WHERE gender_code = ""Male""","CREATE TABLE Guests (date_of_birth VARCHAR, gender_code VARCHAR)"
"Show the apartment numbers, start dates, and end dates of all the apartment bookings.","SELECT T2.apt_number, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id","CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)"
"What are the booking start and end dates of the apartments with type code ""Duplex""?","SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_type_code = ""Duplex""","CREATE TABLE Apartments (apt_id VARCHAR, apt_type_code VARCHAR); CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR)"
What are the booking start and end dates of the apartments with more than 2 bedrooms?,"SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 2","CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)"
"What is the booking status code of the apartment with apartment number ""Suite 634""?","SELECT T1.booking_status_code FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.apt_number = ""Suite 634""","CREATE TABLE Apartments (apt_id VARCHAR, apt_number VARCHAR); CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR, apt_id VARCHAR)"
"Show the distinct apartment numbers of the apartments that have bookings with status code ""Confirmed"".","SELECT DISTINCT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = ""Confirmed""","CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)"
"Show the average room count of the apartments that have booking status code ""Provisional"".","SELECT AVG(room_count) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = ""Provisional""","CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)"
"Show the guest first names, start dates, and end dates of all the apartment bookings.","SELECT T2.guest_first_name, T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id","CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_id VARCHAR)"
"Show the start dates and end dates of all the apartment bookings made by guests with gender code ""Female"".","SELECT T1.booking_start_date, T1.booking_start_date FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = ""Female""","CREATE TABLE Apartment_Bookings (booking_start_date VARCHAR, guest_id VARCHAR); CREATE TABLE Guests (guest_id VARCHAR, gender_code VARCHAR)"
"Show the first names and last names of all the guests that have apartment bookings with status code ""Confirmed"".","SELECT T2.guest_first_name, T2.guest_last_name FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T1.booking_status_code = ""Confirmed""","CREATE TABLE Apartment_Bookings (guest_id VARCHAR, booking_status_code VARCHAR); CREATE TABLE Guests (guest_first_name VARCHAR, guest_last_name VARCHAR, guest_id VARCHAR)"
Show the facility codes of apartments with more than 4 bedrooms.,SELECT T1.facility_code FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4,"CREATE TABLE Apartment_Facilities (facility_code VARCHAR, apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR, bedroom_count INTEGER)"
"Show the total number of rooms of all apartments with facility code ""Gym"".","SELECT SUM(T2.room_count) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.facility_code = ""Gym""","CREATE TABLE Apartments (room_count INTEGER, apt_id VARCHAR); CREATE TABLE Apartment_Facilities (apt_id VARCHAR, facility_code VARCHAR)"
"Show the total number of rooms of the apartments in the building with short name ""Columbus Square"".","SELECT SUM(T2.room_count) FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_short_name = ""Columbus Square""","CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_short_name VARCHAR); CREATE TABLE Apartments (room_count INTEGER, building_id VARCHAR)"
Show the addresses of the buildings that have apartments with more than 2 bathrooms.,SELECT T1.building_address FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T2.bathroom_count > 2,"CREATE TABLE Apartment_Buildings (building_address VARCHAR, building_id VARCHAR); CREATE TABLE Apartments (building_id VARCHAR, bathroom_count INTEGER)"
"Show the apartment type codes and apartment numbers in the buildings managed by ""Kyle"".","SELECT T2.apt_type_code, T2.apt_number FROM Apartment_Buildings AS T1 JOIN Apartments AS T2 ON T1.building_id = T2.building_id WHERE T1.building_manager = ""Kyle""","CREATE TABLE Apartment_Buildings (building_id VARCHAR, building_manager VARCHAR); CREATE TABLE Apartments (apt_type_code VARCHAR, apt_number VARCHAR, building_id VARCHAR)"
Show the booking status code and the corresponding number of bookings.,"SELECT booking_status_code, COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",CREATE TABLE Apartment_Bookings (booking_status_code VARCHAR)
Return all the apartment numbers sorted by the room count in ascending order.,SELECT apt_number FROM Apartments ORDER BY room_count,"CREATE TABLE Apartments (apt_number VARCHAR, room_count VARCHAR)"
Return the apartment number with the largest number of bedrooms.,SELECT apt_number FROM Apartments ORDER BY bedroom_count DESC LIMIT 1,"CREATE TABLE Apartments (apt_number VARCHAR, bedroom_count VARCHAR)"
Show the apartment type codes and the corresponding number of apartments sorted by the number of apartments in ascending order.,"SELECT apt_type_code, COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*)",CREATE TABLE Apartments (apt_type_code VARCHAR)
Show the top 3 apartment type codes sorted by the average number of rooms in descending order.,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY AVG(room_count) DESC LIMIT 3,"CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)"
"Show the apartment type code that has the largest number of total rooms, together with the number of bathrooms and number of bedrooms.","SELECT apt_type_code, bathroom_count, bedroom_count FROM Apartments GROUP BY apt_type_code ORDER BY SUM(room_count) DESC LIMIT 1","CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count VARCHAR, bedroom_count VARCHAR, room_count INTEGER)"
Show the most common apartment type code.,SELECT apt_type_code FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Apartments (apt_type_code VARCHAR)
Show the most common apartment type code among apartments with more than 1 bathroom.,SELECT apt_type_code FROM Apartments WHERE bathroom_count > 1 GROUP BY apt_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Apartments (apt_type_code VARCHAR, bathroom_count INTEGER)"
"Show each apartment type code, and the maximum and minimum number of rooms for each type.","SELECT apt_type_code, MAX(room_count), MIN(room_count) FROM Apartments GROUP BY apt_type_code","CREATE TABLE Apartments (apt_type_code VARCHAR, room_count INTEGER)"
Show each gender code and the corresponding count of guests sorted by the count in descending order.,"SELECT gender_code, COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC",CREATE TABLE Guests (gender_code VARCHAR)
How many apartments do not have any facility?,SELECT COUNT(*) FROM Apartments WHERE NOT apt_id IN (SELECT apt_id FROM Apartment_Facilities),CREATE TABLE Apartment_Facilities (apt_id VARCHAR); CREATE TABLE Apartments (apt_id VARCHAR)
"Show the apartment numbers of apartments with bookings that have status code both ""Provisional"" and ""Confirmed""","SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = ""Confirmed"" INTERSECT SELECT T2.apt_number FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T1.booking_status_code = ""Provisional""","CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR); CREATE TABLE Apartment_Bookings (apt_id VARCHAR, booking_status_code VARCHAR)"
Show the apartment numbers of apartments with unit status availability of both 0 and 1.,SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 0 INTERSECT SELECT T1.apt_number FROM Apartments AS T1 JOIN View_Unit_Status AS T2 ON T1.apt_id = T2.apt_id WHERE T2.available_yn = 1,"CREATE TABLE View_Unit_Status (apt_id VARCHAR, available_yn VARCHAR); CREATE TABLE Apartments (apt_number VARCHAR, apt_id VARCHAR)"
How many games are held after season 2007?,SELECT COUNT(*) FROM game WHERE season > 2007,CREATE TABLE game (season INTEGER)
List the dates of games by the home team name in descending order.,SELECT Date FROM game ORDER BY home_team DESC,"CREATE TABLE game (Date VARCHAR, home_team VARCHAR)"
"List the season, home team, away team of all the games.","SELECT season, home_team, away_team FROM game","CREATE TABLE game (season VARCHAR, home_team VARCHAR, away_team VARCHAR)"
"What are the maximum, minimum and average home games each stadium held?","SELECT MAX(home_games), MIN(home_games), AVG(home_games) FROM stadium",CREATE TABLE stadium (home_games INTEGER)
What is the average attendance of stadiums with capacity percentage higher than 100%?,SELECT average_attendance FROM stadium WHERE capacity_percentage > 100,"CREATE TABLE stadium (average_attendance VARCHAR, capacity_percentage INTEGER)"
"What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?","SELECT player, number_of_matches, SOURCE FROM injury_accident WHERE injury <> 'Knee problem'","CREATE TABLE injury_accident (player VARCHAR, number_of_matches VARCHAR, SOURCE VARCHAR, injury VARCHAR)"
What is the season of the game which causes the player 'Walter Samuel' to get injured?,SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.player = 'Walter Samuel',"CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR); CREATE TABLE game (season VARCHAR, id VARCHAR)"
"What are the ids, scores, and dates of the games which caused at least two injury accidents?","SELECT T1.id, T1.score, T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","CREATE TABLE game (id VARCHAR, score VARCHAR, date VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)"
What are the id and name of the stadium where the most injury accidents happened?,"SELECT T1.id, T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE stadium (id VARCHAR, name VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR)"
In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?,"SELECT T1.season, T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'","CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, injury VARCHAR); CREATE TABLE game (season VARCHAR, stadium_id VARCHAR, id VARCHAR)"
How many different kinds of information sources are there for injury accidents?,SELECT COUNT(DISTINCT SOURCE) FROM injury_accident,CREATE TABLE injury_accident (SOURCE VARCHAR)
How many games are free of injury accidents?,SELECT COUNT(*) FROM game WHERE NOT id IN (SELECT game_id FROM injury_accident),"CREATE TABLE injury_accident (id VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, game_id VARCHAR)"
How many distinct kinds of injuries happened after season 2010?,SELECT COUNT(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id = T2.id WHERE T2.season > 2010,"CREATE TABLE injury_accident (injury VARCHAR, game_id VARCHAR); CREATE TABLE game (id VARCHAR, season INTEGER)"
List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.,SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.player = 'Thiago Motta',"CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR, player VARCHAR)"
"Show the name, average attendance, total attendance for stadiums where no accidents happened.","SELECT name, average_attendance, total_attendance FROM stadium EXCEPT SELECT T2.name, T2.average_attendance, T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id","CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR, id VARCHAR); CREATE TABLE stadium (name VARCHAR, average_attendance VARCHAR, total_attendance VARCHAR); CREATE TABLE game (stadium_id VARCHAR, id VARCHAR); CREATE TABLE injury_accident (game_id VARCHAR)"
"Which stadium name contains the substring ""Bank""?","SELECT name FROM stadium WHERE name LIKE ""%Bank%""",CREATE TABLE stadium (name VARCHAR)
How many games has each stadium held?,"SELECT T1.id, COUNT(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T1.id",CREATE TABLE stadium (id VARCHAR); CREATE TABLE game (stadium_id VARCHAR)
"For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.","SELECT T1.date, T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.season DESC","CREATE TABLE game (date VARCHAR, id VARCHAR, season VARCHAR); CREATE TABLE injury_accident (player VARCHAR, game_id VARCHAR)"
List all country and league names.,"SELECT T1.name, T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id","CREATE TABLE League (name VARCHAR, country_id VARCHAR); CREATE TABLE Country (name VARCHAR, id VARCHAR)"
How many leagues are there in England?,"SELECT COUNT(*) FROM Country AS T1 JOIN League AS T2 ON T1.id = T2.country_id WHERE T1.name = ""England""","CREATE TABLE League (country_id VARCHAR); CREATE TABLE Country (id VARCHAR, name VARCHAR)"
What is the average weight of all players?,SELECT AVG(weight) FROM Player,CREATE TABLE Player (weight INTEGER)
What is the maximum and minimum height of all players?,"SELECT MAX(weight), MIN(weight) FROM Player",CREATE TABLE Player (weight INTEGER)
List all player names who have an overall rating higher than the average.,SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.overall_rating > (SELECT AVG(overall_rating) FROM Player_Attributes),"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating INTEGER)"
What are the names of players who have the best dribbling?,SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling = (SELECT MAX(overall_rating) FROM Player_Attributes),"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, dribbling VARCHAR); CREATE TABLE Player_Attributes (overall_rating INTEGER)"
List the names of all players who have a crossing score higher than 90 and prefer their right foot.,"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing > 90 AND T2.preferred_foot = ""right""","CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, crossing VARCHAR, preferred_foot VARCHAR)"
List the names of all left-footed players who have overall rating between 85 and 90.,"SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot = ""left"" AND T2.overall_rating >= 85 AND T2.overall_rating <= 90","CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR, overall_rating VARCHAR, preferred_foot VARCHAR)"
What is the average rating for right-footed players and left-footed players?,"SELECT preferred_foot, AVG(overall_rating) FROM Player_Attributes GROUP BY preferred_foot","CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)"
"Of all players with an overall rating greater than 80, how many are right-footed and left-footed?","SELECT preferred_foot, COUNT(*) FROM Player_Attributes WHERE overall_rating > 80 GROUP BY preferred_foot","CREATE TABLE Player_Attributes (preferred_foot VARCHAR, overall_rating INTEGER)"
List all of the player ids with a height of at least 180cm and an overall rating higher than 85.,SELECT player_api_id FROM Player WHERE height >= 180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating > 85,"CREATE TABLE Player_Attributes (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER); CREATE TABLE Player (player_api_id VARCHAR, height VARCHAR, overall_rating INTEGER)"
List all of the ids for left-footed players with a height between 180cm and 190cm.,"SELECT player_api_id FROM Player WHERE height >= 180 AND height <= 190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot = ""left""","CREATE TABLE Player_Attributes (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR); CREATE TABLE Player (player_api_id VARCHAR, preferred_foot VARCHAR, height VARCHAR)"
Who are the top 3 players in terms of overall rating?,SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY overall_rating DESC LIMIT 3,"CREATE TABLE Player (player_name VARCHAR, player_api_id VARCHAR); CREATE TABLE Player_Attributes (player_api_id VARCHAR)"
List the names and birthdays of the top five players in terms of potential.,"SELECT DISTINCT T1.player_name, T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5","CREATE TABLE Player_Attributes (player_api_id VARCHAR); CREATE TABLE Player (player_name VARCHAR, birthday VARCHAR, player_api_id VARCHAR)"
How many performances are there?,SELECT COUNT(*) FROM performance,CREATE TABLE performance (Id VARCHAR)
List the hosts of performances in ascending order of attendance.,SELECT HOST FROM performance ORDER BY Attendance,"CREATE TABLE performance (HOST VARCHAR, Attendance VARCHAR)"
What are the dates and locations of performances?,"SELECT Date, LOCATION FROM performance","CREATE TABLE performance (Date VARCHAR, LOCATION VARCHAR)"
"Show the attendances of the performances at location ""TD Garden"" or ""Bell Centre""","SELECT Attendance FROM performance WHERE LOCATION = ""TD Garden"" OR LOCATION = ""Bell Centre""","CREATE TABLE performance (Attendance VARCHAR, LOCATION VARCHAR)"
What is the average number of attendees for performances?,SELECT AVG(Attendance) FROM performance,CREATE TABLE performance (Attendance INTEGER)
What is the date of the performance with the highest number of attendees?,SELECT Date FROM performance ORDER BY Attendance DESC LIMIT 1,"CREATE TABLE performance (Date VARCHAR, Attendance VARCHAR)"
Show different locations and the number of performances at each location.,"SELECT LOCATION, COUNT(*) FROM performance GROUP BY LOCATION",CREATE TABLE performance (LOCATION VARCHAR)
Show the most common location of performances.,SELECT LOCATION FROM performance GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE performance (LOCATION VARCHAR)
Show the locations that have at least two performances.,SELECT LOCATION FROM performance GROUP BY LOCATION HAVING COUNT(*) >= 2,CREATE TABLE performance (LOCATION VARCHAR)
Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.,SELECT LOCATION FROM performance WHERE Attendance > 2000 INTERSECT SELECT LOCATION FROM performance WHERE Attendance < 1000,"CREATE TABLE performance (LOCATION VARCHAR, Attendance INTEGER)"
Show the names of members and the location of the performances they attended.,"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID","CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)"
Show the names of members and the location of performances they attended in ascending alphabetical order of their names.,"SELECT T2.Name, T3.Location FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T2.Name","CREATE TABLE performance (Location VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)"
"Show the dates of performances with attending members whose roles are ""Violin"".","SELECT T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID WHERE T2.Role = ""Violin""","CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR); CREATE TABLE member (Member_ID VARCHAR, Role VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)"
Show the names of members and the dates of performances they attended in descending order of attendance of the performances.,"SELECT T2.Name, T3.Date FROM member_attendance AS T1 JOIN member AS T2 ON T1.Member_ID = T2.Member_ID JOIN performance AS T3 ON T1.Performance_ID = T3.Performance_ID ORDER BY T3.Attendance DESC","CREATE TABLE performance (Date VARCHAR, Performance_ID VARCHAR, Attendance VARCHAR); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Member_ID VARCHAR, Performance_ID VARCHAR)"
List the names of members who did not attend any performance.,SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM member_attendance),"CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE member_attendance (Name VARCHAR, Member_ID VARCHAR)"
Find the buildings which have rooms with capacity more than 50.,SELECT DISTINCT building FROM classroom WHERE capacity > 50,"CREATE TABLE classroom (building VARCHAR, capacity INTEGER)"
Count the number of rooms that are not in the Lamberton building.,SELECT COUNT(*) FROM classroom WHERE building <> 'Lamberton',CREATE TABLE classroom (building VARCHAR)
What is the name and building of the departments whose budget is more than the average budget?,"SELECT dept_name, building FROM department WHERE budget > (SELECT AVG(budget) FROM department)","CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget INTEGER)"
Find the room number of the rooms which can sit 50 to 100 students and their buildings.,"SELECT building, room_number FROM classroom WHERE capacity BETWEEN 50 AND 100","CREATE TABLE classroom (building VARCHAR, room_number VARCHAR, capacity INTEGER)"
Find the name and building of the department with the highest budget.,"SELECT dept_name, building FROM department ORDER BY budget DESC LIMIT 1","CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)"
What is the name of the student who has the highest total credits in the History department.,SELECT name FROM student WHERE dept_name = 'History' ORDER BY tot_cred DESC LIMIT 1,"CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)"
How many rooms does the Lamberton building have?,SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton',CREATE TABLE classroom (building VARCHAR)
How many students have advisors?,SELECT COUNT(DISTINCT s_id) FROM advisor,CREATE TABLE advisor (s_id VARCHAR)
How many departments offer courses?,SELECT COUNT(DISTINCT dept_name) FROM course,CREATE TABLE course (dept_name VARCHAR)
How many different courses offered by Physics department?,SELECT COUNT(DISTINCT course_id) FROM course WHERE dept_name = 'Physics',"CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)"
Find the title of courses that have two prerequisites?,SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) = 2,"CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)"
"Find the title, credit, and department name of courses that have more than one prerequisites?","SELECT T1.title, T1.credits, T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING COUNT(*) > 1","CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, dept_name VARCHAR, course_id VARCHAR)"
How many courses that do not have prerequisite?,SELECT COUNT(*) FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq),CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)
Find the name of the courses that do not have any prerequisite?,SELECT title FROM course WHERE NOT course_id IN (SELECT course_id FROM prereq),"CREATE TABLE prereq (title VARCHAR, course_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR)"
How many different instructors have taught some course?,SELECT COUNT(DISTINCT id) FROM teaches,CREATE TABLE teaches (id VARCHAR)
Find the total budgets of the Marketing or Finance department.,SELECT SUM(budget) FROM department WHERE dept_name = 'Marketing' OR dept_name = 'Finance',"CREATE TABLE department (budget INTEGER, dept_name VARCHAR)"
Find the department name of the instructor whose name contains 'Soisalon'.,SELECT dept_name FROM instructor WHERE name LIKE '%Soisalon%',"CREATE TABLE instructor (dept_name VARCHAR, name VARCHAR)"
How many rooms whose capacity is less than 50 does the Lamberton building have?,SELECT COUNT(*) FROM classroom WHERE building = 'Lamberton' AND capacity < 50,"CREATE TABLE classroom (building VARCHAR, capacity VARCHAR)"
Find the name and budget of departments whose budgets are more than the average budget.,"SELECT dept_name, budget FROM department WHERE budget > (SELECT AVG(budget) FROM department)","CREATE TABLE department (dept_name VARCHAR, budget INTEGER)"
what is the name of the instructor who is in Statistics department and earns the lowest salary?,SELECT name FROM instructor WHERE dept_name = 'Statistics' ORDER BY salary LIMIT 1,"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)"
Find the title of course that is provided by both Statistics and Psychology departments.,SELECT title FROM course WHERE dept_name = 'Statistics' INTERSECT SELECT title FROM course WHERE dept_name = 'Psychology',"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)"
Find the title of course that is provided by Statistics but not Psychology departments.,SELECT title FROM course WHERE dept_name = 'Statistics' EXCEPT SELECT title FROM course WHERE dept_name = 'Psychology',"CREATE TABLE course (title VARCHAR, dept_name VARCHAR)"
Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.,SELECT id FROM teaches WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT id FROM teaches WHERE semester = 'Spring' AND YEAR = 2010,"CREATE TABLE teaches (id VARCHAR, semester VARCHAR, YEAR VARCHAR)"
Find the name of students who took any class in the years of 2009 and 2010.,SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE YEAR = 2009 OR YEAR = 2010,"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (id VARCHAR)"
Find the names of the top 3 departments that provide the largest amount of courses?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 3,CREATE TABLE course (dept_name VARCHAR)
Find the name of the department that offers the highest total credits?,SELECT dept_name FROM course GROUP BY dept_name ORDER BY SUM(credits) DESC LIMIT 1,"CREATE TABLE course (dept_name VARCHAR, credits INTEGER)"
List the names of all courses ordered by their titles and credits.,"SELECT title FROM course ORDER BY title, credits","CREATE TABLE course (title VARCHAR, credits VARCHAR)"
Which department has the lowest budget?,SELECT dept_name FROM department ORDER BY budget LIMIT 1,"CREATE TABLE department (dept_name VARCHAR, budget VARCHAR)"
List the names and buildings of all departments sorted by the budget from large to small.,"SELECT dept_name, building FROM department ORDER BY budget DESC","CREATE TABLE department (dept_name VARCHAR, building VARCHAR, budget VARCHAR)"
Who is the instructor with the highest salary?,SELECT name FROM instructor ORDER BY salary DESC LIMIT 1,"CREATE TABLE instructor (name VARCHAR, salary VARCHAR)"
List the information of all instructors ordered by their salary in ascending order.,SELECT * FROM instructor ORDER BY salary,CREATE TABLE instructor (salary VARCHAR)
Find the name of the students and their department names sorted by their total credits in ascending order.,"SELECT name, dept_name FROM student ORDER BY tot_cred","CREATE TABLE student (name VARCHAR, dept_name VARCHAR, tot_cred VARCHAR)"
list in alphabetic order all course names and their instructors' names in year 2008.,"SELECT T1.title, T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 ORDER BY T1.title","CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE teaches (course_id VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
Find the name of instructors who are advising more than one student.,SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id = T2.i_id GROUP BY T2.i_id HAVING COUNT(*) > 1,"CREATE TABLE advisor (i_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
Find the name of the students who have more than one advisor?,SELECT T1.name FROM student AS T1 JOIN advisor AS T2 ON T1.id = T2.s_id GROUP BY T2.s_id HAVING COUNT(*) > 1,"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE advisor (s_id VARCHAR)"
Find the number of rooms with more than 50 capacity for each building.,"SELECT COUNT(*), building FROM classroom WHERE capacity > 50 GROUP BY building","CREATE TABLE classroom (building VARCHAR, capacity INTEGER)"
Find the maximum and average capacity among rooms in each building.,"SELECT MAX(capacity), AVG(capacity), building FROM classroom GROUP BY building","CREATE TABLE classroom (building VARCHAR, capacity INTEGER)"
Find the title of the course that is offered by more than one department.,SELECT title FROM course GROUP BY title HAVING COUNT(*) > 1,CREATE TABLE course (title VARCHAR)
Find the total credits of courses provided by different department.,"SELECT SUM(credits), dept_name FROM course GROUP BY dept_name","CREATE TABLE course (dept_name VARCHAR, credits INTEGER)"
Find the minimum salary for the departments whose average salary is above the average payment of all instructors.,"SELECT MIN(salary), dept_name FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)","CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)"
Find the number of courses provided in each semester and year.,"SELECT COUNT(*), semester, YEAR FROM SECTION GROUP BY semester, YEAR","CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)"
Find the year which offers the largest number of courses.,SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE SECTION (YEAR VARCHAR)
Find the year and semester when offers the largest number of courses.,"SELECT semester, YEAR FROM SECTION GROUP BY semester, YEAR ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE SECTION (semester VARCHAR, YEAR VARCHAR)"
Find the name of department has the highest amount of students?,SELECT dept_name FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE student (dept_name VARCHAR)
Find the total number of students in each department.,"SELECT COUNT(*), dept_name FROM student GROUP BY dept_name",CREATE TABLE student (dept_name VARCHAR)
Find the semester and year which has the least number of student taking any class.,"SELECT semester, YEAR FROM takes GROUP BY semester, YEAR ORDER BY COUNT(*) LIMIT 1","CREATE TABLE takes (semester VARCHAR, YEAR VARCHAR)"
What is the id of the instructor who advises of all students from History department?,SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id = T2.id WHERE T2.dept_name = 'History',"CREATE TABLE advisor (s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)"
Find the name and salary of the instructors who are advisors of any student from History department?,"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'History'","CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)"
Find the id of the courses that do not have any prerequisite?,SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq,CREATE TABLE prereq (course_id VARCHAR); CREATE TABLE course (course_id VARCHAR)
What is the title of the prerequisite class of International Finance course?,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'International Finance'),"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)"
Find the title of course whose prerequisite is course Differential Geometry.,SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id = T2.course_id WHERE T2.title = 'Differential Geometry'),"CREATE TABLE prereq (course_id VARCHAR, prereq_id VARCHAR); CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)"
Find the names of students who have taken any course in the fall semester of year 2003.,SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester = 'Fall' AND YEAR = 2003),"CREATE TABLE student (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR); CREATE TABLE takes (name VARCHAR, id VARCHAR, semester VARCHAR, YEAR VARCHAR)"
What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?,SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE building = 'Chandler' AND semester = 'Fall' AND YEAR = 2010,"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE SECTION (course_id VARCHAR)"
Find the name of the instructors who taught C Programming course before.,SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id = T2.id JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T3.title = 'C Programming',"CREATE TABLE teaches (id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
Find the name and salary of instructors who are advisors of the students from the Math department.,"SELECT T2.name, T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math'","CREATE TABLE instructor (name VARCHAR, salary VARCHAR, id VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR)"
"Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id WHERE T3.dept_name = 'Math' ORDER BY T3.tot_cred,"CREATE TABLE student (id VARCHAR, dept_name VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
What is the course title of the prerequisite of course Mobile Computing?,SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.title = 'Mobile Computing'),"CREATE TABLE course (title VARCHAR, course_id VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR)"
Find the name of instructor who is the advisor of the student who has the highest number of total credits.,SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id = T2.id JOIN student AS T3 ON T1.s_id = T3.id ORDER BY T3.tot_cred DESC LIMIT 1,"CREATE TABLE student (id VARCHAR, tot_cred VARCHAR); CREATE TABLE advisor (i_id VARCHAR, s_id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
Find the name of instructors who didn't teach any courses?,SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches),"CREATE TABLE teaches (name VARCHAR, id VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR)"
Find the id of instructors who didn't teach any courses?,SELECT id FROM instructor EXCEPT SELECT id FROM teaches,CREATE TABLE teaches (id VARCHAR); CREATE TABLE instructor (id VARCHAR)
Find the names of instructors who didn't each any courses in any Spring semester.,SELECT name FROM instructor WHERE NOT id IN (SELECT id FROM teaches WHERE semester = 'Spring'),"CREATE TABLE teaches (name VARCHAR, id VARCHAR, semester VARCHAR); CREATE TABLE instructor (name VARCHAR, id VARCHAR, semester VARCHAR)"
Find the name of the department which has the highest average salary of professors.,SELECT dept_name FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC LIMIT 1,"CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)"
Find the number and averaged salary of all instructors who are in the department with the highest budget.,"SELECT AVG(T1.salary), COUNT(*) FROM instructor AS T1 JOIN department AS T2 ON T1.dept_name = T2.dept_name ORDER BY T2.budget DESC LIMIT 1","CREATE TABLE department (dept_name VARCHAR, budget VARCHAR); CREATE TABLE instructor (salary INTEGER, dept_name VARCHAR)"
What is the title and credits of the course that is taught in the largest classroom (with the highest capacity)?,"SELECT T3.title, T3.credits FROM classroom AS T1 JOIN SECTION AS T2 ON T1.building = T2.building AND T1.room_number = T2.room_number JOIN course AS T3 ON T2.course_id = T3.course_id WHERE T1.capacity = (SELECT MAX(capacity) FROM classroom)","CREATE TABLE SECTION (course_id VARCHAR, building VARCHAR, room_number VARCHAR); CREATE TABLE course (title VARCHAR, credits VARCHAR, course_id VARCHAR); CREATE TABLE classroom (capacity INTEGER, building VARCHAR, room_number VARCHAR); CREATE TABLE classroom (capacity INTEGER)"
Find the name of students who didn't take any course from Biology department.,SELECT name FROM student WHERE NOT id IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id = T2.course_id WHERE T2.dept_name = 'Biology'),"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)"
Find the total number of students and total number of instructors for each department.,"SELECT COUNT(DISTINCT T2.id), COUNT(DISTINCT T3.id), T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name GROUP BY T3.dept_name","CREATE TABLE department (dept_name VARCHAR); CREATE TABLE student (id VARCHAR, dept_name VARCHAR); CREATE TABLE instructor (dept_name VARCHAR, id VARCHAR)"
Find the name of students who have taken the prerequisite course of the course with title International Finance.,SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id = T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id = T4.course_id WHERE T3.title = 'International Finance'),"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, title VARCHAR); CREATE TABLE prereq (prereq_id VARCHAR, course_id VARCHAR); CREATE TABLE takes (id VARCHAR, course_id VARCHAR)"
Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.,"SELECT name, salary FROM instructor WHERE salary < (SELECT AVG(salary) FROM instructor WHERE dept_name = 'Physics')","CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)"
Find the name of students who took some course offered by Statistics department.,SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id = T2.course_id JOIN student AS T3 ON T2.id = T3.id WHERE T1.dept_name = 'Statistics',"CREATE TABLE student (name VARCHAR, id VARCHAR); CREATE TABLE takes (course_id VARCHAR, id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR)"
"Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.","SELECT T2.building, T2.room_number, T2.semester, T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' ORDER BY T1.title","CREATE TABLE SECTION (building VARCHAR, room_number VARCHAR, semester VARCHAR, year VARCHAR, course_id VARCHAR); CREATE TABLE course (course_id VARCHAR, dept_name VARCHAR, title VARCHAR)"
Find the names of all instructors in computer science department,SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.',"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR)"
Find the names of all instructors in Comp. Sci. department with salary > 80000.,SELECT name FROM instructor WHERE dept_name = 'Comp. Sci.' AND salary > 80000,"CREATE TABLE instructor (name VARCHAR, dept_name VARCHAR, salary VARCHAR)"
Find the names of all instructors who have taught some course and the course_id.,"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID",CREATE TABLE instructor (ID VARCHAR); CREATE TABLE teaches (ID VARCHAR)
Find the names of all instructors in the Art department who have taught some course and the course_id.,"SELECT name, course_id FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T1.dept_name = 'Art'","CREATE TABLE instructor (ID VARCHAR, dept_name VARCHAR); CREATE TABLE teaches (ID VARCHAR)"
Find the names of all instructors whose name includes the substring “dar”.,SELECT name FROM instructor WHERE name LIKE '%dar%',CREATE TABLE instructor (name VARCHAR)
List in alphabetic order the names of all distinct instructors.,SELECT DISTINCT name FROM instructor ORDER BY name,CREATE TABLE instructor (name VARCHAR)
Find courses that ran in Fall 2009 or in Spring 2010.,SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 UNION SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010,"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)"
Find courses that ran in Fall 2009 and in Spring 2010.,SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 INTERSECT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010,"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)"
Find courses that ran in Fall 2009 but not in Spring 2010.,SELECT course_id FROM SECTION WHERE semester = 'Fall' AND YEAR = 2009 EXCEPT SELECT course_id FROM SECTION WHERE semester = 'Spring' AND YEAR = 2010,"CREATE TABLE SECTION (course_id VARCHAR, semester VARCHAR, YEAR VARCHAR)"
Find the salaries of all distinct instructors that are less than the largest salary.,SELECT DISTINCT salary FROM instructor WHERE salary < (SELECT MAX(salary) FROM instructor),CREATE TABLE instructor (salary INTEGER)
Find the total number of instructors who teach a course in the Spring 2010 semester.,SELECT COUNT(DISTINCT ID) FROM teaches WHERE semester = 'Spring' AND YEAR = 2010,"CREATE TABLE teaches (ID VARCHAR, semester VARCHAR, YEAR VARCHAR)"
Find the names and average salaries of all departments whose average salary is greater than 42000.,"SELECT dept_name, AVG(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > 42000","CREATE TABLE instructor (dept_name VARCHAR, salary INTEGER)"
Find names of instructors with salary greater than that of some (at least one) instructor in the Biology department.,SELECT name FROM instructor WHERE salary > (SELECT MIN(salary) FROM instructor WHERE dept_name = 'Biology'),"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)"
Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.,SELECT name FROM instructor WHERE salary > (SELECT MAX(salary) FROM instructor WHERE dept_name = 'Biology'),"CREATE TABLE instructor (name VARCHAR, salary INTEGER, dept_name VARCHAR)"
How many debates are there?,SELECT COUNT(*) FROM debate,CREATE TABLE debate (Id VARCHAR)
List the venues of debates in ascending order of the number of audience.,SELECT Venue FROM debate ORDER BY Num_of_Audience,"CREATE TABLE debate (Venue VARCHAR, Num_of_Audience VARCHAR)"
What are the date and venue of each debate?,"SELECT Date, Venue FROM debate","CREATE TABLE debate (Date VARCHAR, Venue VARCHAR)"
List the dates of debates with number of audience bigger than 150,SELECT Date FROM debate WHERE Num_of_Audience > 150,"CREATE TABLE debate (Date VARCHAR, Num_of_Audience INTEGER)"
Show the names of people aged either 35 or 36.,SELECT Name FROM people WHERE Age = 35 OR Age = 36,"CREATE TABLE people (Name VARCHAR, Age VARCHAR)"
What is the party of the youngest people?,SELECT Party FROM people ORDER BY Age LIMIT 1,"CREATE TABLE people (Party VARCHAR, Age VARCHAR)"
Show different parties of people along with the number of people in each party.,"SELECT Party, COUNT(*) FROM people GROUP BY Party",CREATE TABLE people (Party VARCHAR)
Show the party that has the most people.,SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE people (Party VARCHAR)
Show the distinct venues of debates,SELECT DISTINCT Venue FROM debate,CREATE TABLE debate (Venue VARCHAR)
"Show the names of people, and dates and venues of debates they are on the affirmative side.","SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID","CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)"
"Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.","SELECT T3.Name, T2.Date, T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Negative = T3.People_ID ORDER BY T3.Name","CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Date VARCHAR, Venue VARCHAR, Debate_ID VARCHAR); CREATE TABLE debate_people (Debate_ID VARCHAR, Negative VARCHAR)"
Show the names of people that are on affirmative side of debates with number of audience bigger than 200.,SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID = T2.Debate_ID JOIN people AS T3 ON T1.Affirmative = T3.People_ID WHERE T2.Num_of_Audience > 200,"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate (Debate_ID VARCHAR, Num_of_Audience INTEGER); CREATE TABLE debate_people (Debate_ID VARCHAR, Affirmative VARCHAR)"
Show the names of people and the number of times they have been on the affirmative side of debates.,"SELECT T2.Name, COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative = T2.People_ID GROUP BY T2.Name","CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE debate_people (Affirmative VARCHAR)"
Show the names of people who have been on the negative side of debates at least twice.,SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative = T2.People_ID GROUP BY T2.Name HAVING COUNT(*) >= 2,"CREATE TABLE debate_people (Negative VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
List the names of people that have not been on the affirmative side of debates.,SELECT Name FROM people WHERE NOT People_id IN (SELECT Affirmative FROM debate_people),"CREATE TABLE debate_people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR); CREATE TABLE people (Name VARCHAR, People_id VARCHAR, Affirmative VARCHAR)"
List the names of all the customers in alphabetical order.,SELECT customer_details FROM customers ORDER BY customer_details,CREATE TABLE customers (customer_details VARCHAR)
"Find all the policy type codes associated with the customer ""Dayana Robel""","SELECT policy_type_code FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t2.customer_details = ""Dayana Robel""","CREATE TABLE customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)"
Which type of policy is most frequently used? Give me the policy type code.,SELECT policy_type_code FROM policies GROUP BY policy_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE policies (policy_type_code VARCHAR)
Find all the policy types that are used by more than 2 customers.,SELECT policy_type_code FROM policies GROUP BY policy_type_code HAVING COUNT(*) > 2,CREATE TABLE policies (policy_type_code VARCHAR)
Find the total and average amount paid in claim headers.,"SELECT SUM(amount_piad), AVG(amount_piad) FROM claim_headers",CREATE TABLE claim_headers (amount_piad INTEGER)
Find the total amount claimed in the most recently created document.,SELECT SUM(t1.amount_claimed) FROM claim_headers AS t1 JOIN claims_documents AS t2 ON t1.claim_header_id = t2.claim_id WHERE t2.created_date = (SELECT created_date FROM claims_documents ORDER BY created_date LIMIT 1),"CREATE TABLE claim_headers (amount_claimed INTEGER, claim_header_id VARCHAR); CREATE TABLE claims_documents (claim_id VARCHAR, created_date VARCHAR); CREATE TABLE claims_documents (created_date VARCHAR)"
What is the name of the customer who has made the largest amount of claim in a single claim?,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_claimed = (SELECT MAX(amount_claimed) FROM claim_headers),"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (amount_claimed INTEGER); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_claimed INTEGER)"
What is the name of the customer who has made the minimum amount of payment in one claim?,SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id = t2.policy_id JOIN customers AS t3 ON t2.customer_id = t3.customer_id WHERE t1.amount_piad = (SELECT MIN(amount_piad) FROM claim_headers),"CREATE TABLE claim_headers (amount_piad INTEGER); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (policy_id VARCHAR, customer_id VARCHAR); CREATE TABLE claim_headers (policy_id VARCHAR, amount_piad INTEGER)"
Find the names of customers who have no policies associated.,SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id,"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_details VARCHAR); CREATE TABLE policies (customer_id VARCHAR)"
How many claim processing stages are there in total?,SELECT COUNT(*) FROM claims_processing_stages,CREATE TABLE claims_processing_stages (Id VARCHAR)
What is the name of the claim processing stage that most of the claims are on?,SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id = t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE claims_processing (claim_stage_id VARCHAR); CREATE TABLE claims_processing_stages (claim_status_name VARCHAR, claim_stage_id VARCHAR)"
"Find the names of customers whose name contains ""Diana"".","SELECT customer_details FROM customers WHERE customer_details LIKE ""%Diana%""",CREATE TABLE customers (customer_details VARCHAR)
Find the names of the customers who have an deputy policy.,"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = ""Deputy""","CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)"
Find the names of customers who either have an deputy policy or uniformed policy.,"SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.policy_type_code = ""Deputy"" OR t1.policy_type_code = ""Uniform""","CREATE TABLE policies (customer_id VARCHAR, policy_type_code VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)"
Find the names of all the customers and staff members.,SELECT customer_details FROM customers UNION SELECT staff_details FROM staff,"CREATE TABLE staff (customer_details VARCHAR, staff_details VARCHAR); CREATE TABLE customers (customer_details VARCHAR, staff_details VARCHAR)"
Find the number of records of each policy type and its type code.,"SELECT policy_type_code, COUNT(*) FROM policies GROUP BY policy_type_code",CREATE TABLE policies (policy_type_code VARCHAR)
Find the name of the customer that has been involved in the most policies.,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id GROUP BY t2.customer_details ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (customer_id VARCHAR)"
"What is the description of the claim status ""Open""?","SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name = ""Open""","CREATE TABLE claims_processing_stages (claim_status_description VARCHAR, claim_status_name VARCHAR)"
How many distinct claim outcome codes are there?,SELECT COUNT(DISTINCT claim_outcome_code) FROM claims_processing,CREATE TABLE claims_processing (claim_outcome_code VARCHAR)
Which customer is associated with the latest policy?,SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id = t2.customer_id WHERE t1.start_date = (SELECT MAX(start_date) FROM policies),"CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE policies (start_date INTEGER); CREATE TABLE policies (customer_id VARCHAR, start_date INTEGER)"
"Show the id, the date of account opened, the account name, and other account detail for all accounts.","SELECT account_id, date_account_opened, account_name, other_account_details FROM Accounts","CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR)"
"Show the id, the account name, and other account details for all accounts by the customer with first name 'Meaghan'.","SELECT T1.account_id, T1.date_account_opened, T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = 'Meaghan'","CREATE TABLE Accounts (account_id VARCHAR, date_account_opened VARCHAR, account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR)"
Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.,"SELECT T1.account_name, T1.other_account_details FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.customer_first_name = ""Meaghan"" AND T2.customer_last_name = ""Keeling""","CREATE TABLE Customers (customer_id VARCHAR, customer_first_name VARCHAR, customer_last_name VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, other_account_details VARCHAR, customer_id VARCHAR)"
Show the first name and last name for the customer with account name 900.,"SELECT T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.account_name = ""900""","CREATE TABLE Accounts (customer_id VARCHAR, account_name VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
"Show the unique first names, last names, and phone numbers for all customers with any account.","SELECT DISTINCT T1.customer_first_name, T1.customer_last_name, T1.phone_number FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)"
Show customer ids who don't have an account.,SELECT customer_id FROM Customers EXCEPT SELECT customer_id FROM Accounts,CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)
How many accounts does each customer have? List the number and customer id.,"SELECT COUNT(*), customer_id FROM Accounts GROUP BY customer_id",CREATE TABLE Accounts (customer_id VARCHAR)
"What is the customer id, first and last name with most number of accounts.","SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
"Show id, first name and last name for all customers and the number of accounts.","SELECT T1.customer_id, T2.customer_first_name, T2.customer_last_name, COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","CREATE TABLE Accounts (customer_id VARCHAR); CREATE TABLE Customers (customer_first_name VARCHAR, customer_last_name VARCHAR, customer_id VARCHAR)"
Show first name and id for all customers with at least 2 accounts.,"SELECT T2.customer_first_name, T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2","CREATE TABLE Customers (customer_first_name VARCHAR, customer_id VARCHAR); CREATE TABLE Accounts (customer_id VARCHAR)"
Show the number of customers for each gender.,"SELECT gender, COUNT(*) FROM Customers GROUP BY gender",CREATE TABLE Customers (gender VARCHAR)
How many transactions do we have?,SELECT COUNT(*) FROM Financial_transactions,CREATE TABLE Financial_transactions (Id VARCHAR)
How many transaction does each account have? Show the number and account id.,"SELECT COUNT(*), account_id FROM Financial_transactions",CREATE TABLE Financial_transactions (account_id VARCHAR)
How many transaction does account with name 337 have?,"SELECT COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id WHERE T2.account_name = ""337""","CREATE TABLE Accounts (account_id VARCHAR, account_name VARCHAR); CREATE TABLE Financial_transactions (account_id VARCHAR)"
"What is the average, minimum, maximum, and total transaction amount?","SELECT AVG(transaction_amount), MIN(transaction_amount), MAX(transaction_amount), SUM(transaction_amount) FROM Financial_transactions",CREATE TABLE Financial_transactions (transaction_amount INTEGER)
Show ids for all transactions whose amounts are greater than the average.,SELECT transaction_id FROM Financial_transactions WHERE transaction_amount > (SELECT AVG(transaction_amount) FROM Financial_transactions),"CREATE TABLE Financial_transactions (transaction_id VARCHAR, transaction_amount INTEGER)"
Show the transaction types and the total amount of transactions.,"SELECT transaction_type, SUM(transaction_amount) FROM Financial_transactions GROUP BY transaction_type","CREATE TABLE Financial_transactions (transaction_type VARCHAR, transaction_amount INTEGER)"
"Show the account name, id and the number of transactions for each account.","SELECT T2.account_name, T1.account_id, COUNT(*) FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id","CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)"
Show the account id with most number of transactions.,SELECT account_id FROM Financial_transactions GROUP BY account_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Financial_transactions (account_id VARCHAR)
Show the account id and name with at least 4 transactions.,"SELECT T1.account_id, T2.account_name FROM Financial_transactions AS T1 JOIN Accounts AS T2 ON T1.account_id = T2.account_id GROUP BY T1.account_id HAVING COUNT(*) >= 4","CREATE TABLE Financial_transactions (account_id VARCHAR); CREATE TABLE Accounts (account_name VARCHAR, account_id VARCHAR)"
Show all product sizes.,SELECT DISTINCT product_size FROM Products,CREATE TABLE Products (product_size VARCHAR)
Show all product colors.,SELECT DISTINCT product_color FROM Products,CREATE TABLE Products (product_color VARCHAR)
Show the invoice number and the number of transactions for each invoice.,"SELECT invoice_number, COUNT(*) FROM Financial_transactions GROUP BY invoice_number",CREATE TABLE Financial_transactions (invoice_number VARCHAR)
What is the invoice number and invoice date for the invoice with most number of transactions?,"SELECT T2.invoice_number, T2.invoice_date FROM Financial_transactions AS T1 JOIN Invoices AS T2 ON T1.invoice_number = T2.invoice_number GROUP BY T1.invoice_number ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Invoices (invoice_number VARCHAR, invoice_date VARCHAR); CREATE TABLE Financial_transactions (invoice_number VARCHAR)"
How many invoices do we have?,SELECT COUNT(*) FROM Invoices,CREATE TABLE Invoices (Id VARCHAR)
Show invoice dates and order id and details for all invoices.,"SELECT T1.invoice_date, T1.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id","CREATE TABLE Invoices (invoice_date VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_details VARCHAR, order_id VARCHAR)"
Show the order ids and the number of invoices for each order.,"SELECT order_id, COUNT(*) FROM Invoices GROUP BY order_id",CREATE TABLE Invoices (order_id VARCHAR)
What is the order id and order details for the order more than two invoices.,"SELECT T2.order_id, T2.order_details FROM Invoices AS T1 JOIN Orders AS T2 ON T1.order_id = T2.order_id GROUP BY T2.order_id HAVING COUNT(*) > 2","CREATE TABLE Orders (order_id VARCHAR, order_details VARCHAR); CREATE TABLE Invoices (order_id VARCHAR)"
"What is the customer last name, id and phone number with most number of orders?","SELECT T2.customer_last_name, T1.customer_id, T2.phone_number FROM Orders AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Orders (customer_id VARCHAR); CREATE TABLE Customers (customer_last_name VARCHAR, phone_number VARCHAR, customer_id VARCHAR)"
Show all product names without an order.,SELECT product_name FROM Products EXCEPT SELECT T1.product_name FROM Products AS T1 JOIN Order_items AS T2 ON T1.product_id = T2.product_id,"CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR); CREATE TABLE Products (product_name VARCHAR)"
Show all product names and the total quantity ordered for each product name.,"SELECT T2.product_name, SUM(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name","CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE Order_items (product_quantity INTEGER, product_id VARCHAR)"
Show the order ids and the number of items in each order.,"SELECT order_id, COUNT(*) FROM Order_items GROUP BY order_id",CREATE TABLE Order_items (order_id VARCHAR)
Show the product ids and the number of unique orders containing each product.,"SELECT product_id, COUNT(DISTINCT order_id) FROM Order_items GROUP BY product_id","CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR)"
Show all product names and the number of customers having an order on each product.,"SELECT T2.product_name, COUNT(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name","CREATE TABLE Order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE Orders (order_id VARCHAR); CREATE TABLE Products (product_name VARCHAR, product_id VARCHAR)"
Show order ids and the number of products in each order.,"SELECT order_id, COUNT(DISTINCT product_id) FROM Order_items GROUP BY order_id","CREATE TABLE Order_items (order_id VARCHAR, product_id VARCHAR)"
Show order ids and the total quantity in each order.,"SELECT order_id, SUM(product_quantity) FROM Order_items GROUP BY order_id","CREATE TABLE Order_items (order_id VARCHAR, product_quantity INTEGER)"
How many products were not included in any order?,SELECT COUNT(*) FROM products WHERE NOT product_id IN (SELECT product_id FROM Order_items),CREATE TABLE products (product_id VARCHAR); CREATE TABLE Order_items (product_id VARCHAR)
How many churches opened before 1850 are there?,SELECT COUNT(*) FROM Church WHERE Open_Date < 1850,CREATE TABLE Church (Open_Date INTEGER)
"Show the name, open date, and organizer for all churches.","SELECT name, open_date, organized_by FROM Church","CREATE TABLE Church (name VARCHAR, open_date VARCHAR, organized_by VARCHAR)"
List all church names in descending order of opening date.,SELECT name FROM church ORDER BY open_date DESC,"CREATE TABLE church (name VARCHAR, open_date VARCHAR)"
Show the opening year in whcih at least two churches opened.,SELECT open_date FROM church GROUP BY open_date HAVING COUNT(*) >= 2,CREATE TABLE church (open_date VARCHAR)
Show the organizer and name for churches that opened between 1830 and 1840.,"SELECT organized_by, name FROM church WHERE open_date BETWEEN 1830 AND 1840","CREATE TABLE church (organized_by VARCHAR, name VARCHAR, open_date INTEGER)"
Show all opening years and the number of churches that opened in that year.,"SELECT open_date, COUNT(*) FROM church GROUP BY open_date",CREATE TABLE church (open_date VARCHAR)
Show the name and opening year for three churches that opened most recently.,"SELECT name, open_date FROM church ORDER BY open_date DESC LIMIT 3","CREATE TABLE church (name VARCHAR, open_date VARCHAR)"
How many female people are older than 30 in our record?,SELECT COUNT(*) FROM people WHERE is_male = 'F' AND age > 30,"CREATE TABLE people (is_male VARCHAR, age VARCHAR)"
Show the country where people older than 30 and younger than 25 are from.,SELECT country FROM people WHERE age < 25 INTERSECT SELECT country FROM people WHERE age > 30,"CREATE TABLE people (country VARCHAR, age INTEGER)"
"Show the minimum, maximum, and average age for all people.","SELECT MIN(age), MAX(age), AVG(age) FROM people",CREATE TABLE people (age INTEGER)
Show the name and country for all people whose age is smaller than the average.,"SELECT name, country FROM people WHERE age < (SELECT AVG(age) FROM people)","CREATE TABLE people (name VARCHAR, country VARCHAR, age INTEGER)"
Show the pair of male and female names in all weddings after year 2014,"SELECT T2.name, T3.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id WHERE T1.year > 2014","CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, year INTEGER); CREATE TABLE people (name VARCHAR, people_id VARCHAR)"
Show the name and age for all male people who don't have a wedding.,"SELECT name, age FROM people WHERE is_male = 'T' AND NOT people_id IN (SELECT male_id FROM wedding)","CREATE TABLE wedding (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR); CREATE TABLE people (name VARCHAR, age VARCHAR, is_male VARCHAR, people_id VARCHAR, male_id VARCHAR)"
Show all church names except for those that had a wedding in year 2015.,SELECT name FROM church EXCEPT SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id WHERE T2.year = 2015,"CREATE TABLE church (name VARCHAR); CREATE TABLE wedding (church_id VARCHAR, year VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)"
Show all church names that have hosted least two weddings.,SELECT T1.name FROM church AS T1 JOIN wedding AS T2 ON T1.church_id = T2.church_id GROUP BY T1.church_id HAVING COUNT(*) >= 2,"CREATE TABLE wedding (church_id VARCHAR); CREATE TABLE church (name VARCHAR, church_id VARCHAR)"
Show the names for all females from Canada having a wedding in year 2016.,SELECT T2.name FROM wedding AS T1 JOIN people AS T2 ON T1.female_id = T2.people_id WHERE T1.year = 2016 AND T2.is_male = 'F' AND T2.country = 'Canada',"CREATE TABLE people (name VARCHAR, people_id VARCHAR, country VARCHAR, is_male VARCHAR); CREATE TABLE wedding (female_id VARCHAR, year VARCHAR)"
How many weddings are there in year 2016?,SELECT COUNT(*) FROM wedding WHERE YEAR = 2016,CREATE TABLE wedding (YEAR VARCHAR)
Show the church names for the weddings of all people older than 30.,SELECT T4.name FROM wedding AS T1 JOIN people AS T2 ON T1.male_id = T2.people_id JOIN people AS T3 ON T1.female_id = T3.people_id JOIN church AS T4 ON T4.church_id = T1.church_id WHERE T2.age > 30 OR T3.age > 30,"CREATE TABLE church (name VARCHAR, church_id VARCHAR); CREATE TABLE people (people_id VARCHAR, age VARCHAR); CREATE TABLE wedding (male_id VARCHAR, female_id VARCHAR, church_id VARCHAR)"
Show all countries and the number of people from each country.,"SELECT country, COUNT(*) FROM people GROUP BY country",CREATE TABLE people (country VARCHAR)
How many churches have a wedding in year 2016?,SELECT COUNT(DISTINCT church_id) FROM wedding WHERE YEAR = 2016,"CREATE TABLE wedding (church_id VARCHAR, YEAR VARCHAR)"
How many artists do we have?,SELECT COUNT(*) FROM artist,CREATE TABLE artist (Id VARCHAR)
"Show all artist name, age, and country ordered by the yeared they joined.","SELECT name, age, country FROM artist ORDER BY Year_Join","CREATE TABLE artist (name VARCHAR, age VARCHAR, country VARCHAR, Year_Join VARCHAR)"
What are all distinct country for artists?,SELECT DISTINCT country FROM artist,CREATE TABLE artist (country VARCHAR)
Show all artist names and the year joined who are not from United States.,"SELECT name, year_join FROM artist WHERE country <> 'United States'","CREATE TABLE artist (name VARCHAR, year_join VARCHAR, country VARCHAR)"
How many artists are above age 46 and joined after 1990?,SELECT COUNT(*) FROM artist WHERE age > 46 AND year_join > 1990,"CREATE TABLE artist (age VARCHAR, year_join VARCHAR)"
What is the average and minimum age of all artists from United States.,"SELECT AVG(age), MIN(age) FROM artist WHERE country = 'United States'","CREATE TABLE artist (age INTEGER, country VARCHAR)"
What is the name of the artist who joined latest?,SELECT name FROM artist ORDER BY year_join DESC LIMIT 1,"CREATE TABLE artist (name VARCHAR, year_join VARCHAR)"
How many exhibition are there in year 2005 or after?,SELECT COUNT(*) FROM exhibition WHERE YEAR >= 2005,CREATE TABLE exhibition (YEAR VARCHAR)
Show theme and year for all exhibitions with ticket prices lower than 15.,"SELECT theme, YEAR FROM exhibition WHERE ticket_price < 15","CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price INTEGER)"
Show all artist names and the number of exhibitions for each artist.,"SELECT T2.name, COUNT(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id","CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (artist_id VARCHAR)"
What is the name and country for the artist with most number of exhibitions?,"SELECT T2.name, T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE exhibition (artist_id VARCHAR); CREATE TABLE artist (name VARCHAR, country VARCHAR, artist_id VARCHAR)"
Show names for artists without any exhibition.,SELECT name FROM artist WHERE NOT artist_id IN (SELECT artist_id FROM exhibition),"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (name VARCHAR, artist_id VARCHAR)"
What is the theme and artist name for the exhibition with a ticket price higher than the average?,"SELECT T1.theme, T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.ticket_price > (SELECT AVG(ticket_price) FROM exhibition)","CREATE TABLE exhibition (ticket_price INTEGER); CREATE TABLE exhibition (theme VARCHAR, artist_id VARCHAR, ticket_price INTEGER); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)"
"Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.","SELECT AVG(ticket_price), MIN(ticket_price), MAX(ticket_price) FROM exhibition WHERE YEAR < 2009","CREATE TABLE exhibition (ticket_price INTEGER, YEAR INTEGER)"
Show theme and year for all exhibitions in an descending order of ticket price.,"SELECT theme, YEAR FROM exhibition ORDER BY ticket_price DESC","CREATE TABLE exhibition (theme VARCHAR, YEAR VARCHAR, ticket_price VARCHAR)"
"What is the theme, date, and attendance for the exhibition in year 2004?","SELECT T2.theme, T1.date, T1.attendance FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T2.year = 2004","CREATE TABLE exhibition_record (date VARCHAR, attendance VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR, year VARCHAR)"
Show all artist names who didn't have an exhibition in 2004.,SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id WHERE T1.year = 2004,"CREATE TABLE exhibition (artist_id VARCHAR, year VARCHAR); CREATE TABLE artist (name VARCHAR); CREATE TABLE artist (name VARCHAR, artist_id VARCHAR)"
Show the theme for exhibitions with both records of an attendance below 100 and above 500.,SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance < 100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 500,"CREATE TABLE exhibition (theme VARCHAR, exhibition_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)"
How many exhibitions have a attendance more than 100 or have a ticket price below 10?,SELECT COUNT(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id WHERE T1.attendance > 100 OR T2.ticket_price < 10,"CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, ticket_price VARCHAR)"
Show all artist names with an average exhibition attendance over 200.,SELECT T3.name FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id = T2.exhibition_id JOIN artist AS T3 ON T3.artist_id = T2.artist_id GROUP BY T3.artist_id HAVING AVG(T1.attendance) > 200,"CREATE TABLE artist (name VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition (exhibition_id VARCHAR, artist_id VARCHAR); CREATE TABLE exhibition_record (exhibition_id VARCHAR, attendance INTEGER)"
"Find the id of the item whose title is ""orange"".","SELECT i_id FROM item WHERE title = ""orange""","CREATE TABLE item (i_id VARCHAR, title VARCHAR)"
List all information in the item table.,SELECT * FROM item,CREATE TABLE item (Id VARCHAR)
Find the number of reviews.,SELECT COUNT(*) FROM review,CREATE TABLE review (Id VARCHAR)
How many users are there?,SELECT COUNT(*) FROM useracct,CREATE TABLE useracct (Id VARCHAR)
Find the average and maximum rating of all reviews.,"SELECT AVG(rating), MAX(rating) FROM review",CREATE TABLE review (rating INTEGER)
Find the highest rank of all reviews.,SELECT MIN(rank) FROM review,CREATE TABLE review (rank INTEGER)
How many different users wrote some reviews?,SELECT COUNT(DISTINCT u_id) FROM review,CREATE TABLE review (u_id VARCHAR)
How many different items were reviewed by some users?,SELECT COUNT(DISTINCT i_id) FROM review,CREATE TABLE review (i_id VARCHAR)
Find the number of items that did not receive any review.,SELECT COUNT(*) FROM item WHERE NOT i_id IN (SELECT i_id FROM review),CREATE TABLE review (i_id VARCHAR); CREATE TABLE item (i_id VARCHAR)
Find the names of users who did not leave any review.,SELECT name FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review),"CREATE TABLE review (name VARCHAR, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)"
Find the names of goods that receive a rating of 10.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating = 10,"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating VARCHAR)"
Find the titles of items whose rating is higher than the average review rating of all items.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > (SELECT AVG(rating) FROM review),"CREATE TABLE review (rating INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)"
Find the titles of items that received any rating below 5.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5,"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)"
Find the titles of items that received both a rating higher than 8 and a rating below 5.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating > 8 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rating < 5,"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)"
Find the names of items whose rank is higher than 3 and whose average rating is above 5.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id WHERE T2.rank > 3 INTERSECT SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id HAVING AVG(T2.rating) > 5,"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rank INTEGER, rating INTEGER)"
Find the name of the item with the lowest average rating.,SELECT T1.title FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) LIMIT 1,"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)"
List the titles of all items in alphabetic order .,SELECT title FROM item ORDER BY title,CREATE TABLE item (title VARCHAR)
Find the name of the user who gives the most reviews.,SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)"
Find the name and id of the item with the highest average rating.,"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rating) DESC LIMIT 1","CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (i_id VARCHAR, rating INTEGER)"
Find the name and id of the good with the highest average rank.,"SELECT T1.title, T1.i_id FROM item AS T1 JOIN review AS T2 ON T1.i_id = T2.i_id GROUP BY T2.i_id ORDER BY AVG(T2.rank) DESC LIMIT 1","CREATE TABLE review (i_id VARCHAR, rank INTEGER); CREATE TABLE item (title VARCHAR, i_id VARCHAR)"
"For each user, return the name and the average rating of reviews given by them.","SELECT T1.name, AVG(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","CREATE TABLE review (rating INTEGER, u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)"
"For each user, find their name and the number of reviews written by them.","SELECT T1.name, COUNT(*) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id","CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE review (u_id VARCHAR)"
Find the name of the user who gave the highest rating.,SELECT T1.name FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id ORDER BY T2.rating DESC LIMIT 1,"CREATE TABLE review (u_id VARCHAR, rating VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)"
Find the name of the source user with the highest average trust score.,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.source_u_id GROUP BY T2.source_u_id ORDER BY AVG(trust) DESC LIMIT 1,"CREATE TABLE useracct (name VARCHAR, u_id VARCHAR); CREATE TABLE trust (source_u_id VARCHAR)"
Find each target user's name and average trust score.,"SELECT T1.name, AVG(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id","CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)"
Find the name of the target user with the lowest trust score.,SELECT T1.name FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id ORDER BY trust LIMIT 1,"CREATE TABLE trust (target_u_id VARCHAR); CREATE TABLE useracct (name VARCHAR, u_id VARCHAR)"
Find the names of the items that did not receive any review.,SELECT title FROM item WHERE NOT i_id IN (SELECT i_id FROM review),"CREATE TABLE item (title VARCHAR, i_id VARCHAR); CREATE TABLE review (title VARCHAR, i_id VARCHAR)"
Find the number of users who did not write any review.,SELECT COUNT(*) FROM useracct WHERE NOT u_id IN (SELECT u_id FROM review),CREATE TABLE review (u_id VARCHAR); CREATE TABLE useracct (u_id VARCHAR)
How many players are there?,SELECT COUNT(*) FROM player,CREATE TABLE player (Id VARCHAR)
List the names of players in ascending order of votes.,SELECT Player_name FROM player ORDER BY Votes,"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)"
What are the gender and occupation of players?,"SELECT Gender, Occupation FROM player","CREATE TABLE player (Gender VARCHAR, Occupation VARCHAR)"
"List the name and residence for players whose occupation is not ""Researcher"".","SELECT Player_name, residence FROM player WHERE Occupation <> ""Researcher""","CREATE TABLE player (Player_name VARCHAR, residence VARCHAR, Occupation VARCHAR)"
"Show the names of sponsors of players whose residence is either ""Brandon"" or ""Birtle"".","SELECT Sponsor_name FROM player WHERE Residence = ""Brandon"" OR Residence = ""Birtle""","CREATE TABLE player (Sponsor_name VARCHAR, Residence VARCHAR)"
What is the name of the player with the largest number of votes?,SELECT Player_name FROM player ORDER BY Votes DESC LIMIT 1,"CREATE TABLE player (Player_name VARCHAR, Votes VARCHAR)"
Show different occupations along with the number of players in each occupation.,"SELECT Occupation, COUNT(*) FROM player GROUP BY Occupation",CREATE TABLE player (Occupation VARCHAR)
Please show the most common occupation of players.,SELECT Occupation FROM player GROUP BY Occupation ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE player (Occupation VARCHAR)
Show the residences that have at least two players.,SELECT Residence FROM player GROUP BY Residence HAVING COUNT(*) >= 2,CREATE TABLE player (Residence VARCHAR)
Show the names of players and names of their coaches.,"SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID","CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)"
Show the names of players coached by the rank 1 coach.,SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T2.Rank = 1,"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE coach (Coach_ID VARCHAR, Rank VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR)"
Show the names and genders of players with a coach starting after 2011.,"SELECT T3.Player_name, T3.gender FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID WHERE T1.Starting_year > 2011","CREATE TABLE player (Player_name VARCHAR, gender VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR, Starting_year INTEGER); CREATE TABLE coach (Coach_ID VARCHAR)"
Show the names of players and names of their coaches in descending order of the votes of players.,"SELECT T3.Player_name, T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID = T2.Coach_ID JOIN player AS T3 ON T1.Player_ID = T3.Player_ID ORDER BY T3.Votes DESC","CREATE TABLE coach (coach_name VARCHAR, Coach_ID VARCHAR); CREATE TABLE player_coach (Coach_ID VARCHAR, Player_ID VARCHAR); CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR, Votes VARCHAR)"
List the names of players that do not have coaches.,SELECT Player_name FROM player WHERE NOT Player_ID IN (SELECT Player_ID FROM player_coach),"CREATE TABLE player (Player_name VARCHAR, Player_ID VARCHAR); CREATE TABLE player_coach (Player_name VARCHAR, Player_ID VARCHAR)"
"Show the residences that have both a player of gender ""M"" and a player of gender ""F"".","SELECT Residence FROM player WHERE gender = ""M"" INTERSECT SELECT Residence FROM player WHERE gender = ""F""","CREATE TABLE player (Residence VARCHAR, gender VARCHAR)"
"How many coaches does each club has? List the club id, name and the number of coaches.","SELECT T1.club_id, T1.club_name, COUNT(*) FROM club AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id","CREATE TABLE club (club_id VARCHAR, club_name VARCHAR); CREATE TABLE coach (club_id VARCHAR)"
How many gold medals has the club with the most coaches won?,"SELECT T1.club_id, T1.gold FROM match_result AS T1 JOIN coach AS T2 ON T1.club_id = T2.club_id GROUP BY T1.club_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE match_result (club_id VARCHAR, gold VARCHAR); CREATE TABLE coach (club_id VARCHAR)"
How many gymnasts are there?,SELECT COUNT(*) FROM gymnast,CREATE TABLE gymnast (Id VARCHAR)
List the total points of gymnasts in descending order.,SELECT Total_Points FROM gymnast ORDER BY Total_Points DESC,CREATE TABLE gymnast (Total_Points VARCHAR)
List the total points of gymnasts in descending order of floor exercise points.,SELECT Total_Points FROM gymnast ORDER BY Floor_Exercise_Points DESC,"CREATE TABLE gymnast (Total_Points VARCHAR, Floor_Exercise_Points VARCHAR)"
What is the average horizontal bar points for all gymnasts?,SELECT AVG(Horizontal_Bar_Points) FROM gymnast,CREATE TABLE gymnast (Horizontal_Bar_Points INTEGER)
What are the names of people in ascending alphabetical order?,SELECT Name FROM People ORDER BY Name,CREATE TABLE People (Name VARCHAR)
What are the names of gymnasts?,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID,"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
"What are the names of gymnasts whose hometown is not ""Santo Domingo""?","SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T2.Hometown <> ""Santo Domingo""","CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Hometown VARCHAR)"
What is the age of the tallest person?,SELECT Age FROM people ORDER BY Height DESC LIMIT 1,"CREATE TABLE people (Age VARCHAR, Height VARCHAR)"
List the names of the top 5 oldest people.,SELECT Name FROM People ORDER BY Age DESC LIMIT 5,"CREATE TABLE People (Name VARCHAR, Age VARCHAR)"
What is the total point count of the youngest gymnast?,SELECT T1.Total_Points FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Age LIMIT 1,"CREATE TABLE people (People_ID VARCHAR, Age VARCHAR); CREATE TABLE gymnast (Total_Points VARCHAR, Gymnast_ID VARCHAR)"
What is the average age of all gymnasts?,SELECT AVG(T2.Age) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID,"CREATE TABLE people (Age INTEGER, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR)"
What are the distinct hometowns of gymnasts with total points more than 57.5?,SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID WHERE T1.Total_Points > 57.5,"CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points INTEGER); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)"
What are the hometowns of gymnasts and the corresponding number of gymnasts?,"SELECT T2.Hometown, COUNT(*) FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown","CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)"
What is the most common hometown of gymnasts?,SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)"
What are the hometowns that are shared by at least two gymnasts?,SELECT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID GROUP BY T2.Hometown HAVING COUNT(*) >= 2,"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR)"
List the names of gymnasts in ascending order by their heights.,SELECT T2.Name FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T2.Height,"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Height VARCHAR)"
List the distinct hometowns that are not associated with any gymnast.,SELECT DISTINCT Hometown FROM people EXCEPT SELECT DISTINCT T2.Hometown FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID,"CREATE TABLE gymnast (Gymnast_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR, People_ID VARCHAR); CREATE TABLE people (Hometown VARCHAR)"
Show the hometowns shared by people older than 23 and younger than 20.,SELECT Hometown FROM people WHERE Age > 23 INTERSECT SELECT Hometown FROM people WHERE Age < 20,"CREATE TABLE people (Hometown VARCHAR, Age INTEGER)"
How many distinct hometowns did these people have?,SELECT COUNT(DISTINCT Hometown) FROM people,CREATE TABLE people (Hometown VARCHAR)
Show the ages of gymnasts in descending order of total points.,SELECT T2.Age FROM gymnast AS T1 JOIN people AS T2 ON T1.Gymnast_ID = T2.People_ID ORDER BY T1.Total_Points DESC,"CREATE TABLE people (Age VARCHAR, People_ID VARCHAR); CREATE TABLE gymnast (Gymnast_ID VARCHAR, Total_Points VARCHAR)"
Find the total savings balance of all accounts except the account with name ‘Brown’.,SELECT SUM(T2.balance) FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T1.name <> 'Brown',"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR)"
How many accounts are there in total?,SELECT COUNT(*) FROM accounts,CREATE TABLE accounts (Id VARCHAR)
What is the total checking balance in all accounts?,SELECT SUM(balance) FROM checking,CREATE TABLE checking (balance INTEGER)
Find the average checking balance.,SELECT AVG(balance) FROM checking,CREATE TABLE checking (balance INTEGER)
How many accounts have a savings balance above the average savings balance?,SELECT COUNT(*) FROM savings WHERE balance > (SELECT AVG(balance) FROM savings),CREATE TABLE savings (balance INTEGER)
Find the name and id of accounts whose checking balance is below the maximum checking balance.,"SELECT T1.custid, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT MAX(balance) FROM checking)","CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)"
What is the checking balance of the account whose owner’s name contains the substring ‘ee’?,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE '%ee%',"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR)"
Find the checking balance and saving balance in the Brown’s account.,"SELECT T2.balance, T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T1.name = 'Brown'","CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)"
"Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM savings),"CREATE TABLE checking (custid VARCHAR, balance INTEGER); CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE savings (balance INTEGER); CREATE TABLE checking (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the checking balance of the accounts whose savings balance is higher than the average savings balance.,SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid WHERE T2.balance > (SELECT AVG(balance) FROM savings)),"CREATE TABLE accounts (custid VARCHAR, name VARCHAR); CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER)"
List all customers’ names in the alphabetical order.,SELECT name FROM accounts ORDER BY name,CREATE TABLE accounts (name VARCHAR)
Find the name of account that has the lowest total checking and saving balance.,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance LIMIT 1,"CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the names and total checking and savings balances of accounts whose savings balance is higher than the average savings balance.,"SELECT T1.name, T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance > (SELECT AVG(balance) FROM savings)","CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the name and checking balance of the account with the lowest savings balance.,"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the number of checking accounts for each account name.,"SELECT COUNT(*), T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid GROUP BY T1.name","CREATE TABLE checking (custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the total saving balance for each account name.,"SELECT SUM(T2.balance), T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid GROUP BY T1.name","CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the name of accounts whose checking balance is below the average checking balance.,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid WHERE T2.balance < (SELECT AVG(balance) FROM checking),"CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (balance INTEGER); CREATE TABLE checking (custid VARCHAR, balance INTEGER)"
Find the saving balance of the account with the highest checking balance.,SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance DESC LIMIT 1,"CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (custid VARCHAR)"
Find the total checking and saving balance of all accounts sorted by the total balance in ascending order.,SELECT T1.balance + T2.balance FROM checking AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T1.balance + T2.balance,"CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR)"
Find the name and checking balance of the account with the lowest saving balance.,"SELECT T2.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T3.balance LIMIT 1","CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (custid VARCHAR, balance VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
"Find the name, checking balance and saving balance of all accounts in the bank.","SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid","CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
"Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.","SELECT T2.balance, T3.balance, T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid ORDER BY T2.balance + T3.balance DESC","CREATE TABLE checking (balance VARCHAR, custid VARCHAR); CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the name of accounts whose checking balance is higher than corresponding saving balance.,SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T2.balance > T3.balance,"CREATE TABLE savings (custid VARCHAR, balance INTEGER); CREATE TABLE accounts (name VARCHAR, custid VARCHAR); CREATE TABLE checking (custid VARCHAR, balance INTEGER)"
Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.,"SELECT T1.name, T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid = T2.custid JOIN savings AS T3 ON T1.custid = T3.custid WHERE T3.balance < T2.balance","CREATE TABLE checking (balance INTEGER, custid VARCHAR); CREATE TABLE savings (balance INTEGER, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.,"SELECT T1.name, T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid = T2.custid ORDER BY T2.balance DESC LIMIT 3","CREATE TABLE savings (balance VARCHAR, custid VARCHAR); CREATE TABLE accounts (name VARCHAR, custid VARCHAR)"
How many main stream browsers whose market share is at least 5 exist?,SELECT COUNT(*) FROM browser WHERE market_share >= 5,CREATE TABLE browser (market_share VARCHAR)
List the name of browsers in descending order by market share.,SELECT name FROM browser ORDER BY market_share DESC,"CREATE TABLE browser (name VARCHAR, market_share VARCHAR)"
"List the ids, names and market shares of all browsers.","SELECT id, name, market_share FROM browser","CREATE TABLE browser (id VARCHAR, name VARCHAR, market_share VARCHAR)"
"What is the maximum, minimum and average market share of the listed browsers?","SELECT MAX(market_share), MIN(market_share), AVG(market_share) FROM browser",CREATE TABLE browser (market_share INTEGER)
What is the id and market share of the browser Safari?,"SELECT id, market_share FROM browser WHERE name = 'Safari'","CREATE TABLE browser (id VARCHAR, market_share VARCHAR, name VARCHAR)"
What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?,"SELECT name, operating_system FROM web_client_accelerator WHERE CONNECTION <> 'Broadband'","CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, CONNECTION VARCHAR)"
What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?,SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id = T3.id WHERE T3.name = 'CProxy' AND T2.compatible_since_year > 1998,"CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)"
What are the ids and names of the web accelerators that are compatible with two or more browsers?,"SELECT T1.id, T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY T1.id HAVING COUNT(*) >= 2","CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, Name VARCHAR)"
What is the id and name of the browser that is compatible with the most web accelerators?,"SELECT T1.id, T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR)"
When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?,SELECT T1.compatible_since_year FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id WHERE T3.name = 'CACHEbox' AND T2.name = 'Internet Explorer',"CREATE TABLE accelerator_compatible_browser (compatible_since_year VARCHAR, browser_id VARCHAR, accelerator_id VARCHAR); CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR)"
How many different kinds of clients are supported by the web clients accelerators?,SELECT COUNT(DISTINCT client) FROM web_client_accelerator,CREATE TABLE web_client_accelerator (client VARCHAR)
How many accelerators are not compatible with the browsers listed ?,SELECT COUNT(*) FROM web_client_accelerator WHERE NOT id IN (SELECT accelerator_id FROM accelerator_compatible_browser),"CREATE TABLE accelerator_compatible_browser (id VARCHAR, accelerator_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, accelerator_id VARCHAR)"
What distinct accelerator names are compatible with the browswers that have market share higher than 15?,SELECT DISTINCT T1.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.market_share > 15,"CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE browser (id VARCHAR, market_share INTEGER)"
List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.,SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T1.name = 'Fasterfox',"CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (id VARCHAR, name VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)"
Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.,"SELECT name, operating_system FROM web_client_accelerator EXCEPT SELECT T1.name, T1.operating_system FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id JOIN browser AS T3 ON T2.browser_id = T3.id WHERE T3.name = 'Opera'","CREATE TABLE browser (id VARCHAR, name VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR); CREATE TABLE accelerator_compatible_browser (accelerator_id VARCHAR, browser_id VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, operating_system VARCHAR, id VARCHAR)"
"Which accelerator name contains substring ""Opera""?","SELECT name FROM web_client_accelerator WHERE name LIKE ""%Opera%""",CREATE TABLE web_client_accelerator (name VARCHAR)
Find the number of web accelerators used for each Operating system.,"SELECT Operating_system, COUNT(*) FROM web_client_accelerator GROUP BY Operating_system",CREATE TABLE web_client_accelerator (Operating_system VARCHAR)
give me names of all compatible browsers and accelerators in the descending order of compatible year,"SELECT T2.name, T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id ORDER BY T1.compatible_since_year DESC","CREATE TABLE accelerator_compatible_browser (browser_id VARCHAR, accelerator_id VARCHAR, compatible_since_year VARCHAR); CREATE TABLE web_client_accelerator (name VARCHAR, id VARCHAR); CREATE TABLE browser (name VARCHAR, id VARCHAR)"
How many wrestlers are there?,SELECT COUNT(*) FROM wrestler,CREATE TABLE wrestler (Id VARCHAR)
List the names of wrestlers in descending order of days held.,SELECT Name FROM wrestler ORDER BY Days_held DESC,"CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)"
What is the name of the wrestler with the fewest days held?,SELECT Name FROM wrestler ORDER BY Days_held LIMIT 1,"CREATE TABLE wrestler (Name VARCHAR, Days_held VARCHAR)"
"What are the distinct reigns of wrestlers whose location is not ""Tokyo,Japan"" ?","SELECT DISTINCT Reign FROM wrestler WHERE LOCATION <> ""Tokyo , Japan""","CREATE TABLE wrestler (Reign VARCHAR, LOCATION VARCHAR)"
What are the names and location of the wrestlers?,"SELECT Name, LOCATION FROM wrestler","CREATE TABLE wrestler (Name VARCHAR, LOCATION VARCHAR)"
"What are the elimination moves of wrestlers whose team is ""Team Orton""?","SELECT Elimination_Move FROM Elimination WHERE Team = ""Team Orton""","CREATE TABLE Elimination (Elimination_Move VARCHAR, Team VARCHAR)"
What are the names of wrestlers and the elimination moves?,"SELECT T2.Name, T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID","CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE elimination (Elimination_Move VARCHAR, Wrestler_ID VARCHAR)"
List the names of wrestlers and the teams in elimination in descending order of days held.,"SELECT T2.Name, T1.Team FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC","CREATE TABLE elimination (Team VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR, Days_held VARCHAR)"
List the time of elimination of the wrestlers with largest days held.,SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1,"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held VARCHAR); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)"
Show times of elimination of wrestlers with days held more than 50.,SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Days_held > 50,"CREATE TABLE wrestler (Wrestler_ID VARCHAR, Days_held INTEGER); CREATE TABLE elimination (Time VARCHAR, Wrestler_ID VARCHAR)"
Show different teams in eliminations and the number of eliminations from each team.,"SELECT Team, COUNT(*) FROM elimination GROUP BY Team",CREATE TABLE elimination (Team VARCHAR)
Show teams that have suffered more than three eliminations.,SELECT Team FROM elimination GROUP BY Team HAVING COUNT(*) > 3,CREATE TABLE elimination (Team VARCHAR)
Show the reign and days held of wrestlers.,"SELECT Reign, Days_held FROM wrestler","CREATE TABLE wrestler (Reign VARCHAR, Days_held VARCHAR)"
What are the names of wrestlers days held less than 100?,SELECT Name FROM wrestler WHERE Days_held < 100,"CREATE TABLE wrestler (Name VARCHAR, Days_held INTEGER)"
Please show the most common reigns of wrestlers.,SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE wrestler (Reign VARCHAR)
List the locations that are shared by more than two wrestlers.,SELECT LOCATION FROM wrestler GROUP BY LOCATION HAVING COUNT(*) > 2,CREATE TABLE wrestler (LOCATION VARCHAR)
List the names of wrestlers that have not been eliminated.,SELECT Name FROM wrestler WHERE NOT Wrestler_ID IN (SELECT Wrestler_ID FROM elimination),"CREATE TABLE elimination (Name VARCHAR, Wrestler_ID VARCHAR); CREATE TABLE wrestler (Name VARCHAR, Wrestler_ID VARCHAR)"
"Show the teams that have both wrestlers eliminated by ""Orton"" and wrestlers eliminated by ""Benjamin"".","SELECT Team FROM Elimination WHERE Eliminated_By = ""Orton"" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By = ""Benjamin""","CREATE TABLE Elimination (Team VARCHAR, Eliminated_By VARCHAR)"
What is the number of distinct teams that suffer elimination?,SELECT COUNT(DISTINCT team) FROM elimination,CREATE TABLE elimination (team VARCHAR)
"Show the times of elimination by ""Punk"" or ""Orton"".","SELECT TIME FROM elimination WHERE Eliminated_By = ""Punk"" OR Eliminated_By = ""Orton""","CREATE TABLE elimination (TIME VARCHAR, Eliminated_By VARCHAR)"
How many schools are there?,SELECT COUNT(*) FROM school,CREATE TABLE school (Id VARCHAR)
Show all school names in alphabetical order.,SELECT school_name FROM school ORDER BY school_name,CREATE TABLE school (school_name VARCHAR)
"List the name, location, mascot for all schools.","SELECT school_name, LOCATION, mascot FROM school","CREATE TABLE school (school_name VARCHAR, LOCATION VARCHAR, mascot VARCHAR)"
What are the total and average enrollment of all schools?,"SELECT SUM(enrollment), AVG(enrollment) FROM school",CREATE TABLE school (enrollment INTEGER)
What are the mascots for schools with enrollments above the average?,SELECT mascot FROM school WHERE enrollment > (SELECT AVG(enrollment) FROM school),"CREATE TABLE school (mascot VARCHAR, enrollment INTEGER)"
List the name of the school with the smallest enrollment.,SELECT school_name FROM school ORDER BY enrollment LIMIT 1,"CREATE TABLE school (school_name VARCHAR, enrollment VARCHAR)"
"Show the average, maximum, minimum enrollment of all schools.","SELECT AVG(enrollment), MAX(enrollment), MIN(enrollment) FROM school",CREATE TABLE school (enrollment INTEGER)
Show each county along with the number of schools and total enrollment in each county.,"SELECT county, COUNT(*), SUM(enrollment) FROM school GROUP BY county","CREATE TABLE school (county VARCHAR, enrollment INTEGER)"
"How many donors have endowment for school named ""Glenn""?","SELECT COUNT(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = ""Glenn""","CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)"
List each donator name and the amount of endowment in descending order of the amount of endowment.,"SELECT donator_name, SUM(amount) FROM endowment GROUP BY donator_name ORDER BY SUM(amount) DESC","CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)"
List the names of the schools without any endowment.,SELECT school_name FROM school WHERE NOT school_id IN (SELECT school_id FROM endowment),"CREATE TABLE endowment (school_name VARCHAR, school_id VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)"
List all the names of schools with an endowment amount smaller than or equal to 10.,SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T1.school_id HAVING SUM(T1.amount) <= 10,"CREATE TABLE school (school_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)"
"Show the names of donors who donated to both school ""Glenn"" and ""Triton.""",SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn' INTERSECT SELECT T1.donator_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Triton',"CREATE TABLE school (school_id VARCHAR, school_name VARCHAR); CREATE TABLE endowment (donator_name VARCHAR, school_id VARCHAR)"
Show the names of all the donors except those whose donation amount less than 9.,SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount < 9,"CREATE TABLE endowment (donator_name VARCHAR, amount INTEGER)"
List the amount and donor name for the largest amount of donation.,"SELECT amount, donator_name FROM endowment ORDER BY amount DESC LIMIT 1","CREATE TABLE endowment (amount VARCHAR, donator_name VARCHAR)"
How many budgets are above 3000 in year 2001 or before?,SELECT COUNT(*) FROM budget WHERE budgeted > 3000 AND YEAR <= 2001,"CREATE TABLE budget (budgeted VARCHAR, YEAR VARCHAR)"
"Show each school name, its budgeted amount, and invested amount in year 2002 or after.","SELECT T2.school_name, T1.budgeted, T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.year >= 2002","CREATE TABLE budget (budgeted VARCHAR, invested VARCHAR, school_id VARCHAR, year VARCHAR); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)"
Show all donor names.,SELECT DISTINCT donator_name FROM endowment,CREATE TABLE endowment (donator_name VARCHAR)
How many budget record has a budget amount smaller than the invested amount?,SELECT COUNT(*) FROM budget WHERE budgeted < invested,"CREATE TABLE budget (budgeted INTEGER, invested VARCHAR)"
"What is the total budget amount for school ""Glenn"" in all years?",SELECT SUM(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T2.school_name = 'Glenn',"CREATE TABLE budget (budgeted INTEGER, school_id VARCHAR); CREATE TABLE school (school_id VARCHAR, school_name VARCHAR)"
Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.,SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN endowment AS T3 ON T2.school_id = T3.school_id GROUP BY T2.school_name HAVING SUM(T1.budgeted) > 100 OR SUM(T3.amount) > 10,"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER); CREATE TABLE budget (school_id VARCHAR, budgeted INTEGER); CREATE TABLE school (school_name VARCHAR, school_id VARCHAR)"
Find the names of schools that have more than one donator with donation amount above 8.5.,SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id WHERE T1.amount > 8.5 GROUP BY T1.school_id HAVING COUNT(*) > 1,"CREATE TABLE school (School_name VARCHAR, school_id VARCHAR); CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)"
Find the number of schools that have more than one donator whose donation amount is less than 8.5.,SELECT COUNT(*) FROM (SELECT * FROM endowment WHERE amount > 8.5 GROUP BY school_id HAVING COUNT(*) > 1),"CREATE TABLE endowment (school_id VARCHAR, amount INTEGER)"
"List the name, IHSAA Football Class, and Mascot of the schools that have more than 6000 of budgeted amount or were founded before 2003, in the order of percent of total invested budget and total budgeted budget.","SELECT T1.School_name, T1.Mascot, T1.IHSAA_Football_Class FROM school AS T1 JOIN budget AS T2 ON T1.school_id = T2.school_id WHERE Budgeted > 6000 OR YEAR < 2003 ORDER BY T2.total_budget_percent_invested, T2.total_budget_percent_budgeted","CREATE TABLE school (School_name VARCHAR, Mascot VARCHAR, IHSAA_Football_Class VARCHAR, school_id VARCHAR); CREATE TABLE budget (school_id VARCHAR, total_budget_percent_invested VARCHAR, total_budget_percent_budgeted VARCHAR)"
How many buildings are there?,SELECT COUNT(*) FROM building,CREATE TABLE building (Id VARCHAR)
"Show the name, street address, and number of floors for all buildings ordered by the number of floors.","SELECT name, street_address, floors FROM building ORDER BY floors","CREATE TABLE building (name VARCHAR, street_address VARCHAR, floors VARCHAR)"
What is the name of the tallest building?,SELECT name FROM building ORDER BY height_feet DESC LIMIT 1,"CREATE TABLE building (name VARCHAR, height_feet VARCHAR)"
"What are the average, maximum, and minimum number of floors for all buildings?","SELECT AVG(floors), MAX(floors), MIN(floors) FROM building",CREATE TABLE building (floors INTEGER)
Show the number of buildings with a height above the average or a number of floors above the average.,SELECT COUNT(*) FROM building WHERE height_feet > (SELECT AVG(height_feet) FROM building) OR floors > (SELECT AVG(floors) FROM building),"CREATE TABLE building (height_feet INTEGER, floors INTEGER)"
List the names of buildings with at least 200 feet of height and with at least 20 floors.,SELECT name FROM building WHERE height_feet >= 200 AND floors >= 20,"CREATE TABLE building (name VARCHAR, height_feet VARCHAR, floors VARCHAR)"
"Show the names and locations of institutions that are founded after 1990 and have the type ""Private"".","SELECT institution, LOCATION FROM institution WHERE founded > 1990 AND TYPE = 'Private'","CREATE TABLE institution (institution VARCHAR, LOCATION VARCHAR, founded VARCHAR, TYPE VARCHAR)"
"Show institution types, along with the number of institutions and total enrollment for each type.","SELECT TYPE, COUNT(*), SUM(enrollment) FROM institution GROUP BY TYPE","CREATE TABLE institution (TYPE VARCHAR, enrollment INTEGER)"
Show the institution type with the largest number of institutions.,SELECT TYPE FROM institution GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE institution (TYPE VARCHAR)
Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.,SELECT TYPE FROM institution WHERE founded > 1990 AND enrollment >= 1000,"CREATE TABLE institution (TYPE VARCHAR, founded VARCHAR, enrollment VARCHAR)"
Show the name of buildings that do not have any institution.,SELECT name FROM building WHERE NOT building_id IN (SELECT building_id FROM institution),"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (name VARCHAR, building_id VARCHAR)"
Show the names of buildings except for those having an institution founded in 2003.,SELECT name FROM building EXCEPT SELECT T1.name FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded = 2003,"CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE building (name VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded VARCHAR)"
"For each building, show the name of the building and the number of institutions in it.","SELECT T1.name, COUNT(*) FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id GROUP BY T1.building_id","CREATE TABLE building (name VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR)"
Show the names and heights of buildings with at least two institutions founded after 1880.,"SELECT T1.name, T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id = T2.building_id WHERE T2.founded > 1880 GROUP BY T1.building_id HAVING COUNT(*) >= 2","CREATE TABLE building (name VARCHAR, height_feet VARCHAR, building_id VARCHAR); CREATE TABLE institution (building_id VARCHAR, founded INTEGER)"
Show all the distinct institution types.,SELECT DISTINCT TYPE FROM institution,CREATE TABLE institution (TYPE VARCHAR)
Show institution names along with the number of proteins for each institution.,"SELECT T1.institution, COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id","CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (institution_id VARCHAR)"
"How many proteins are associated with an institution founded after 1880 or an institution with type ""Private""?",SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id WHERE T1.founded > 1880 OR T1.type = 'Private',"CREATE TABLE institution (institution_id VARCHAR, founded VARCHAR, type VARCHAR); CREATE TABLE protein (institution_id VARCHAR)"
Show the protein name and the institution name.,"SELECT T2.protein_name, T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id","CREATE TABLE institution (institution VARCHAR, institution_id VARCHAR); CREATE TABLE protein (protein_name VARCHAR, institution_id VARCHAR)"
How many proteins are associated with an institution in a building with at least 20 floors?,SELECT COUNT(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id JOIN building AS T3 ON T3.building_id = T1.building_id WHERE T3.floors >= 20,"CREATE TABLE institution (institution_id VARCHAR, building_id VARCHAR); CREATE TABLE building (building_id VARCHAR, floors VARCHAR); CREATE TABLE protein (institution_id VARCHAR)"
How many institutions do not have an associated protein in our record?,SELECT COUNT(*) FROM institution WHERE NOT institution_id IN (SELECT institution_id FROM protein),CREATE TABLE protein (institution_id VARCHAR); CREATE TABLE institution (institution_id VARCHAR)
Show all the locations where no cinema has capacity over 800.,SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity > 800,"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)"
Show all the locations where some cinemas were opened in both year 2010 and year 2011.,SELECT LOCATION FROM cinema WHERE openning_year = 2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year = 2011,"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)"
How many cinema do we have?,SELECT COUNT(*) FROM cinema,CREATE TABLE cinema (Id VARCHAR)
"Show name, opening year, and capacity for each cinema.","SELECT name, openning_year, capacity FROM cinema","CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR, capacity VARCHAR)"
Show the cinema name and location for cinemas with capacity above average.,"SELECT name, LOCATION FROM cinema WHERE capacity > (SELECT AVG(capacity) FROM cinema)","CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity INTEGER)"
What are all the locations with a cinema?,SELECT DISTINCT LOCATION FROM cinema,CREATE TABLE cinema (LOCATION VARCHAR)
Show all the cinema names and opening years in descending order of opening year.,"SELECT name, openning_year FROM cinema ORDER BY openning_year DESC","CREATE TABLE cinema (name VARCHAR, openning_year VARCHAR)"
What are the name and location of the cinema with the largest capacity?,"SELECT name, LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1","CREATE TABLE cinema (name VARCHAR, LOCATION VARCHAR, capacity VARCHAR)"
"Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.","SELECT AVG(capacity), MIN(capacity), MAX(capacity) FROM cinema WHERE openning_year >= 2011","CREATE TABLE cinema (capacity INTEGER, openning_year VARCHAR)"
Show each location and the number of cinemas there.,"SELECT LOCATION, COUNT(*) FROM cinema GROUP BY LOCATION",CREATE TABLE cinema (LOCATION VARCHAR)
What is the location with the most cinemas opened in year 2010 or later?,SELECT LOCATION FROM cinema WHERE openning_year >= 2010 GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE cinema (LOCATION VARCHAR, openning_year VARCHAR)"
Show all the locations with at least two cinemas with capacity above 300.,SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) >= 2,"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)"
Show the title and director for all films.,"SELECT title, directed_by FROM film","CREATE TABLE film (title VARCHAR, directed_by VARCHAR)"
Show all directors.,SELECT DISTINCT directed_by FROM film,CREATE TABLE film (directed_by VARCHAR)
List all directors along with the number of films directed by each director.,"SELECT directed_by, COUNT(*) FROM film GROUP BY directed_by",CREATE TABLE film (directed_by VARCHAR)
What is total number of show times per dat for each cinema?,"SELECT T2.name, SUM(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id","CREATE TABLE schedule (show_times_per_day INTEGER, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR)"
What are the title and maximum price of each film?,"SELECT T2.title, MAX(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id","CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE schedule (price INTEGER, film_id VARCHAR)"
"Show cinema name, film title, date, and price for each record in schedule.","SELECT T3.name, T2.title, T1.date, T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id","CREATE TABLE schedule (date VARCHAR, price VARCHAR, film_id VARCHAR, cinema_id VARCHAR); CREATE TABLE cinema (name VARCHAR, cinema_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)"
What are the title and director of the films without any schedule?,"SELECT title, directed_by FROM film WHERE NOT film_id IN (SELECT film_id FROM schedule)","CREATE TABLE schedule (title VARCHAR, directed_by VARCHAR, film_id VARCHAR); CREATE TABLE film (title VARCHAR, directed_by VARCHAR, film_id VARCHAR)"
Show director with the largest number of show times in total.,SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.directed_by ORDER BY SUM(T1.show_times_per_day) DESC LIMIT 1,"CREATE TABLE schedule (film_id VARCHAR, show_times_per_day INTEGER); CREATE TABLE film (directed_by VARCHAR, film_id VARCHAR)"
Find the locations that have more than one movie theater with capacity above 300.,SELECT LOCATION FROM cinema WHERE capacity > 300 GROUP BY LOCATION HAVING COUNT(*) > 1,"CREATE TABLE cinema (LOCATION VARCHAR, capacity INTEGER)"
How many films have the word 'Dummy' in their titles?,"SELECT COUNT(*) FROM film WHERE title LIKE ""%Dummy%""",CREATE TABLE film (title VARCHAR)
Are the customers holding coupons with amount 500 bad or good?,SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.coupon_amount = 500,"CREATE TABLE discount_coupons (coupon_id VARCHAR, coupon_amount VARCHAR); CREATE TABLE customers (good_or_bad_customer VARCHAR, coupon_id VARCHAR)"
"How many bookings did each customer make? List the customer id, first name, and the count.","SELECT T1.customer_id, T1.first_name, COUNT(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id","CREATE TABLE bookings (customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR)"
What is the maximum total amount paid by a customer? List the customer id and amount.,"SELECT customer_id, SUM(amount_paid) FROM Payments GROUP BY customer_id ORDER BY SUM(amount_paid) DESC LIMIT 1","CREATE TABLE Payments (customer_id VARCHAR, amount_paid INTEGER)"
What are the id and the amount of refund of the booking that incurred the most times of payments?,"SELECT T1.booking_id, T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T1.booking_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Payments (booking_id VARCHAR); CREATE TABLE Bookings (booking_id VARCHAR, amount_of_refund VARCHAR)"
What is the id of the product that is booked for 3 times?,SELECT product_id FROM products_booked GROUP BY product_id HAVING COUNT(*) = 3,CREATE TABLE products_booked (product_id VARCHAR)
What is the product description of the product booked with an amount of 102.76?,SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.booked_amount = 102.76,"CREATE TABLE products_for_hire (product_description VARCHAR, product_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booked_amount VARCHAR)"
What are the start date and end date of the booking that has booked the product named 'Book collection A'?,"SELECT T3.booking_start_date, T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id = T2.product_id JOIN bookings AS T3 ON T2.booking_id = T3.booking_id WHERE T1.product_name = 'Book collection A'","CREATE TABLE bookings (booking_start_date VARCHAR, booking_end_date VARCHAR, booking_id VARCHAR); CREATE TABLE products_booked (product_id VARCHAR, booking_id VARCHAR); CREATE TABLE Products_for_hire (product_id VARCHAR, product_name VARCHAR)"
What are the names of products whose availability equals to 1?,SELECT T2.product_name FROM view_product_availability AS T1 JOIN products_for_hire AS T2 ON T1.product_id = T2.product_id WHERE T1.available_yn = 1,"CREATE TABLE view_product_availability (product_id VARCHAR, available_yn VARCHAR); CREATE TABLE products_for_hire (product_name VARCHAR, product_id VARCHAR)"
How many different product types are there?,SELECT COUNT(DISTINCT product_type_code) FROM products_for_hire,CREATE TABLE products_for_hire (product_type_code VARCHAR)
"What are the first name, last name, and gender of all the good customers? Order by their last name.","SELECT first_name, last_name, gender_mf FROM customers WHERE good_or_bad_customer = 'good' ORDER BY last_name","CREATE TABLE customers (first_name VARCHAR, last_name VARCHAR, gender_mf VARCHAR, good_or_bad_customer VARCHAR)"
What is the average amount due for all the payments?,SELECT AVG(amount_due) FROM payments,CREATE TABLE payments (amount_due INTEGER)
"What are the maximum, minimum, and average booked count for the products booked?","SELECT MAX(booked_count), MIN(booked_count), AVG(booked_count) FROM products_booked",CREATE TABLE products_booked (booked_count INTEGER)
What are all the distinct payment types?,SELECT DISTINCT payment_type_code FROM payments,CREATE TABLE payments (payment_type_code VARCHAR)
What are the daily hire costs for the products with substring 'Book' in its name?,SELECT daily_hire_cost FROM Products_for_hire WHERE product_name LIKE '%Book%',"CREATE TABLE Products_for_hire (daily_hire_cost VARCHAR, product_name VARCHAR)"
How many products are never booked with amount higher than 200?,SELECT COUNT(*) FROM Products_for_hire WHERE NOT product_id IN (SELECT product_id FROM products_booked WHERE booked_amount > 200),"CREATE TABLE products_booked (product_id VARCHAR, booked_amount INTEGER); CREATE TABLE Products_for_hire (product_id VARCHAR, booked_amount INTEGER)"
What are the coupon amount of the coupons owned by both good and bad customers?,SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.good_or_bad_customer = 'bad',"CREATE TABLE Discount_Coupons (coupon_amount VARCHAR, coupon_id VARCHAR); CREATE TABLE customers (coupon_id VARCHAR, good_or_bad_customer VARCHAR)"
What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check',SELECT payment_date FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check',"CREATE TABLE payments (payment_date VARCHAR, amount_paid VARCHAR, payment_type_code VARCHAR)"
What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?,"SELECT product_name, product_description FROM products_for_hire WHERE product_type_code = 'Cutlery' AND daily_hire_cost < 20","CREATE TABLE products_for_hire (product_name VARCHAR, product_description VARCHAR, product_type_code VARCHAR, daily_hire_cost VARCHAR)"
How many phones are there?,SELECT COUNT(*) FROM phone,CREATE TABLE phone (Id VARCHAR)
List the names of phones in ascending order of price.,SELECT Name FROM phone ORDER BY Price,"CREATE TABLE phone (Name VARCHAR, Price VARCHAR)"
What are the memories and carriers of phones?,"SELECT Memory_in_G, Carrier FROM phone","CREATE TABLE phone (Memory_in_G VARCHAR, Carrier VARCHAR)"
List the distinct carriers of phones with memories bigger than 32.,SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G > 32,"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)"
"Show the names of phones with carrier either ""Sprint"" or ""TMobile"".","SELECT Name FROM phone WHERE Carrier = ""Sprint"" OR Carrier = ""TMobile""","CREATE TABLE phone (Name VARCHAR, Carrier VARCHAR)"
What is the carrier of the most expensive phone?,SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1,"CREATE TABLE phone (Carrier VARCHAR, Price VARCHAR)"
Show different carriers of phones together with the number of phones with each carrier.,"SELECT Carrier, COUNT(*) FROM phone GROUP BY Carrier",CREATE TABLE phone (Carrier VARCHAR)
Show the most frequently used carrier of the phones.,SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE phone (Carrier VARCHAR)
Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.,SELECT Carrier FROM phone WHERE Memory_in_G < 32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G > 64,"CREATE TABLE phone (Carrier VARCHAR, Memory_in_G INTEGER)"
Show the names of phones and the districts of markets they are on.,"SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID","CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE market (District VARCHAR, Market_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)"
"Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.","SELECT T3.Name, T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID ORDER BY T2.Ranking","CREATE TABLE market (District VARCHAR, Market_ID VARCHAR, Ranking VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)"
Show the names of phones that are on market with number of shops greater than 50.,SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID WHERE T2.Num_of_shops > 50,"CREATE TABLE market (Market_ID VARCHAR, Num_of_shops INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Market_ID VARCHAR, Phone_ID VARCHAR)"
"For each phone, show its names and total number of stocks.","SELECT T2.Name, SUM(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name","CREATE TABLE phone_market (Num_of_stock INTEGER, Phone_ID VARCHAR); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)"
"Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name HAVING SUM(T1.Num_of_stock) >= 2000 ORDER BY SUM(T1.Num_of_stock) DESC,"CREATE TABLE phone_market (Phone_ID VARCHAR, Num_of_stock INTEGER); CREATE TABLE phone (Name VARCHAR, Phone_ID VARCHAR)"
List the names of phones that are not on any market.,SELECT Name FROM phone WHERE NOT Phone_id IN (SELECT Phone_ID FROM phone_market),"CREATE TABLE phone (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR); CREATE TABLE phone_market (Name VARCHAR, Phone_id VARCHAR, Phone_ID VARCHAR)"
How many gas companies are there?,SELECT COUNT(*) FROM company,CREATE TABLE company (Id VARCHAR)
List the company name and rank for all companies in the decreasing order of their sales.,"SELECT company, rank FROM company ORDER BY Sales_billion DESC","CREATE TABLE company (company VARCHAR, rank VARCHAR, Sales_billion VARCHAR)"
Show the company name and the main industry for all companies whose headquarters are not from USA.,"SELECT company, main_industry FROM company WHERE headquarters <> 'USA'","CREATE TABLE company (company VARCHAR, main_industry VARCHAR, headquarters VARCHAR)"
Show all company names and headquarters in the descending order of market value.,"SELECT company, headquarters FROM company ORDER BY market_value DESC","CREATE TABLE company (company VARCHAR, headquarters VARCHAR, market_value VARCHAR)"
"Show minimum, maximum, and average market value for all companies.","SELECT MIN(market_value), MAX(market_value), AVG(market_value) FROM company",CREATE TABLE company (market_value INTEGER)
Show all main industry for all companies.,SELECT DISTINCT main_industry FROM company,CREATE TABLE company (main_industry VARCHAR)
List all headquarters and the number of companies in each headquarter.,"SELECT headquarters, COUNT(*) FROM company GROUP BY headquarters",CREATE TABLE company (headquarters VARCHAR)
Show all main industry and total market value in each industry.,"SELECT main_industry, SUM(market_value) FROM company GROUP BY main_industry","CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)"
List the main industry with highest total market value and its number of companies.,"SELECT main_industry, COUNT(*) FROM company GROUP BY main_industry ORDER BY SUM(market_value) DESC LIMIT 1","CREATE TABLE company (main_industry VARCHAR, market_value INTEGER)"
Show headquarters with at least two companies in the banking industry.,SELECT headquarters FROM company WHERE main_industry = 'Banking' GROUP BY headquarters HAVING COUNT(*) >= 2,"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)"
"Show gas station id, location, and manager_name for all gas stations ordered by open year.","SELECT station_id, LOCATION, manager_name FROM gas_station ORDER BY open_year","CREATE TABLE gas_station (station_id VARCHAR, LOCATION VARCHAR, manager_name VARCHAR, open_year VARCHAR)"
How many gas station are opened between 2000 and 2005?,SELECT COUNT(*) FROM gas_station WHERE open_year BETWEEN 2000 AND 2005,CREATE TABLE gas_station (open_year INTEGER)
Show all locations and the number of gas stations in each location ordered by the count.,"SELECT LOCATION, COUNT(*) FROM gas_station GROUP BY LOCATION ORDER BY COUNT(*)",CREATE TABLE gas_station (LOCATION VARCHAR)
Show all headquarters with both a company in banking industry and a company in Oil and gas.,SELECT headquarters FROM company WHERE main_industry = 'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry = 'Oil and gas',"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)"
Show all headquarters without a company in banking industry.,SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry = 'Banking',"CREATE TABLE company (headquarters VARCHAR, main_industry VARCHAR)"
Show the company name with the number of gas station.,"SELECT T2.company, COUNT(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id","CREATE TABLE station_company (company_id VARCHAR); CREATE TABLE company (company VARCHAR, company_id VARCHAR)"
Show company name and main industry without a gas station.,"SELECT company, main_industry FROM company WHERE NOT company_id IN (SELECT company_id FROM station_company)","CREATE TABLE station_company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR); CREATE TABLE company (company VARCHAR, main_industry VARCHAR, company_id VARCHAR)"
Show the manager name for gas stations belonging to the ExxonMobil company.,SELECT T3.manager_name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.company = 'ExxonMobil',"CREATE TABLE gas_station (manager_name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, company VARCHAR)"
Show all locations where a gas station for company with market value greater than 100 is located.,SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id WHERE T2.market_value > 100,"CREATE TABLE gas_station (location VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, market_value INTEGER); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR)"
Show the manager name with most number of gas stations opened after 2000.,SELECT manager_name FROM gas_station WHERE open_year > 2000 GROUP BY manager_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE gas_station (manager_name VARCHAR, open_year INTEGER)"
order all gas station locations by the opening year.,SELECT LOCATION FROM gas_station ORDER BY open_year,"CREATE TABLE gas_station (LOCATION VARCHAR, open_year VARCHAR)"
"find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.","SELECT rank, company, market_value FROM company WHERE main_industry = 'Banking' ORDER BY sales_billion, profits_billion","CREATE TABLE company (rank VARCHAR, company VARCHAR, market_value VARCHAR, main_industry VARCHAR, sales_billion VARCHAR, profits_billion VARCHAR)"
find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.,"SELECT T3.location, T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id JOIN gas_station AS T3 ON T1.station_id = T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3","CREATE TABLE gas_station (location VARCHAR, Representative_Name VARCHAR, station_id VARCHAR); CREATE TABLE station_company (company_id VARCHAR, station_id VARCHAR); CREATE TABLE company (company_id VARCHAR, Assets_billion VARCHAR)"
How many regions do we have?,SELECT COUNT(*) FROM region,CREATE TABLE region (Id VARCHAR)
Show all distinct region names ordered by their labels.,SELECT DISTINCT region_name FROM region ORDER BY Label,"CREATE TABLE region (region_name VARCHAR, Label VARCHAR)"
How many parties do we have?,SELECT COUNT(DISTINCT party_name) FROM party,CREATE TABLE party (party_name VARCHAR)
"Show the ministers and the time they took and left office, listed by the time they left office.","SELECT minister, took_office, left_office FROM party ORDER BY left_office","CREATE TABLE party (minister VARCHAR, took_office VARCHAR, left_office VARCHAR)"
Show the minister who took office after 1961 or before 1959.,SELECT minister FROM party WHERE took_office > 1961 OR took_office < 1959,"CREATE TABLE party (minister VARCHAR, took_office VARCHAR)"
Show all ministers who do not belong to Progress Party.,SELECT minister FROM party WHERE party_name <> 'Progress Party',"CREATE TABLE party (minister VARCHAR, party_name VARCHAR)"
Show all ministers and parties they belong to in descending order of the time they took office.,"SELECT minister, party_name FROM party ORDER BY took_office DESC","CREATE TABLE party (minister VARCHAR, party_name VARCHAR, took_office VARCHAR)"
Return the minister who left office at the latest time.,SELECT minister FROM party ORDER BY left_office DESC LIMIT 1,"CREATE TABLE party (minister VARCHAR, left_office VARCHAR)"
List member names and their party names.,"SELECT T1.member_name, T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id","CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)"
Show all party names and the number of members in each party.,"SELECT T2.party_name, COUNT(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id","CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)"
What is the name of party with most number of members?,SELECT T2.party_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_id VARCHAR)"
Show all party names and their region names.,"SELECT T1.party_name, T2.region_name FROM party AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id","CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE party (party_name VARCHAR, region_id VARCHAR)"
Show names of parties that does not have any members.,SELECT party_name FROM party WHERE NOT party_id IN (SELECT party_id FROM Member),"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE Member (party_name VARCHAR, party_id VARCHAR)"
Show the member names which are in both the party with id 3 and the party with id 1.,SELECT member_name FROM member WHERE party_id = 3 INTERSECT SELECT member_name FROM member WHERE party_id = 1,"CREATE TABLE member (member_name VARCHAR, party_id VARCHAR)"
Show member names that are not in the Progress Party.,"SELECT T1.member_name FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id WHERE T2.Party_name <> ""Progress Party""","CREATE TABLE party (party_id VARCHAR, Party_name VARCHAR); CREATE TABLE Member (member_name VARCHAR, party_id VARCHAR)"
How many party events do we have?,SELECT COUNT(*) FROM party_events,CREATE TABLE party_events (Id VARCHAR)
Show party names and the number of events for each party.,"SELECT T2.party_name, COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id","CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)"
Show all member names who are not in charge of any event.,SELECT member_name FROM member EXCEPT SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id,"CREATE TABLE member (member_name VARCHAR); CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)"
What are the names of parties with at least 2 events?,SELECT T2.party_name FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id HAVING COUNT(*) >= 2,"CREATE TABLE party (party_name VARCHAR, party_id VARCHAR); CREATE TABLE party_events (party_id VARCHAR)"
What is the name of member in charge of greatest number of events?,SELECT T1.member_name FROM member AS T1 JOIN party_events AS T2 ON T1.member_id = T2.member_in_charge_id GROUP BY T2.member_in_charge_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE party_events (member_in_charge_id VARCHAR); CREATE TABLE member (member_name VARCHAR, member_id VARCHAR)"
find the event names that have more than 2 records.,SELECT event_name FROM party_events GROUP BY event_name HAVING COUNT(*) > 2,CREATE TABLE party_events (event_name VARCHAR)
How many Annual Meeting events happened in the United Kingdom region?,"SELECT COUNT(*) FROM region AS t1 JOIN party AS t2 ON t1.region_id = t2.region_id JOIN party_events AS t3 ON t2.party_id = t3.party_id WHERE t1.region_name = ""United Kingdom"" AND t3.Event_Name = ""Annaual Meeting""","CREATE TABLE party_events (party_id VARCHAR, Event_Name VARCHAR); CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE party (region_id VARCHAR, party_id VARCHAR)"
How many pilots are there?,SELECT COUNT(*) FROM pilot,CREATE TABLE pilot (Id VARCHAR)
List the names of pilots in ascending order of rank.,SELECT Pilot_name FROM pilot ORDER BY Rank,"CREATE TABLE pilot (Pilot_name VARCHAR, Rank VARCHAR)"
What are the positions and teams of pilots?,"SELECT POSITION, Team FROM pilot","CREATE TABLE pilot (POSITION VARCHAR, Team VARCHAR)"
List the distinct positions of pilots older than 30.,SELECT DISTINCT POSITION FROM pilot WHERE Age > 30,"CREATE TABLE pilot (POSITION VARCHAR, Age INTEGER)"
"Show the names of pilots from team ""Bradley"" or ""Fordham"".","SELECT Pilot_name FROM pilot WHERE Team = ""Bradley"" OR Team = ""Fordham""","CREATE TABLE pilot (Pilot_name VARCHAR, Team VARCHAR)"
What is the joined year of the pilot of the highest rank?,SELECT Join_Year FROM pilot ORDER BY Rank LIMIT 1,"CREATE TABLE pilot (Join_Year VARCHAR, Rank VARCHAR)"
What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.,"SELECT Nationality, COUNT(*) FROM pilot GROUP BY Nationality",CREATE TABLE pilot (Nationality VARCHAR)
Show the most common nationality of pilots.,SELECT Nationality FROM pilot GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE pilot (Nationality VARCHAR)
Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.,SELECT POSITION FROM pilot WHERE Join_Year < 2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year > 2005,"CREATE TABLE pilot (POSITION VARCHAR, Join_Year INTEGER)"
Show the names of pilots and models of aircrafts they have flied with.,"SELECT T3.Pilot_name, T2.Model FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID","CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Model VARCHAR, Aircraft_ID VARCHAR)"
Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.,"SELECT T3.Pilot_name, T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID ORDER BY T3.Rank","CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR, Rank VARCHAR); CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)"
Show the fleet series of the aircrafts flied by pilots younger than 34,SELECT T2.Fleet_Series FROM pilot_record AS T1 JOIN aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN pilot AS T3 ON T1.Pilot_ID = T3.Pilot_ID WHERE T3.Age < 34,"CREATE TABLE pilot_record (Aircraft_ID VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_ID VARCHAR, Age INTEGER); CREATE TABLE aircraft (Fleet_Series VARCHAR, Aircraft_ID VARCHAR)"
Show the names of pilots and the number of records they have.,"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name","CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)"
Show names of pilots that have more than one record.,"SELECT T2.Pilot_name, COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID = T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*) > 1","CREATE TABLE pilot (Pilot_name VARCHAR, pilot_ID VARCHAR); CREATE TABLE pilot_record (pilot_ID VARCHAR)"
List the names of pilots that do not have any record.,SELECT Pilot_name FROM pilot WHERE NOT Pilot_ID IN (SELECT Pilot_ID FROM pilot_record),"CREATE TABLE pilot_record (Pilot_name VARCHAR, Pilot_ID VARCHAR); CREATE TABLE pilot (Pilot_name VARCHAR, Pilot_ID VARCHAR)"
What document status codes do we have?,SELECT document_status_code FROM Ref_Document_Status,CREATE TABLE Ref_Document_Status (document_status_code VARCHAR)
What is the description of document status code 'working'?,"SELECT document_status_description FROM Ref_Document_Status WHERE document_status_code = ""working""","CREATE TABLE Ref_Document_Status (document_status_description VARCHAR, document_status_code VARCHAR)"
What document type codes do we have?,SELECT document_type_code FROM Ref_Document_Types,CREATE TABLE Ref_Document_Types (document_type_code VARCHAR)
What is the description of document type 'Paper'?,"SELECT document_type_description FROM Ref_Document_Types WHERE document_type_code = ""Paper""","CREATE TABLE Ref_Document_Types (document_type_description VARCHAR, document_type_code VARCHAR)"
What are the shipping agent names?,SELECT shipping_agent_name FROM Ref_Shipping_Agents,CREATE TABLE Ref_Shipping_Agents (shipping_agent_name VARCHAR)
What is the shipping agent code of shipping agent UPS?,"SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = ""UPS""","CREATE TABLE Ref_Shipping_Agents (shipping_agent_code VARCHAR, shipping_agent_name VARCHAR)"
What are all role codes?,SELECT role_code FROM ROLES,CREATE TABLE ROLES (role_code VARCHAR)
What is the description of role code ED?,"SELECT role_description FROM ROLES WHERE role_code = ""ED""","CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR)"
How many employees do we have?,SELECT COUNT(*) FROM Employees,CREATE TABLE Employees (Id VARCHAR)
What is the role of the employee named Koby?,"SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = ""Koby""","CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR)"
List all document ids and receipt dates of documents.,"SELECT document_id, receipt_date FROM Documents","CREATE TABLE Documents (document_id VARCHAR, receipt_date VARCHAR)"
"How many employees does each role have? List role description, id and number of employees.","SELECT T1.role_description, T2.role_code, COUNT(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code","CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR); CREATE TABLE Employees (role_code VARCHAR)"
List roles that have more than one employee. List the role description and number of employees.,"SELECT Roles.role_description, COUNT(Employees.employee_id) FROM ROLES JOIN Employees ON Employees.role_code = Roles.role_code GROUP BY Employees.role_code HAVING COUNT(Employees.employee_id) > 1",CREATE TABLE ROLES (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)
What is the document status description of the document with id 1?,SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1,CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Document_Status (Id VARCHAR)
How many documents have the status code done?,"SELECT COUNT(*) FROM Documents WHERE document_status_code = ""done""",CREATE TABLE Documents (document_status_code VARCHAR)
List the document type code for the document with the id 2.,SELECT document_type_code FROM Documents WHERE document_id = 2,"CREATE TABLE Documents (document_type_code VARCHAR, document_id VARCHAR)"
List the document ids for any documents with the status code done and the type code paper.,"SELECT document_id FROM Documents WHERE document_status_code = ""done"" AND document_type_code = ""Paper""","CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)"
What is the name of the shipping agent of the document with id 2?,SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2,CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)
How many documents were shipped by USPS?,"SELECT COUNT(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = ""USPS""",CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)
Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.,"SELECT Ref_Shipping_Agents.shipping_agent_name, COUNT(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY COUNT(Documents.document_id) DESC LIMIT 1",CREATE TABLE Documents (Id VARCHAR); CREATE TABLE Ref_Shipping_Agents (Id VARCHAR)
What is the receipt date of the document with id 3?,SELECT receipt_date FROM Documents WHERE document_id = 3,"CREATE TABLE Documents (receipt_date VARCHAR, document_id VARCHAR)"
What address was the document with id 4 mailed to?,SELECT Addresses.address_details FROM Addresses JOIN Documents_Mailed ON Documents_Mailed.mailed_to_address_id = Addresses.address_id WHERE document_id = 4,CREATE TABLE Addresses (document_id VARCHAR); CREATE TABLE Documents_Mailed (document_id VARCHAR)
What is the mail date of the document with id 7?,SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7,"CREATE TABLE Documents_Mailed (mailing_date VARCHAR, document_id VARCHAR)"
"List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.","SELECT document_id FROM Documents WHERE document_status_code = ""done"" AND document_type_code = ""Paper"" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = ""USPS""","CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)"
List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.,"SELECT document_id FROM Documents WHERE document_status_code = ""done"" AND document_type_code = ""Paper"" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = ""USPS""","CREATE TABLE Ref_Shipping_Agents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_status_code VARCHAR, document_type_code VARCHAR)"
What is draft detail of the document with id 7?,SELECT draft_details FROM Document_Drafts WHERE document_id = 7,"CREATE TABLE Document_Drafts (draft_details VARCHAR, document_id VARCHAR)"
How many draft copies does the document with id 2 have?,SELECT COUNT(*) FROM Draft_Copies WHERE document_id = 2,CREATE TABLE Draft_Copies (document_id VARCHAR)
Which document has the most draft copies? List its document id and number of draft copies.,"SELECT document_id, COUNT(copy_number) FROM Draft_Copies GROUP BY document_id ORDER BY COUNT(copy_number) DESC LIMIT 1","CREATE TABLE Draft_Copies (document_id VARCHAR, copy_number VARCHAR)"
Which documents have more than 1 draft copies? List document id and number of draft copies.,"SELECT document_id, COUNT(*) FROM Draft_Copies GROUP BY document_id HAVING COUNT(*) > 1",CREATE TABLE Draft_Copies (document_id VARCHAR)
List all employees in the circulation history of the document with id 1. List the employee's name.,SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id WHERE Circulation_History.document_id = 1,CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)
List the employees who have not showed up in any circulation history of documents. List the employee's name.,SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id,CREATE TABLE Circulation_History (employee_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR)
Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.,"SELECT Employees.employee_name, COUNT(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id, Circulation_History.draft_number, Circulation_History.copy_number ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Circulation_History (Id VARCHAR); CREATE TABLE Employees (Id VARCHAR)
"For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.","SELECT document_id, COUNT(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id","CREATE TABLE Circulation_History (document_id VARCHAR, employee_id VARCHAR)"
List all department names ordered by their starting date.,SELECT dname FROM department ORDER BY mgr_start_date,"CREATE TABLE department (dname VARCHAR, mgr_start_date VARCHAR)"
find all dependent names who have a spouse relation with some employee.,SELECT Dependent_name FROM dependent WHERE relationship = 'Spouse',"CREATE TABLE dependent (Dependent_name VARCHAR, relationship VARCHAR)"
how many female dependents are there?,SELECT COUNT(*) FROM dependent WHERE sex = 'F',CREATE TABLE dependent (sex VARCHAR)
Find the names of departments that are located in Houston.,SELECT t1.dname FROM department AS t1 JOIN dept_locations AS t2 ON t1.dnumber = t2.dnumber WHERE t2.dlocation = 'Houston',"CREATE TABLE dept_locations (dnumber VARCHAR, dlocation VARCHAR); CREATE TABLE department (dname VARCHAR, dnumber VARCHAR)"
Return the first names and last names of employees who earn more than 30000 in salary.,"SELECT fname, lname FROM employee WHERE salary > 30000","CREATE TABLE employee (fname VARCHAR, lname VARCHAR, salary INTEGER)"
Find the number of employees of each gender whose salary is lower than 50000.,"SELECT COUNT(*), sex FROM employee WHERE salary < 50000 GROUP BY sex","CREATE TABLE employee (sex VARCHAR, salary INTEGER)"
"list the first and last names, and the addresses of all employees in the ascending order of their birth date.","SELECT fname, lname, address FROM employee ORDER BY Bdate","CREATE TABLE employee (fname VARCHAR, lname VARCHAR, address VARCHAR, Bdate VARCHAR)"
what are the event details of the services that have the type code 'Marriage'?,SELECT T1.event_details FROM EVENTS AS T1 JOIN Services AS T2 ON T1.Service_ID = T2.Service_ID WHERE T2.Service_Type_Code = 'Marriage',"CREATE TABLE EVENTS (event_details VARCHAR, Service_ID VARCHAR); CREATE TABLE Services (Service_ID VARCHAR, Service_Type_Code VARCHAR)"
What are the ids and details of events that have more than one participants?,"SELECT T1.event_id, T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_ID HAVING COUNT(*) > 1","CREATE TABLE EVENTS (event_id VARCHAR, event_details VARCHAR, Event_ID VARCHAR); CREATE TABLE Participants_in_Events (Event_ID VARCHAR)"
"How many events have each participants attended? List the participant id, type and the number.","SELECT T1.Participant_ID, T1.Participant_Type_Code, COUNT(*) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_ID","CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)"
"What are all the the participant ids, type code and details?","SELECT Participant_ID, Participant_Type_Code, Participant_Details FROM Participants","CREATE TABLE Participants (Participant_ID VARCHAR, Participant_Type_Code VARCHAR, Participant_Details VARCHAR)"
How many participants belong to the type 'Organizer'?,SELECT COUNT(*) FROM participants WHERE participant_type_code = 'Organizer',CREATE TABLE participants (participant_type_code VARCHAR)
List the type of the services in alphabetical order.,SELECT service_type_code FROM services ORDER BY service_type_code,CREATE TABLE services (service_type_code VARCHAR)
List the service id and details for the events.,"SELECT service_id, event_details FROM EVENTS","CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR)"
How many events had participants whose details had the substring 'Dr.',SELECT COUNT(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%',"CREATE TABLE participants (Participant_ID VARCHAR, participant_details VARCHAR); CREATE TABLE Participants_in_Events (Participant_ID VARCHAR)"
What is the most common participant type?,SELECT participant_type_code FROM participants GROUP BY participant_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE participants (participant_type_code VARCHAR)
Which service id and type has the least number of participants?,"SELECT T3.service_id, T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID = T3.Event_ID JOIN services AS T4 ON T3.service_id = T4.service_id GROUP BY T3.service_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Participants_in_Events (Participant_ID VARCHAR, Event_ID VARCHAR); CREATE TABLE services (Service_Type_Code VARCHAR, service_id VARCHAR); CREATE TABLE EVENTS (service_id VARCHAR, Event_ID VARCHAR); CREATE TABLE participants (Participant_ID VARCHAR)"
What is the id of the event with the most participants?,SELECT Event_ID FROM Participants_in_Events GROUP BY Event_ID ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Participants_in_Events (Event_ID VARCHAR)
Which events id does not have any participant with detail 'Kenyatta Kuhn'?,SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID = T2.Participant_ID WHERE Participant_Details = 'Kenyatta Kuhn',"CREATE TABLE Participants (Participant_ID VARCHAR); CREATE TABLE EVENTS (event_id VARCHAR, Participant_Details VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR, Participant_ID VARCHAR)"
Which services type had both successful and failure event details?,SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Success' INTERSECT SELECT T1.service_type_code FROM services AS T1 JOIN EVENTS AS T2 ON T1.service_id = T2.service_id WHERE T2.event_details = 'Fail',"CREATE TABLE EVENTS (service_id VARCHAR, event_details VARCHAR); CREATE TABLE services (service_type_code VARCHAR, service_id VARCHAR)"
How many events did not have any participants?,SELECT COUNT(*) FROM EVENTS WHERE NOT event_id IN (SELECT event_id FROM Participants_in_Events),CREATE TABLE EVENTS (event_id VARCHAR); CREATE TABLE Participants_in_Events (event_id VARCHAR)
What are all the distinct participant ids who attended any events?,SELECT COUNT(DISTINCT participant_id) FROM participants_in_Events,CREATE TABLE participants_in_Events (participant_id VARCHAR)
What is the name of the race held most recently?,SELECT name FROM races ORDER BY date DESC LIMIT 1,"CREATE TABLE races (name VARCHAR, date VARCHAR)"
What is the name and date of the most recent race?,"SELECT name, date FROM races ORDER BY date DESC LIMIT 1","CREATE TABLE races (name VARCHAR, date VARCHAR)"
Find the names of all races held in 2017.,SELECT name FROM races WHERE YEAR = 2017,"CREATE TABLE races (name VARCHAR, YEAR VARCHAR)"
Find the distinct names of all races held between 2014 and 2017?,SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017,"CREATE TABLE races (name VARCHAR, YEAR INTEGER)"
List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?,"SELECT DISTINCT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000","CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER)"
Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?,"SELECT DISTINCT T1.driverid, T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds > 100000","CREATE TABLE laptimes (driverid VARCHAR, milliseconds INTEGER); CREATE TABLE drivers (driverid VARCHAR, nationality VARCHAR)"
What are the forename and surname of the driver who has the smallest laptime?,"SELECT T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1","CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR)"
What is the id and family name of the driver who has the longest laptime?,"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1","CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR, milliseconds VARCHAR)"
"What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?","SELECT T1.driverid, T1.forename, T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION = '1' GROUP BY T1.driverid HAVING COUNT(*) >= 2","CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR, surname VARCHAR); CREATE TABLE laptimes (driverid VARCHAR)"
How many drivers participated in the race Australian Grand Prix held in 2009?,"SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = ""Australian Grand Prix"" AND YEAR = 2009","CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (raceid VARCHAR)"
How many drivers did not participate in the races held in 2009?,SELECT COUNT(DISTINCT driverId) FROM results WHERE NOT raceId IN (SELECT raceId FROM races WHERE YEAR <> 2009),"CREATE TABLE races (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR); CREATE TABLE results (driverId VARCHAR, raceId VARCHAR, YEAR VARCHAR)"
Give me a list of names and years of races that had any driver whose forename is Lewis?,"SELECT T2.name, T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = ""Lewis""","CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (name VARCHAR, year VARCHAR, raceid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)"
Find the forename and surname of drivers whose nationality is German?,"SELECT forename, surname FROM drivers WHERE nationality = ""German""","CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, nationality VARCHAR)"
Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?,"SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = ""Australian Grand Prix"" INTERSECT SELECT T2.driverid, T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = ""Chinese Grand Prix""","CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)"
What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?,"SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = ""Australian Grand Prix"" EXCEPT SELECT T3.forename, T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = ""Chinese Grand Prix""","CREATE TABLE races (raceid VARCHAR, name VARCHAR); CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (raceid VARCHAR, driverid VARCHAR)"
Find all the forenames of distinct drivers who was in position 1 as standing and won?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1,"CREATE TABLE driverstandings (driverid VARCHAR, position VARCHAR, wins VARCHAR); CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR)"
Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?,SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20,"CREATE TABLE drivers (forename VARCHAR, driverid VARCHAR); CREATE TABLE driverstandings (driverid VARCHAR, points VARCHAR, position VARCHAR, wins VARCHAR)"
What are the numbers of constructors for different nationalities?,"SELECT COUNT(*), nationality FROM constructors GROUP BY nationality",CREATE TABLE constructors (nationality VARCHAR)
What are the numbers of races for each constructor id?,"SELECT COUNT(*), constructorid FROM constructorStandings GROUP BY constructorid",CREATE TABLE constructorStandings (constructorid VARCHAR)
What are the names of races that were held after 2017 and the circuits were in the country of Spain?,"SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = ""Spain"" AND T1.year > 2017","CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)"
What are the unique names of races that held after 2000 and the circuits were in Spain?,"SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = ""Spain"" AND T1.year > 2000","CREATE TABLE races (name VARCHAR, circuitid VARCHAR, year VARCHAR); CREATE TABLE circuits (circuitid VARCHAR, country VARCHAR)"
Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.,"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration < (SELECT MAX(duration) FROM pitstops WHERE raceid = 841)","CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)"
Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?,"SELECT DISTINCT driverid, STOP FROM pitstops WHERE duration > (SELECT MIN(duration) FROM pitstops WHERE raceid = 841)","CREATE TABLE pitstops (driverid VARCHAR, STOP VARCHAR, duration INTEGER, raceid VARCHAR)"
List the forenames of all distinct drivers in alphabetical order?,SELECT DISTINCT forename FROM drivers ORDER BY forename,CREATE TABLE drivers (forename VARCHAR)
List the names of all distinct races in reversed  lexicographic order?,SELECT DISTINCT name FROM races ORDER BY name DESC,CREATE TABLE races (name VARCHAR)
What are the names of races held between 2009 and 2011?,SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011,"CREATE TABLE races (name VARCHAR, YEAR INTEGER)"
What are the names of races held after 12:00:00 or before 09:00:00?,"SELECT name FROM races WHERE TIME > ""12:00:00"" OR TIME < ""09:00:00""","CREATE TABLE races (name VARCHAR, TIME VARCHAR)"
"What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?","SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 8 UNION SELECT T1.forename, T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","CREATE TABLE drivers (forename VARCHAR, surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)"
What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?,"SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) = 11 INTERSECT SELECT T1.surname, T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid GROUP BY T1.driverid HAVING COUNT(*) > 5","CREATE TABLE drivers (surname VARCHAR, driverid VARCHAR); CREATE TABLE results (driverid VARCHAR); CREATE TABLE pitstops (driverid VARCHAR)"
What is the id and last name of the driver who participated in the most races after 2010?,"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR, year INTEGER); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)"
What are the names of circuits that belong to UK or Malaysia?,"SELECT name FROM circuits WHERE country = ""UK"" OR country = ""Malaysia""","CREATE TABLE circuits (name VARCHAR, country VARCHAR)"
Find the id and location of circuits that belong to France or Belgium?,"SELECT circuitid, LOCATION FROM circuits WHERE country = ""France"" OR country = ""Belgium""","CREATE TABLE circuits (circuitid VARCHAR, LOCATION VARCHAR, country VARCHAR)"
Find the names of Japanese constructors that have once earned more than 5 points?,"SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = ""Japanese"" AND T2.points > 5","CREATE TABLE constructorstandings (constructorid VARCHAR, points VARCHAR); CREATE TABLE constructors (name VARCHAR, constructorid VARCHAR, nationality VARCHAR)"
What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,"SELECT AVG(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = ""Monaco Grand Prix""","CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)"
What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?,"SELECT MAX(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = ""Monaco Grand Prix""","CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (raceid VARCHAR, year VARCHAR, name VARCHAR)"
What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?,"SELECT MAX(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)"
What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?,"SELECT AVG(T2.fastestlapspeed), T1.name, T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year","CREATE TABLE results (fastestlapspeed INTEGER, raceid VARCHAR); CREATE TABLE races (name VARCHAR, year INTEGER, raceid VARCHAR)"
"Find the id, forename and number of races of all drivers who have at least participated in two races?","SELECT T1.driverid, T1.forename, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) >= 2","CREATE TABLE drivers (driverid VARCHAR, forename VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)"
Find the driver id and number of races of all drivers who have at most participated in 30 races?,"SELECT T1.driverid, COUNT(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING COUNT(*) <= 30","CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR); CREATE TABLE drivers (driverid VARCHAR)"
Find the id and surname of the driver who participated the most number of races?,"SELECT T1.driverid, T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE drivers (driverid VARCHAR, surname VARCHAR); CREATE TABLE races (raceid VARCHAR); CREATE TABLE results (driverid VARCHAR, raceid VARCHAR)"
How many technicians are there?,SELECT COUNT(*) FROM technician,CREATE TABLE technician (Id VARCHAR)
List the names of technicians in ascending order of age.,SELECT Name FROM technician ORDER BY Age,"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)"
What are the team and starting year of technicians?,"SELECT Team, Starting_Year FROM technician","CREATE TABLE technician (Team VARCHAR, Starting_Year VARCHAR)"
"List the name of technicians whose team is not ""NYY"".","SELECT Name FROM technician WHERE Team <> ""NYY""","CREATE TABLE technician (Name VARCHAR, Team VARCHAR)"
Show the name of technicians aged either 36 or 37,SELECT Name FROM technician WHERE Age = 36 OR Age = 37,"CREATE TABLE technician (Name VARCHAR, Age VARCHAR)"
What is the starting year of the oldest technicians?,SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1,"CREATE TABLE technician (Starting_Year VARCHAR, Age VARCHAR)"
Show different teams of technicians and the number of technicians in each team.,"SELECT Team, COUNT(*) FROM technician GROUP BY Team",CREATE TABLE technician (Team VARCHAR)
Please show the team that has the most number of technicians.,SELECT Team FROM technician GROUP BY Team ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE technician (Team VARCHAR)
Show the team that have at least two technicians.,SELECT Team FROM technician GROUP BY Team HAVING COUNT(*) >= 2,CREATE TABLE technician (Team VARCHAR)
Show names of technicians and series of machines they are assigned to repair.,"SELECT T3.Name, T2.Machine_series FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID","CREATE TABLE machine (Machine_series VARCHAR, machine_id VARCHAR); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)"
Show names of technicians in ascending order of quality rank of the machine they are assigned.,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID ORDER BY T2.quality_rank,"CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE machine (machine_id VARCHAR, quality_rank VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)"
Show names of technicians who are assigned to repair machines with value point more than 70.,SELECT T3.Name FROM repair_assignment AS T1 JOIN machine AS T2 ON T1.machine_id = T2.machine_id JOIN technician AS T3 ON T1.technician_ID = T3.technician_ID WHERE T2.value_points > 70,"CREATE TABLE machine (machine_id VARCHAR, value_points INTEGER); CREATE TABLE repair_assignment (machine_id VARCHAR, technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)"
Show names of technicians and the number of machines they are assigned to repair.,"SELECT T2.Name, COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID = T2.technician_ID GROUP BY T2.Name","CREATE TABLE repair_assignment (technician_ID VARCHAR); CREATE TABLE technician (Name VARCHAR, technician_ID VARCHAR)"
List the names of technicians who have not been assigned to repair machines.,SELECT Name FROM technician WHERE NOT technician_id IN (SELECT technician_id FROM repair_assignment),"CREATE TABLE technician (Name VARCHAR, technician_id VARCHAR); CREATE TABLE repair_assignment (Name VARCHAR, technician_id VARCHAR)"
"Show the starting years shared by technicians from team ""CLE"" and ""CWS"".","SELECT Starting_Year FROM technician WHERE Team = ""CLE"" INTERSECT SELECT Starting_Year FROM technician WHERE Team = ""CWS""","CREATE TABLE technician (Starting_Year VARCHAR, Team VARCHAR)"
How many entrepreneurs are there?,SELECT COUNT(*) FROM entrepreneur,CREATE TABLE entrepreneur (Id VARCHAR)
List the companies of entrepreneurs in descending order of money requested.,SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC,"CREATE TABLE entrepreneur (Company VARCHAR, Money_Requested VARCHAR)"
List the companies and the investors of entrepreneurs.,"SELECT Company, Investor FROM entrepreneur","CREATE TABLE entrepreneur (Company VARCHAR, Investor VARCHAR)"
What is the average money requested by all entrepreneurs?,SELECT AVG(Money_Requested) FROM entrepreneur,CREATE TABLE entrepreneur (Money_Requested INTEGER)
What are the names of people in ascending order of weight?,SELECT Name FROM People ORDER BY Weight,"CREATE TABLE People (Name VARCHAR, Weight VARCHAR)"
What are the names of entrepreneurs?,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID,"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)"
"What are the names of entrepreneurs whose investor is not ""Rachel Elnaugh""?","SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor <> ""Rachel Elnaugh""","CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What is the weight of the shortest person?,SELECT Weight FROM people ORDER BY Height LIMIT 1,"CREATE TABLE people (Weight VARCHAR, Height VARCHAR)"
What is the name of the entrepreneur with the greatest weight?,SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight DESC LIMIT 1,"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR); CREATE TABLE entrepreneur (People_ID VARCHAR)"
What is the total money requested by entrepreneurs with height more than 1.85?,SELECT SUM(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Height > 1.85,"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE entrepreneur (Money_Requested INTEGER, People_ID VARCHAR)"
"What are the dates of birth of entrepreneurs with investor ""Simon Woodroffe"" or ""Peter Jones""?","SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Investor = ""Simon Woodroffe"" OR T1.Investor = ""Peter Jones""","CREATE TABLE entrepreneur (People_ID VARCHAR, Investor VARCHAR); CREATE TABLE people (Date_of_Birth VARCHAR, People_ID VARCHAR)"
What are the weights of entrepreneurs in descending order of money requested?,SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested DESC,"CREATE TABLE entrepreneur (People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Weight VARCHAR, People_ID VARCHAR)"
What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?,"SELECT Investor, COUNT(*) FROM entrepreneur GROUP BY Investor",CREATE TABLE entrepreneur (Investor VARCHAR)
What is the investor that has invested in the most number of entrepreneurs?,SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE entrepreneur (Investor VARCHAR)
What are the investors that have invested in at least two entrepreneurs?,SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*) >= 2,CREATE TABLE entrepreneur (Investor VARCHAR)
List the names of entrepreneurs and their companies in descending order of money requested?,"SELECT T2.Name, T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Money_Requested","CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR, Money_Requested VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
List the names of people that are not entrepreneurs.,SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM entrepreneur),"CREATE TABLE entrepreneur (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.,SELECT Investor FROM entrepreneur WHERE Money_Requested > 140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < 120000,"CREATE TABLE entrepreneur (Investor VARCHAR, Money_Requested INTEGER)"
How many distinct companies are there?,SELECT COUNT(DISTINCT Company) FROM entrepreneur,CREATE TABLE entrepreneur (Company VARCHAR)
Show the company of the tallest entrepreneur.,SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Height DESC LIMIT 1,"CREATE TABLE entrepreneur (Company VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)"
How many perpetrators are there?,SELECT COUNT(*) FROM perpetrator,CREATE TABLE perpetrator (Id VARCHAR)
List the date of perpetrators in descending order of the number of people killed.,SELECT Date FROM perpetrator ORDER BY Killed DESC,"CREATE TABLE perpetrator (Date VARCHAR, Killed VARCHAR)"
List the number of people injured by perpetrators in ascending order.,SELECT Injured FROM perpetrator ORDER BY Injured,CREATE TABLE perpetrator (Injured VARCHAR)
What is the average number of people injured by all perpetrators?,SELECT AVG(Injured) FROM perpetrator,CREATE TABLE perpetrator (Injured INTEGER)
What is the location of the perpetrator with the largest kills.,SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1,"CREATE TABLE perpetrator (LOCATION VARCHAR, Killed VARCHAR)"
What are the names of people in ascending order of height?,SELECT Name FROM People ORDER BY Height,"CREATE TABLE People (Name VARCHAR, Height VARCHAR)"
What are the names of perpetrators?,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID,"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
"What are the names of perpetrators whose country is not ""China""?","SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country <> ""China""","CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What is the name of the perpetrator with the biggest weight.,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Weight DESC LIMIT 1,"CREATE TABLE perpetrator (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR, Weight VARCHAR)"
What is the total kills of the perpetrators with height more than 1.84.,SELECT SUM(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 1.84,"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE perpetrator (Killed INTEGER, People_ID VARCHAR)"
"What are the names of perpetrators in country ""China"" or ""Japan""?","SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Country = ""China"" OR T2.Country = ""Japan""","CREATE TABLE perpetrator (People_ID VARCHAR, Country VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What are the heights of perpetrators in descending order of the number of people they injured?,SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Injured DESC,"CREATE TABLE perpetrator (People_ID VARCHAR, Injured VARCHAR); CREATE TABLE people (Height VARCHAR, People_ID VARCHAR)"
What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.,"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country",CREATE TABLE perpetrator (Country VARCHAR)
What is the country that has the most perpetrators?,"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE perpetrator (Country VARCHAR)
What are the countries that have at least two perpetrators?,"SELECT Country, COUNT(*) FROM perpetrator GROUP BY Country HAVING COUNT(*) >= 2",CREATE TABLE perpetrator (Country VARCHAR)
List the names of perpetrators in descending order of the year.,SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Year DESC,"CREATE TABLE perpetrator (People_ID VARCHAR, Year VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
List the names of people that are not perpetrators.,SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM perpetrator),"CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE perpetrator (Name VARCHAR, People_ID VARCHAR)"
Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.,SELECT Country FROM perpetrator WHERE Injured > 50 INTERSECT SELECT Country FROM perpetrator WHERE Injured < 20,"CREATE TABLE perpetrator (Country VARCHAR, Injured INTEGER)"
How many distinct locations of perpetrators are there?,SELECT COUNT(DISTINCT LOCATION) FROM perpetrator,CREATE TABLE perpetrator (LOCATION VARCHAR)
Show the date of the tallest perpetrator.,SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"CREATE TABLE perpetrator (Date VARCHAR, People_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR, Height VARCHAR)"
In which year did the most recent crime happen?,SELECT MAX(YEAR) FROM perpetrator,CREATE TABLE perpetrator (YEAR INTEGER)
Report the name of all campuses in Los Angeles county.,"SELECT campus FROM campuses WHERE county = ""Los Angeles""","CREATE TABLE campuses (campus VARCHAR, county VARCHAR)"
What are the names of all campuses located at Chico?,"SELECT campus FROM campuses WHERE LOCATION = ""Chico""","CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR)"
Find all the campuses opened in 1958.,SELECT campus FROM campuses WHERE YEAR = 1958,"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)"
Find the name of the campuses opened before 1800.,SELECT campus FROM campuses WHERE YEAR < 1800,"CREATE TABLE campuses (campus VARCHAR, YEAR INTEGER)"
Which campus was opened between 1935 and 1939?,SELECT campus FROM campuses WHERE YEAR >= 1935 AND YEAR <= 1939,"CREATE TABLE campuses (campus VARCHAR, YEAR VARCHAR)"
"Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.","SELECT campus FROM campuses WHERE LOCATION = ""Northridge"" AND county = ""Los Angeles"" UNION SELECT campus FROM campuses WHERE LOCATION = ""San Francisco"" AND county = ""San Francisco""","CREATE TABLE campuses (campus VARCHAR, LOCATION VARCHAR, county VARCHAR)"
"What is the campus fee of ""San Jose State University"" in year 1996?","SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = ""San Jose State University"" AND T2.year = 1996",CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)
"What is the campus fee of ""San Francisco State University"" in year 1996?","SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id = t2.campus WHERE t1.campus = ""San Francisco State University"" AND T2.year = 1996",CREATE TABLE csu_fees (year VARCHAR); CREATE TABLE campuses (id VARCHAR)
Find the count of universities whose campus fee is greater than the average campus fee.,SELECT COUNT(*) FROM csu_fees WHERE campusfee > (SELECT AVG(campusfee) FROM csu_fees),CREATE TABLE csu_fees (campusfee INTEGER)
Which university is in Los Angeles county and opened after 1950?,"SELECT campus FROM campuses WHERE county = ""Los Angeles"" AND YEAR > 1950","CREATE TABLE campuses (campus VARCHAR, county VARCHAR, YEAR VARCHAR)"
Which year has the most degrees conferred?,SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY SUM(degrees) DESC LIMIT 1,"CREATE TABLE degrees (YEAR VARCHAR, degrees INTEGER)"
Which campus has the most degrees conferred in all times?,SELECT campus FROM degrees GROUP BY campus ORDER BY SUM(degrees) DESC LIMIT 1,"CREATE TABLE degrees (campus VARCHAR, degrees INTEGER)"
Which campus has the most faculties in year 2003?,SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2003 ORDER BY T2.faculty DESC LIMIT 1,"CREATE TABLE faculty (campus VARCHAR, year VARCHAR, faculty VARCHAR); CREATE TABLE campuses (campus VARCHAR, id VARCHAR)"
Find the average fee on a CSU campus in 1996,SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 1996,"CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)"
What is the average fee on a CSU campus in 2005?,SELECT AVG(campusfee) FROM csu_fees WHERE YEAR = 2005,"CREATE TABLE csu_fees (campusfee INTEGER, YEAR VARCHAR)"
report the total number of degrees granted between 1998 and 2002.,"SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T2.year >= 1998 AND T2.year <= 2002 GROUP BY T1.campus","CREATE TABLE campuses (campus VARCHAR, id VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)"
"For each Orange county campus, report the number of degrees granted after 2000.","SELECT T1.campus, SUM(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id = T2.campus WHERE T1.county = ""Orange"" AND T2.year >= 2000 GROUP BY T1.campus","CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE degrees (degrees INTEGER, campus VARCHAR, year VARCHAR)"
Find the names of the campus which has more faculties in 2002 than every campus in Orange county.,"SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND faculty > (SELECT MAX(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = T2.campus WHERE T2.year = 2002 AND T1.county = ""Orange"")","CREATE TABLE campuses (campus VARCHAR, id VARCHAR, county VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)"
What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?,SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id = t2.campus WHERE t2.year = 1956 AND totalenrollment_ay > 400 AND FTE_AY > 200,"CREATE TABLE enrollments (campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR)"
How many campuses are there in Los Angeles county?,"SELECT COUNT(*) FROM campuses WHERE county = ""Los Angeles""",CREATE TABLE campuses (county VARCHAR)
"How many degrees were conferred in ""San Jose State University"" in 2000?","SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = ""San Jose State University"" AND t2.year = 2000",CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)
"What are the degrees conferred in ""San Francisco State University"" in 2001.","SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id = t2.campus WHERE t1.campus = ""San Francisco State University"" AND t2.year = 2001",CREATE TABLE degrees (Id VARCHAR); CREATE TABLE campuses (Id VARCHAR)
How many faculty is there in total in the year of 2002?,SELECT SUM(faculty) FROM faculty WHERE YEAR = 2002,"CREATE TABLE faculty (faculty INTEGER, YEAR VARCHAR)"
"What is the number of faculty lines in campus ""Long Beach State University"" in 2002?","SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2002 AND T2.campus = ""Long Beach State University""","CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)"
"How many faculty lines are there in ""San Francisco State University"" in year 2004?","SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus = T2.id WHERE T1.year = 2004 AND T2.campus = ""San Francisco State University""","CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE faculty (campus VARCHAR, year VARCHAR)"
List the campus that have between 600 and 1000 faculty lines in year 2004.,SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id = t2.campus WHERE t2.faculty >= 600 AND t2.faculty <= 1000 AND T1.year = 2004,"CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (campus VARCHAR, faculty VARCHAR)"
How many faculty lines are there in the university that conferred the most number of degrees in year 2002?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2002 ORDER BY t3.degrees DESC LIMIT 1,CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)
How many faculty lines are there in the university that conferred the least number of degrees in year 2001?,SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id = t2.campus JOIN degrees AS T3 ON T1.id = t3.campus AND t2.year = t3.year WHERE t2.year = 2001 ORDER BY t3.degrees LIMIT 1,CREATE TABLE campuses (id VARCHAR); CREATE TABLE faculty (faculty VARCHAR); CREATE TABLE degrees (Id VARCHAR)
"How many undergraduates are there in ""San Jose State University"" in year 2004?","SELECT SUM(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = ""San Jose State University""","CREATE TABLE discipline_enrollments (undergraduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)"
"What is the number of graduates in ""San Francisco State University"" in year 2004?","SELECT SUM(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t1.year = 2004 AND t2.campus = ""San Francisco State University""","CREATE TABLE discipline_enrollments (graduate INTEGER, campus VARCHAR, year VARCHAR); CREATE TABLE campuses (id VARCHAR, campus VARCHAR)"
"What is the campus fee of ""San Francisco State University"" in year 2000?","SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = ""San Francisco State University"" AND t1.year = 2000","CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)"
"Find the campus fee of ""San Jose State University"" in year 2000.","SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus = t2.id WHERE t2.campus = ""San Jose State University"" AND t1.year = 2000","CREATE TABLE campuses (id VARCHAR, campus VARCHAR); CREATE TABLE csu_fees (campusfee VARCHAR, campus VARCHAR, year VARCHAR)"
How many CSU campuses are there?,SELECT COUNT(*) FROM campuses,CREATE TABLE campuses (Id VARCHAR)
How many candidates are there?,SELECT COUNT(*) FROM candidate,CREATE TABLE candidate (Id VARCHAR)
Which poll resource provided the most number of candidate information?,SELECT poll_source FROM candidate GROUP BY poll_source ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE candidate (poll_source VARCHAR)
what are the top 3 highest support rates?,SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3,CREATE TABLE candidate (support_rate VARCHAR)
Find the id of the candidate who got the lowest oppose rate.,SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1,"CREATE TABLE candidate (Candidate_ID VARCHAR, oppose_rate VARCHAR)"
"Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.","SELECT Support_rate, Consider_rate, Oppose_rate FROM candidate ORDER BY unsure_rate","CREATE TABLE candidate (Support_rate VARCHAR, Consider_rate VARCHAR, Oppose_rate VARCHAR, unsure_rate VARCHAR)"
which poll source does the highest oppose rate come from?,SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1,"CREATE TABLE candidate (poll_source VARCHAR, oppose_rate VARCHAR)"
List all people names in the order of their date of birth from old to young.,SELECT name FROM people ORDER BY date_of_birth,"CREATE TABLE people (name VARCHAR, date_of_birth VARCHAR)"
Find the average height and weight for all males (sex is M).,"SELECT AVG(height), AVG(weight) FROM people WHERE sex = 'M'","CREATE TABLE people (height INTEGER, weight INTEGER, sex VARCHAR)"
find the names of people who are taller than 200 or lower than 190.,SELECT name FROM people WHERE height > 200 OR height < 190,"CREATE TABLE people (name VARCHAR, height VARCHAR)"
Find the average and minimum weight for each gender.,"SELECT AVG(weight), MIN(weight), sex FROM people GROUP BY sex","CREATE TABLE people (sex VARCHAR, weight INTEGER)"
Find the name and gender of the candidate who got the highest support rate.,"SELECT t1.name, t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id ORDER BY t2.support_rate DESC LIMIT 1","CREATE TABLE candidate (people_id VARCHAR, support_rate VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)"
Find the name of the candidates whose oppose percentage is the lowest for each sex.,"SELECT t1.name, t1.sex, MIN(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex","CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, sex VARCHAR, people_id VARCHAR)"
which gender got the highest average uncertain ratio.,SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id GROUP BY t1.sex ORDER BY AVG(t2.unsure_rate) DESC LIMIT 1,"CREATE TABLE candidate (people_id VARCHAR, unsure_rate INTEGER); CREATE TABLE people (sex VARCHAR, people_id VARCHAR)"
what are the names of people who did not participate in the candidate election.,SELECT name FROM people WHERE NOT people_id IN (SELECT people_id FROM candidate),"CREATE TABLE candidate (name VARCHAR, people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)"
Find the names of the candidates whose support percentage is lower than their oppose rate.,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t2.support_rate < t2.oppose_rate,"CREATE TABLE candidate (people_id VARCHAR, support_rate INTEGER, oppose_rate VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR)"
how many people are there whose weight is higher than 85 for each gender?,"SELECT COUNT(*), sex FROM people WHERE weight > 85 GROUP BY sex","CREATE TABLE people (sex VARCHAR, weight INTEGER)"
"find the highest support percentage, lowest consider rate and oppose rate of all candidates.","SELECT MAX(support_rate), MIN(consider_rate), MIN(oppose_rate) FROM candidate","CREATE TABLE candidate (support_rate INTEGER, consider_rate INTEGER, oppose_rate INTEGER)"
list all female (sex is F) candidate names in the alphabetical order.,SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id = t2.people_id WHERE t1.sex = 'F' ORDER BY t1.name,"CREATE TABLE candidate (people_id VARCHAR); CREATE TABLE people (name VARCHAR, people_id VARCHAR, sex VARCHAR)"
find the name of people whose height is lower than the average.,SELECT name FROM people WHERE height < (SELECT AVG(height) FROM people),"CREATE TABLE people (name VARCHAR, height INTEGER)"
List all info about all people.,SELECT * FROM people,CREATE TABLE people (Id VARCHAR)
Find the titles of all movies directed by steven spielberg.,SELECT title FROM Movie WHERE director = 'Steven Spielberg',"CREATE TABLE Movie (title VARCHAR, director VARCHAR)"
What is the name of the movie produced after 2000 and directed by James Cameron?,SELECT title FROM Movie WHERE director = 'James Cameron' AND YEAR > 2000,"CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)"
How many movies were made before 2000?,SELECT COUNT(*) FROM Movie WHERE YEAR < 2000,CREATE TABLE Movie (YEAR INTEGER)
Who is the director of movie Avatar?,SELECT director FROM Movie WHERE title = 'Avatar',"CREATE TABLE Movie (director VARCHAR, title VARCHAR)"
How many reviewers listed?,SELECT COUNT(*) FROM Reviewer,CREATE TABLE Reviewer (Id VARCHAR)
What is the id of the reviewer whose name has substring “Mike”?,"SELECT rID FROM Reviewer WHERE name LIKE ""%Mike%""","CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)"
What is the reviewer id of Daniel Lewis?,"SELECT rID FROM Reviewer WHERE name = ""Daniel Lewis""","CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR)"
What is the total number of ratings that has more than 3 stars?,SELECT COUNT(*) FROM Rating WHERE stars > 3,CREATE TABLE Rating (stars INTEGER)
What is the lowest and highest rating star?,"SELECT MAX(stars), MIN(stars) FROM Rating",CREATE TABLE Rating (stars INTEGER)
"Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order of year.",SELECT DISTINCT YEAR FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars >= 4 ORDER BY T1.year,"CREATE TABLE Movie (mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)"
What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.,"SELECT T1.director, T1.title FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID WHERE T2.stars = 5","CREATE TABLE Movie (director VARCHAR, title VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars VARCHAR)"
What is the average rating star for each reviewer?,"SELECT T2.name, AVG(T1.stars) FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T2.name","CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (stars INTEGER, rID VARCHAR)"
Find the titles of all movies that have no ratings.,SELECT title FROM Movie WHERE NOT mID IN (SELECT mID FROM Rating),"CREATE TABLE Rating (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
Find the names of all reviewers who have ratings with a NULL value for the date.,"SELECT DISTINCT name FROM Reviewer AS T1 JOIN Rating AS T2 ON T1.rID = T2.rID WHERE ratingDate = ""null""",CREATE TABLE Rating (rID VARCHAR); CREATE TABLE Reviewer (rID VARCHAR)
What is the average rating stars and title for the oldest movie?,"SELECT AVG(T1.stars), T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MIN(YEAR) FROM Movie)","CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER)"
What is the name of the most recent movie?,SELECT title FROM Movie WHERE YEAR = (SELECT MAX(YEAR) FROM Movie),"CREATE TABLE Movie (title VARCHAR, YEAR INTEGER)"
What is the maximum stars and year for the most recent movie?,"SELECT MAX(T1.stars), T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.year = (SELECT MAX(YEAR) FROM Movie)","CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (YEAR INTEGER); CREATE TABLE Movie (year VARCHAR, mID VARCHAR)"
What is the names of movies whose created year is after all movies directed by Steven Spielberg?,"SELECT title FROM Movie WHERE YEAR > (SELECT MAX(YEAR) FROM Movie WHERE director = ""Steven Spielberg"")","CREATE TABLE Movie (title VARCHAR, YEAR INTEGER, director VARCHAR)"
What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?,"SELECT T2.title, T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars > (SELECT AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director = ""James Cameron"")","CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)"
"Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.","SELECT T3.name, T2.title, T1.stars, T1.ratingDate FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID ORDER BY T3.name, T2.title, T1.stars","CREATE TABLE Rating (stars VARCHAR, ratingDate VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
Find the names of all reviewers who have contributed three or more ratings.,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID GROUP BY T1.rID HAVING COUNT(*) >= 3,"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR)"
Find the names of all reviewers who rated Gone with the Wind.,SELECT DISTINCT T3.name FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.title = 'Gone with the Wind',"CREATE TABLE Movie (mID VARCHAR, title VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
Find the names of all directors whose movies are rated by Sarah Martinez.,SELECT DISTINCT T2.director FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Sarah Martinez',"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
"For any rating where the name of reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.","SELECT DISTINCT T3.name, T2.title, T1.stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T2.director = T3.name","CREATE TABLE Rating (stars VARCHAR, mID VARCHAR, rID VARCHAR); CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, director VARCHAR)"
Return all reviewer names and movie names together in a single list.,SELECT name FROM Reviewer UNION SELECT title FROM Movie,"CREATE TABLE Reviewer (name VARCHAR, title VARCHAR); CREATE TABLE Movie (name VARCHAR, title VARCHAR)"
Find the titles of all movies not reviewed by Chris Jackson.,SELECT DISTINCT title FROM Movie EXCEPT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Chris Jackson',"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR); CREATE TABLE Movie (title VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
"For all directors who directed more than one movie, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title.","SELECT T1.title, T1.director FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title ORDER BY T1.director, T1.title","CREATE TABLE Movie (title VARCHAR, director VARCHAR); CREATE TABLE Movie (director VARCHAR, title VARCHAR)"
"For directors who had more than one movie, return the titles and produced years of all movies directed by them.","SELECT T1.title, T1.year FROM Movie AS T1 JOIN Movie AS T2 ON T1.director = T2.director WHERE T1.title <> T2.title","CREATE TABLE Movie (director VARCHAR, title VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, director VARCHAR)"
What are the names of the directors who made exactly one movie?,SELECT director FROM Movie GROUP BY director HAVING COUNT(*) = 1,CREATE TABLE Movie (director VARCHAR)
What are the names of the directors who made exactly one movie excluding director NULL?,"SELECT director FROM Movie WHERE director <> ""null"" GROUP BY director HAVING COUNT(*) = 1",CREATE TABLE Movie (director VARCHAR)
How many movie reviews does each director get?,"SELECT COUNT(*), T1.director FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director","CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (director VARCHAR, mID VARCHAR)"
Find the movies with the highest average rating. Return the movie titles and average rating.,"SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) DESC LIMIT 1","CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
What are the movie titles and average rating of the movies with the lowest average rating?,"SELECT T2.title, AVG(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY AVG(T1.stars) LIMIT 1","CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
What are the names and years of the movies that has the top 3 highest rating star?,"SELECT T2.title, T2.year FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY T1.stars DESC LIMIT 3","CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, year VARCHAR, mID VARCHAR)"
"For each director, return the director's name together with the title of the movie they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.","SELECT T2.title, T1.stars, T2.director, MAX(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> ""null"" GROUP BY director","CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)"
Find the title and star rating of the movie that got the least rating star for each reviewer.,"SELECT T2.title, T1.rID, T1.stars, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.rID","CREATE TABLE Rating (rID VARCHAR, stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
Find the title and score of the movie with the lowest rating among all movies directed by each director.,"SELECT T2.title, T1.stars, T2.director, MIN(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T2.director","CREATE TABLE Rating (stars INTEGER, mID VARCHAR); CREATE TABLE Movie (title VARCHAR, director VARCHAR, mID VARCHAR)"
What is the name of the movie that is rated by most of times?,"SELECT T2.title, T1.mID FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY T1.mID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
What are the titles of all movies that have rating star is between 3 and 5?,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars BETWEEN 3 AND 5,"CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
Find the names of reviewers who had given higher than 3 star ratings.,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars > 3,"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars INTEGER)"
Find the average rating star for each movie that are not reviewed by Brittany Harris.,"SELECT mID, AVG(stars) FROM Rating WHERE NOT mID IN (SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = ""Brittany Harris"") GROUP BY mID","CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR, stars INTEGER); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
What are the ids of the movies that are not reviewed by Brittany Harris.,"SELECT mID FROM Rating EXCEPT SELECT T1.mID FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T2.name = ""Brittany Harris""","CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Rating (mID VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
Find the average rating star for each movie that received at least 2 ratings.,"SELECT mID, AVG(stars) FROM Rating GROUP BY mID HAVING COUNT(*) >= 2","CREATE TABLE Rating (mID VARCHAR, stars INTEGER)"
find the ids of reviewers who did not give 4 star.,SELECT rID FROM Rating EXCEPT SELECT rID FROM Rating WHERE stars = 4,"CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)"
Find the ids of reviewers who didn't only give 4 star.,SELECT rID FROM Rating WHERE stars <> 4,"CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)"
What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?,SELECT DISTINCT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID JOIN Reviewer AS T3 ON T1.rID = T3.rID WHERE T3.name = 'Brittany Harris' OR T2.year > 2000,"CREATE TABLE Reviewer (rID VARCHAR, name VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR, year VARCHAR); CREATE TABLE Rating (mID VARCHAR, rID VARCHAR)"
What are names of the movies that are either made before 1980 or directed by James Cameron?,"SELECT title FROM Movie WHERE director = ""James Cameron"" OR YEAR < 1980","CREATE TABLE Movie (title VARCHAR, director VARCHAR, YEAR VARCHAR)"
What are the names of reviewers who had rated 3 star and 4 star?,SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 3 INTERSECT SELECT T2.name FROM Rating AS T1 JOIN Reviewer AS T2 ON T1.rID = T2.rID WHERE T1.stars = 4,"CREATE TABLE Reviewer (name VARCHAR, rID VARCHAR); CREATE TABLE Rating (rID VARCHAR, stars VARCHAR)"
What are the names of movies that get 3 star and 4 star?,SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 3 INTERSECT SELECT T2.title FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T1.stars = 4,"CREATE TABLE Rating (mID VARCHAR, stars VARCHAR); CREATE TABLE Movie (title VARCHAR, mID VARCHAR)"
How many counties are there?,SELECT COUNT(*) FROM county_public_safety,CREATE TABLE county_public_safety (Id VARCHAR)
List the names of counties in descending order of population.,SELECT Name FROM county_public_safety ORDER BY Population DESC,"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)"
List the distinct police forces of counties whose location is not on east side.,"SELECT DISTINCT Police_force FROM county_public_safety WHERE LOCATION <> ""East""","CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)"
What are the minimum and maximum crime rate of counties?,"SELECT MIN(Crime_rate), MAX(Crime_rate) FROM county_public_safety",CREATE TABLE county_public_safety (Crime_rate INTEGER)
Show the crime rates of counties in ascending order of number of police officers.,SELECT Crime_rate FROM county_public_safety ORDER BY Police_officers,"CREATE TABLE county_public_safety (Crime_rate VARCHAR, Police_officers VARCHAR)"
What are the names of cities in ascending alphabetical order?,SELECT Name FROM city ORDER BY Name,CREATE TABLE city (Name VARCHAR)
What are the percentage of hispanics in cities with the black percentage higher than 10?,SELECT Hispanic FROM city WHERE Black > 10,"CREATE TABLE city (Hispanic VARCHAR, Black INTEGER)"
List the name of the county with the largest population.,SELECT Name FROM county_public_safety ORDER BY Population DESC LIMIT 1,"CREATE TABLE county_public_safety (Name VARCHAR, Population VARCHAR)"
List the names of the city with the top 5 white percentages.,SELECT Name FROM city ORDER BY White DESC LIMIT 5,"CREATE TABLE city (Name VARCHAR, White VARCHAR)"
Show names of cities and names of counties they are in.,"SELECT T1.Name, T2.Name FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)"
Show white percentages of cities and the crime rates of counties they are in.,"SELECT T1.White, T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID","CREATE TABLE city (White VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR)"
Show the name of cities in the county that has the largest number of police officers.,SELECT name FROM city WHERE county_ID = (SELECT county_ID FROM county_public_safety ORDER BY Police_officers DESC LIMIT 1),"CREATE TABLE city (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR); CREATE TABLE county_public_safety (name VARCHAR, county_ID VARCHAR, Police_officers VARCHAR)"
Show the number of cities in counties that have a population more than 20000.,SELECT COUNT(*) FROM city WHERE county_ID IN (SELECT county_ID FROM county_public_safety WHERE population > 20000),"CREATE TABLE county_public_safety (county_ID VARCHAR, population INTEGER); CREATE TABLE city (county_ID VARCHAR, population INTEGER)"
Show the crime rate of counties with a city having white percentage more than 90.,SELECT T2.Crime_rate FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID WHERE T1.White > 90,"CREATE TABLE county_public_safety (Crime_rate VARCHAR, County_ID VARCHAR); CREATE TABLE city (County_ID VARCHAR, White INTEGER)"
Please show the police forces and the number of counties with each police force.,"SELECT Police_force, COUNT(*) FROM county_public_safety GROUP BY Police_force",CREATE TABLE county_public_safety (Police_force VARCHAR)
What is the location shared by most counties?,SELECT LOCATION FROM county_public_safety GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE county_public_safety (LOCATION VARCHAR)
List the names of counties that do not have any cities.,SELECT Name FROM county_public_safety WHERE NOT County_ID IN (SELECT County_ID FROM city),"CREATE TABLE city (Name VARCHAR, County_ID VARCHAR); CREATE TABLE county_public_safety (Name VARCHAR, County_ID VARCHAR)"
Show the police force shared by counties with location on the east and west.,"SELECT Police_force FROM county_public_safety WHERE LOCATION = ""East"" INTERSECT SELECT Police_force FROM county_public_safety WHERE LOCATION = ""West""","CREATE TABLE county_public_safety (Police_force VARCHAR, LOCATION VARCHAR)"
Show the names of cities in counties that have a crime rate less than 100.,SELECT name FROM city WHERE county_id IN (SELECT county_id FROM county_public_safety WHERE Crime_rate < 100),"CREATE TABLE county_public_safety (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER); CREATE TABLE city (name VARCHAR, county_id VARCHAR, Crime_rate INTEGER)"
Show the case burden of counties in descending order of population.,SELECT Case_burden FROM county_public_safety ORDER BY Population DESC,"CREATE TABLE county_public_safety (Case_burden VARCHAR, Population VARCHAR)"
Find the names of all modern rooms with a base price below $160 and two beds.,SELECT roomName FROM Rooms WHERE basePrice < 160 AND beds = 2 AND decor = 'modern',"CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, basePrice VARCHAR, beds VARCHAR)"
Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.,"SELECT roomName, RoomId FROM Rooms WHERE basePrice > 160 AND maxOccupancy > 2","CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR, basePrice VARCHAR, maxOccupancy VARCHAR)"
Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)"
How many kids stay in the rooms reserved by ROY SWEAZY?,"SELECT kids FROM Reservations WHERE FirstName = ""ROY"" AND LastName = ""SWEAZY""","CREATE TABLE Reservations (kids VARCHAR, FirstName VARCHAR, LastName VARCHAR)"
How many times does ROY SWEAZY has reserved a room.,"SELECT COUNT(*) FROM Reservations WHERE FirstName = ""ROY"" AND LastName = ""SWEAZY""","CREATE TABLE Reservations (FirstName VARCHAR, LastName VARCHAR)"
"Which room has the highest rate? List the room's full name, rate, check in and check out date.","SELECT T2.roomName, T1.Rate, T1.CheckIn, T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1","CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR); CREATE TABLE Reservations (Rate VARCHAR, CheckIn VARCHAR, CheckOut VARCHAR, Room VARCHAR)"
"How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?","SELECT Adults FROM Reservations WHERE CheckIn = ""2010-10-23"" AND FirstName = ""CONRAD"" AND LastName = ""SELBIG""","CREATE TABLE Reservations (Adults VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)"
"How many kids stay in the room DAMIEN TRACHSEL checked in on Sep 21, 2010?","SELECT Kids FROM Reservations WHERE CheckIn = ""2010-09-21"" AND FirstName = ""DAMIEN"" AND LastName = ""TRACHSEL""","CREATE TABLE Reservations (Kids VARCHAR, LastName VARCHAR, CheckIn VARCHAR, FirstName VARCHAR)"
How many king beds are there?,SELECT SUM(beds) FROM Rooms WHERE bedtype = 'King',"CREATE TABLE Rooms (beds INTEGER, bedtype VARCHAR)"
List the names and decor of rooms that have a king bed. Sort the list by their price.,"SELECT roomName, decor FROM Rooms WHERE bedtype = 'King' ORDER BY basePrice","CREATE TABLE Rooms (roomName VARCHAR, decor VARCHAR, bedtype VARCHAR, basePrice VARCHAR)"
Which room has cheapest base price? List the room's name and the base price.,"SELECT roomName, basePrice FROM Rooms ORDER BY basePrice LIMIT 1","CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)"
What is the decor of room Recluse and defiance?,"SELECT decor FROM Rooms WHERE roomName = ""Recluse and defiance""","CREATE TABLE Rooms (decor VARCHAR, roomName VARCHAR)"
What is the average base price of different bed type? List bed type and average base price.,"SELECT bedType, AVG(basePrice) FROM Rooms GROUP BY bedType","CREATE TABLE Rooms (bedType VARCHAR, basePrice INTEGER)"
What is the total number of people who could stay in the modern rooms in this inn?,SELECT SUM(maxOccupancy) FROM Rooms WHERE decor = 'modern',"CREATE TABLE Rooms (maxOccupancy INTEGER, decor VARCHAR)"
What kind of decor has the least number of reservations?,SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T2.decor ORDER BY COUNT(T2.decor) LIMIT 1,"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (decor VARCHAR, RoomId VARCHAR)"
List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.,SELECT COUNT(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T2.maxOccupancy = T1.Adults + T1.Kids,"CREATE TABLE Rooms (RoomId VARCHAR, maxOccupancy VARCHAR); CREATE TABLE Reservations (Room VARCHAR, Adults VARCHAR, Kids VARCHAR)"
Find the first and last names of people who payed more than the rooms' base prices.,"SELECT T1.firstname, T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE T1.Rate - T2.basePrice > 0","CREATE TABLE Reservations (firstname VARCHAR, lastname VARCHAR, Room VARCHAR, Rate VARCHAR); CREATE TABLE Rooms (RoomId VARCHAR, basePrice VARCHAR)"
How many rooms are there?,SELECT COUNT(*) FROM Rooms,CREATE TABLE Rooms (Id VARCHAR)
Find the number of rooms with a king bed.,"SELECT COUNT(*) FROM Rooms WHERE bedType = ""King""",CREATE TABLE Rooms (bedType VARCHAR)
Find the number of rooms for each bed type.,"SELECT bedType, COUNT(*) FROM Rooms GROUP BY bedType",CREATE TABLE Rooms (bedType VARCHAR)
Find the name of the room with the maximum occupancy.,SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1,"CREATE TABLE Rooms (roomName VARCHAR, maxOccupancy VARCHAR)"
Find the id and name of the most expensive base price room.,"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1","CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)"
List the type of bed and name of all traditional rooms.,"SELECT roomName, bedType FROM Rooms WHERE decor = ""traditional""","CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR, decor VARCHAR)"
Find the number of rooms with king bed for each decor type.,"SELECT decor, COUNT(*) FROM Rooms WHERE bedType = ""King"" GROUP BY decor","CREATE TABLE Rooms (decor VARCHAR, bedType VARCHAR)"
Find the average and minimum price of the rooms in different decor.,"SELECT decor, AVG(basePrice), MIN(basePrice) FROM Rooms GROUP BY decor","CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)"
List the name of all rooms sorted by their prices.,SELECT roomName FROM Rooms ORDER BY basePrice,"CREATE TABLE Rooms (roomName VARCHAR, basePrice VARCHAR)"
Find the number of rooms with price higher than 120 for different decor.,"SELECT decor, COUNT(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor","CREATE TABLE Rooms (decor VARCHAR, basePrice INTEGER)"
List the name of rooms with king or queen bed.,"SELECT roomName FROM Rooms WHERE bedType = ""King"" OR bedType = ""Queen""","CREATE TABLE Rooms (roomName VARCHAR, bedType VARCHAR)"
How many different types of beds are there?,SELECT COUNT(DISTINCT bedType) FROM Rooms,CREATE TABLE Rooms (bedType VARCHAR)
Find the name and id of the top 3 expensive rooms.,"SELECT RoomId, roomName FROM Rooms ORDER BY basePrice DESC LIMIT 3","CREATE TABLE Rooms (RoomId VARCHAR, roomName VARCHAR, basePrice VARCHAR)"
Find the name of rooms whose price is higher than the average price.,SELECT roomName FROM Rooms WHERE basePrice > (SELECT AVG(basePrice) FROM Rooms),"CREATE TABLE Rooms (roomName VARCHAR, basePrice INTEGER)"
Find the number of rooms that do not have any reservation.,SELECT COUNT(*) FROM rooms WHERE NOT roomid IN (SELECT DISTINCT room FROM reservations),"CREATE TABLE rooms (roomid VARCHAR, room VARCHAR); CREATE TABLE reservations (roomid VARCHAR, room VARCHAR)"
Return the name and number of reservations made for each of the rooms.,"SELECT T2.roomName, COUNT(*), T1.Room FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room","CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)"
Find the names of rooms that have been reserved for more than 60 times.,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId GROUP BY T1.Room HAVING COUNT(*) > 60,"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)"
Find the name of rooms whose base price is between 120 and 150.,SELECT roomname FROM rooms WHERE baseprice BETWEEN 120 AND 150,"CREATE TABLE rooms (roomname VARCHAR, baseprice INTEGER)"
Find the name of rooms booked by some customers whose first name contains ROY.,SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room = T2.RoomId WHERE firstname LIKE '%ROY%',"CREATE TABLE Reservations (Room VARCHAR); CREATE TABLE Rooms (roomName VARCHAR, RoomId VARCHAR)"
what are the details of the cmi masters that have the cross reference code 'Tax'?,SELECT T1.cmi_details FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T2.source_system_code = 'Tax',"CREATE TABLE CMI_Cross_References (master_customer_id VARCHAR, source_system_code VARCHAR); CREATE TABLE Customer_Master_Index (cmi_details VARCHAR, master_customer_id VARCHAR)"
What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.,"SELECT T1.cmi_cross_ref_id, T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING COUNT(*) >= 1","CREATE TABLE Council_Tax (cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)"
"How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n","SELECT T2.cmi_cross_ref_id, T2.master_customer_id, COUNT(*) FROM Business_Rates AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id GROUP BY T2.cmi_cross_ref_id","CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR); CREATE TABLE Business_Rates (cmi_cross_ref_id VARCHAR)"
"What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.","SELECT T1.source_system_code, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id ORDER BY T2.council_tax_id","CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Benefits_Overpayments (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)"
Wat is the tax source system code and master customer id of the taxes related to each parking fine id?,"SELECT T1.source_system_code, T1.master_customer_id, T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id","CREATE TABLE CMI_Cross_References (source_system_code VARCHAR, master_customer_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Parking_Fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)"
"What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?","SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id = T2.master_customer_id WHERE T3.cmi_details <> 'Schmidt ,  Kertzmann and Lubowitz'","CREATE TABLE Rent_Arrears (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE Customer_Master_Index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, master_customer_id VARCHAR)"
What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?,SELECT T1.electoral_register_id FROM Electoral_Register AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id = T2.cmi_cross_ref_id WHERE T2.source_system_code = 'Electoral' OR T2.source_system_code = 'Tax',"CREATE TABLE Electoral_Register (electoral_register_id VARCHAR, cmi_cross_ref_id VARCHAR); CREATE TABLE CMI_Cross_References (cmi_cross_ref_id VARCHAR, source_system_code VARCHAR)"
How many different source system code for the cmi cross references are there?,SELECT COUNT(DISTINCT source_system_code) FROM CMI_cross_references,CREATE TABLE CMI_cross_references (source_system_code VARCHAR)
"List all information about customer master index, and sort them by details in descending order.",SELECT * FROM customer_master_index ORDER BY cmi_details DESC,CREATE TABLE customer_master_index (cmi_details VARCHAR)
List the council tax ids and their related cmi cross references of all the parking fines.,"SELECT council_tax_id, cmi_cross_ref_id FROM parking_fines","CREATE TABLE parking_fines (council_tax_id VARCHAR, cmi_cross_ref_id VARCHAR)"
How many council taxes are collected for renting arrears ?,SELECT COUNT(*) FROM rent_arrears,CREATE TABLE rent_arrears (Id VARCHAR)
"What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?","SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = 'Gottlieb ,  Becker and Wyman'","CREATE TABLE customer_master_index (master_customer_id VARCHAR, cmi_details VARCHAR); CREATE TABLE cmi_cross_references (source_system_code VARCHAR, master_customer_id VARCHAR)"
Which cmi cross reference id is not related to any parking taxes?,SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines,CREATE TABLE parking_fines (cmi_cross_ref_id VARCHAR); CREATE TABLE cmi_cross_references (cmi_cross_ref_id VARCHAR)
Which distinct source system code includes the substring 'en'?,SELECT DISTINCT source_system_code FROM cmi_cross_references WHERE source_system_code LIKE '%en%',CREATE TABLE cmi_cross_references (source_system_code VARCHAR)
How many parties are there?,SELECT COUNT(*) FROM party,CREATE TABLE party (Id VARCHAR)
List the themes of parties in ascending order of number of hosts.,SELECT Party_Theme FROM party ORDER BY Number_of_hosts,"CREATE TABLE party (Party_Theme VARCHAR, Number_of_hosts VARCHAR)"
What are the themes and locations of parties?,"SELECT Party_Theme, LOCATION FROM party","CREATE TABLE party (Party_Theme VARCHAR, LOCATION VARCHAR)"
"Show the first year and last year of parties with theme ""Spring"" or ""Teqnology"".","SELECT First_year, Last_year FROM party WHERE Party_Theme = ""Spring"" OR Party_Theme = ""Teqnology""","CREATE TABLE party (First_year VARCHAR, Last_year VARCHAR, Party_Theme VARCHAR)"
What is the average number of hosts for parties?,SELECT AVG(Number_of_hosts) FROM party,CREATE TABLE party (Number_of_hosts INTEGER)
What is the location of the party with the most hosts?,SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1,"CREATE TABLE party (LOCATION VARCHAR, Number_of_hosts VARCHAR)"
Show different nationalities along with the number of hosts of each nationality.,"SELECT Nationality, COUNT(*) FROM HOST GROUP BY Nationality",CREATE TABLE HOST (Nationality VARCHAR)
Show the most common nationality of hosts.,SELECT Nationality FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE HOST (Nationality VARCHAR)
Show the nations that have both hosts older than 45 and hosts younger than 35.,SELECT Nationality FROM HOST WHERE Age > 45 INTERSECT SELECT Nationality FROM HOST WHERE Age < 35,"CREATE TABLE HOST (Nationality VARCHAR, Age INTEGER)"
Show the themes of parties and the names of the party hosts.,"SELECT T3.Party_Theme, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID","CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_Theme VARCHAR, Party_ID VARCHAR)"
Show the locations of parties and the names of the party hosts in ascending order of the age of the host.,"SELECT T3.Location, T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID ORDER BY T2.Age","CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR, Age VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR)"
Show the locations of parties with hosts older than 50.,SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T2.Age > 50,"CREATE TABLE party (Location VARCHAR, Party_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE HOST (Host_ID VARCHAR, Age INTEGER)"
Show the host names for parties with number of hosts greater than 20.,SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID = T2.Host_ID JOIN party AS T3 ON T1.Party_ID = T3.Party_ID WHERE T3.Number_of_hosts > 20,"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Host_ID VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Number_of_hosts INTEGER)"
Show the name and the nationality of the oldest host.,"SELECT Name, Nationality FROM HOST ORDER BY Age DESC LIMIT 1","CREATE TABLE HOST (Name VARCHAR, Nationality VARCHAR, Age VARCHAR)"
List the names of hosts who did not serve as a host of any party in our record.,SELECT Name FROM HOST WHERE NOT Host_ID IN (SELECT Host_ID FROM party_host),"CREATE TABLE HOST (Name VARCHAR, Host_ID VARCHAR); CREATE TABLE party_host (Name VARCHAR, Host_ID VARCHAR)"
Show all region code and region name sorted by the codes.,"SELECT region_code, region_name FROM region ORDER BY region_code","CREATE TABLE region (region_code VARCHAR, region_name VARCHAR)"
List all region names in alphabetical order.,SELECT region_name FROM region ORDER BY region_name,CREATE TABLE region (region_name VARCHAR)
Show names for all regions except for Denmark.,SELECT region_name FROM region WHERE region_name <> 'Denmark',CREATE TABLE region (region_name VARCHAR)
How many storms had death records?,SELECT COUNT(*) FROM storm WHERE Number_Deaths > 0,CREATE TABLE storm (Number_Deaths INTEGER)
"List name, dates active, and number of deaths for all storms with at least 1 death.","SELECT name, dates_active, number_deaths FROM storm WHERE number_deaths >= 1","CREATE TABLE storm (name VARCHAR, dates_active VARCHAR, number_deaths VARCHAR)"
Show the average and maximum damage for all storms with max speed higher than 1000.,"SELECT AVG(damage_millions_USD), MAX(damage_millions_USD) FROM storm WHERE max_speed > 1000","CREATE TABLE storm (damage_millions_USD INTEGER, max_speed INTEGER)"
What is the total number of deaths and damage for all storms with a max speed greater than the average?,"SELECT SUM(number_deaths), SUM(damage_millions_USD) FROM storm WHERE max_speed > (SELECT AVG(max_speed) FROM storm)","CREATE TABLE storm (number_deaths INTEGER, damage_millions_USD INTEGER, max_speed INTEGER)"
List name and damage for all storms in a descending order of max speed.,"SELECT name, damage_millions_USD FROM storm ORDER BY max_speed DESC","CREATE TABLE storm (name VARCHAR, damage_millions_USD VARCHAR, max_speed VARCHAR)"
How many regions are affected?,SELECT COUNT(DISTINCT region_id) FROM affected_region,CREATE TABLE affected_region (region_id VARCHAR)
Show the name for regions not affected.,SELECT region_name FROM region WHERE NOT region_id IN (SELECT region_id FROM affected_region),"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_name VARCHAR, region_id VARCHAR)"
Show the name for regions and the number of storms for each region.,"SELECT T1.region_name, COUNT(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id","CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)"
List the name for storms and the number of affected regions for each storm.,"SELECT T1.name, COUNT(*) FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id","CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)"
What is the storm name and max speed which affected the greatest number of regions?,"SELECT T1.name, T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE storm (name VARCHAR, max_speed VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR)"
Show the name of storms which don't have affected region in record.,SELECT name FROM storm WHERE NOT storm_id IN (SELECT storm_id FROM affected_region),"CREATE TABLE affected_region (name VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)"
Show storm name with at least two regions and 10 cities affected.,SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING SUM(T2.number_city_affected) >= 10,"CREATE TABLE affected_region (storm_id VARCHAR, number_city_affected INTEGER); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)"
Show all storm names except for those with at least two affected regions.,SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id = T2.storm_id GROUP BY T1.storm_id HAVING COUNT(*) >= 2,"CREATE TABLE storm (name VARCHAR); CREATE TABLE affected_region (storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)"
What are the region names affected by the storm with a number of deaths of least 10?,SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T3.number_deaths >= 10,"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, number_deaths VARCHAR)"
"Show all storm names affecting region ""Denmark"".",SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.region_name = 'Denmark',"CREATE TABLE region (region_id VARCHAR, region_name VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (name VARCHAR, storm_id VARCHAR)"
Show the region name with at least two storms.,SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING COUNT(*) >= 2,"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR)"
Find the names of the regions which were affected by the storm that killed the greatest number of people.,SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id ORDER BY T3.Number_Deaths DESC LIMIT 1,"CREATE TABLE region (region_name VARCHAR, region_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE storm (storm_id VARCHAR, Number_Deaths VARCHAR)"
Find the name of the storm that affected both Afghanistan and Albania regions.,SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id = T2.region_id JOIN storm AS T3 ON T1.storm_id = T3.storm_id WHERE T2.Region_name = 'Albania',"CREATE TABLE storm (Name VARCHAR, storm_id VARCHAR); CREATE TABLE affected_region (region_id VARCHAR, storm_id VARCHAR); CREATE TABLE region (region_id VARCHAR, Region_name VARCHAR)"
How many counties are there in total?,SELECT COUNT(*) FROM county,CREATE TABLE county (Id VARCHAR)
Show the county name and population of all counties.,"SELECT County_name, Population FROM county","CREATE TABLE county (County_name VARCHAR, Population VARCHAR)"
Show the average population of all counties.,SELECT AVG(Population) FROM county,CREATE TABLE county (Population INTEGER)
Return the maximum and minimum population among all counties.,"SELECT MAX(Population), MIN(Population) FROM county",CREATE TABLE county (Population INTEGER)
Show all the distinct districts for elections.,SELECT DISTINCT District FROM election,CREATE TABLE election (District VARCHAR)
"Show the zip code of the county with name ""Howard"".","SELECT Zip_code FROM county WHERE County_name = ""Howard""","CREATE TABLE county (Zip_code VARCHAR, County_name VARCHAR)"
Show the delegate from district 1 in election.,SELECT Delegate FROM election WHERE District = 1,"CREATE TABLE election (Delegate VARCHAR, District VARCHAR)"
Show the delegate and committee information of elections.,"SELECT Delegate, Committee FROM election","CREATE TABLE election (Delegate VARCHAR, Committee VARCHAR)"
How many distinct governors are there?,SELECT COUNT(DISTINCT Governor) FROM party,CREATE TABLE party (Governor VARCHAR)
Show the lieutenant governor and comptroller from the democratic party.,"SELECT Lieutenant_Governor, Comptroller FROM party WHERE Party = ""Democratic""","CREATE TABLE party (Lieutenant_Governor VARCHAR, Comptroller VARCHAR, Party VARCHAR)"
"In which distinct years was the governor ""Eliot Spitzer""?","SELECT DISTINCT YEAR FROM party WHERE Governor = ""Eliot Spitzer""","CREATE TABLE party (YEAR VARCHAR, Governor VARCHAR)"
Show all the information about election.,SELECT * FROM election,CREATE TABLE election (Id VARCHAR)
Show the delegates and the names of county they belong to.,"SELECT T2.Delegate, T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District","CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)"
Which delegates are from counties with population smaller than 100000?,SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population < 100000,"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)"
How many distinct delegates are from counties with population larger than 50000?,SELECT COUNT(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T1.Population > 50000,"CREATE TABLE election (Delegate VARCHAR, District VARCHAR); CREATE TABLE county (County_id VARCHAR, Population INTEGER)"
"What are the names of the county that the delegates on ""Appropriations"" committee belong to?","SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District WHERE T2.Committee = ""Appropriations""","CREATE TABLE election (District VARCHAR, Committee VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)"
Show the delegates and the names of the party they belong to.,"SELECT T1.Delegate, T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID","CREATE TABLE election (Delegate VARCHAR, Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)"
Who were the governors of the parties associated with delegates from district 1?,SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1,"CREATE TABLE party (Governor VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)"
Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?,SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2,"CREATE TABLE party (Comptroller VARCHAR, Party_ID VARCHAR); CREATE TABLE election (Party VARCHAR, District VARCHAR)"
Return all the committees that have delegates from Democratic party.,"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = ""Democratic""","CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)"
Show the name of each county along with the corresponding number of delegates from that county.,"SELECT T1.County_name, COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id","CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)"
Show the name of each party and the corresponding number of delegates from that party.,"SELECT T2.Party, COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party","CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)"
Return the names of all counties sorted by population in ascending order.,SELECT County_name FROM county ORDER BY Population,"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)"
Return the names of all counties sorted by county name in descending alphabetical order.,SELECT County_name FROM county ORDER BY County_name DESC,CREATE TABLE county (County_name VARCHAR)
Show the name of the county with the biggest population.,SELECT County_name FROM county ORDER BY Population DESC LIMIT 1,"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)"
Show the 3 counties with the smallest population.,SELECT County_name FROM county ORDER BY Population LIMIT 3,"CREATE TABLE county (County_name VARCHAR, Population VARCHAR)"
Show the names of counties that have at least two delegates.,SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id HAVING COUNT(*) >= 2,"CREATE TABLE election (District VARCHAR); CREATE TABLE county (County_name VARCHAR, County_id VARCHAR)"
Show the name of the party that has at least two records.,SELECT Party FROM party GROUP BY Party HAVING COUNT(*) >= 2,CREATE TABLE party (Party VARCHAR)
Show the name of the party that has the most delegates.,SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE election (Party VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)"
Show the people that have been governor the most times.,SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE party (Governor VARCHAR)
Show the people that have been comptroller the most times and the corresponding number of times.,"SELECT Comptroller, COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE party (Comptroller VARCHAR)
What are the names of parties that do not have delegates in election?,SELECT Party FROM party WHERE NOT Party_ID IN (SELECT Party FROM election),"CREATE TABLE election (Party VARCHAR, Party_ID VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)"
"What are the names of parties that have both delegates on ""Appropriations"" committee and","SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = ""Appropriations"" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.Committee = ""Economic Matters""","CREATE TABLE election (Party VARCHAR, Committee VARCHAR); CREATE TABLE party (Party VARCHAR, Party_ID VARCHAR)"
Which committees have delegates from both democratic party and liberal party?,"SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = ""Democratic"" INTERSECT SELECT T1.Committee FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = ""Liberal""","CREATE TABLE election (Committee VARCHAR, Party VARCHAR); CREATE TABLE party (Party_ID VARCHAR, Party VARCHAR)"
How many journalists are there?,SELECT COUNT(*) FROM journalist,CREATE TABLE journalist (Id VARCHAR)
List the names of journalists in ascending order of years working.,SELECT Name FROM journalist ORDER BY Years_working,"CREATE TABLE journalist (Name VARCHAR, Years_working VARCHAR)"
What are the nationalities and ages of journalists?,"SELECT Nationality, Age FROM journalist","CREATE TABLE journalist (Nationality VARCHAR, Age VARCHAR)"
"Show the names of journalists from ""England"" or ""Wales"".","SELECT Name FROM journalist WHERE Nationality = ""England"" OR Nationality = ""Wales""","CREATE TABLE journalist (Name VARCHAR, Nationality VARCHAR)"
What is the average number of years spent working as a journalist?,SELECT AVG(Years_working) FROM journalist,CREATE TABLE journalist (Years_working INTEGER)
What is the nationality of the journalist with the largest number of years working?,SELECT Nationality FROM journalist ORDER BY Years_working DESC LIMIT 1,"CREATE TABLE journalist (Nationality VARCHAR, Years_working VARCHAR)"
Show the different nationalities and the number of journalists of each nationality.,"SELECT Nationality, COUNT(*) FROM journalist GROUP BY Nationality",CREATE TABLE journalist (Nationality VARCHAR)
Show the most common nationality for journalists.,SELECT Nationality FROM journalist GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE journalist (Nationality VARCHAR)
Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.,SELECT Nationality FROM journalist WHERE Years_working > 10 INTERSECT SELECT Nationality FROM journalist WHERE Years_working < 3,"CREATE TABLE journalist (Nationality VARCHAR, Years_working INTEGER)"
"Show the dates, places, and names of events in descending order of the attendance.","SELECT Date, Name, venue FROM event ORDER BY Event_Attendance DESC","CREATE TABLE event (Date VARCHAR, Name VARCHAR, venue VARCHAR, Event_Attendance VARCHAR)"
Show the names of journalists and the dates of the events they reported.,"SELECT T3.Name, T2.Date FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID","CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Date VARCHAR, Event_ID VARCHAR)"
Show the names of journalists and the names of the events they reported in ascending order,"SELECT T3.Name, T2.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID ORDER BY T2.Event_Attendance","CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Name VARCHAR, Event_ID VARCHAR, Event_Attendance VARCHAR)"
Show the names of journalists and the number of events they reported.,"SELECT T3.Name, COUNT(*) FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name","CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)"
Show the names of journalists that have reported more than one event.,SELECT T3.Name FROM news_report AS T1 JOIN event AS T2 ON T1.Event_ID = T2.Event_ID JOIN journalist AS T3 ON T1.journalist_ID = T3.journalist_ID GROUP BY T3.Name HAVING COUNT(*) > 1,"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Event_ID VARCHAR, journalist_ID VARCHAR); CREATE TABLE event (Event_ID VARCHAR)"
List the names of journalists who have not reported any event.,SELECT Name FROM journalist WHERE NOT journalist_ID IN (SELECT journalist_ID FROM news_report),"CREATE TABLE journalist (Name VARCHAR, journalist_ID VARCHAR); CREATE TABLE news_report (Name VARCHAR, journalist_ID VARCHAR)"
what are the average and maximum attendances of all events?,"SELECT AVG(Event_Attendance), MAX(Event_Attendance) FROM event",CREATE TABLE event (Event_Attendance INTEGER)
Find the average age and experience working length of journalists working on different role type.,"SELECT AVG(t1.age), AVG(Years_working), t2.work_type FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type","CREATE TABLE news_report (work_type VARCHAR, journalist_id VARCHAR); CREATE TABLE journalist (age INTEGER, journalist_id VARCHAR)"
List the event venues and names that have the top 2 most number of people attended.,"SELECT venue, name FROM event ORDER BY Event_Attendance DESC LIMIT 2","CREATE TABLE event (venue VARCHAR, name VARCHAR, Event_Attendance VARCHAR)"
Show me all the restaurants.,SELECT ResName FROM Restaurant,CREATE TABLE Restaurant (ResName VARCHAR)
What is the address of the restaurant Subway?,"SELECT Address FROM Restaurant WHERE ResName = ""Subway""","CREATE TABLE Restaurant (Address VARCHAR, ResName VARCHAR)"
What is the rating of the restaurant Subway?,"SELECT Rating FROM Restaurant WHERE ResName = ""Subway""","CREATE TABLE Restaurant (Rating VARCHAR, ResName VARCHAR)"
List all restaurant types.,SELECT ResTypeName FROM Restaurant_Type,CREATE TABLE Restaurant_Type (ResTypeName VARCHAR)
What is the description of the restaurant type Sandwich?,"SELECT ResTypeDescription FROM Restaurant_Type WHERE ResTypeName = ""Sandwich""","CREATE TABLE Restaurant_Type (ResTypeDescription VARCHAR, ResTypeName VARCHAR)"
Which restaurants have highest rating? List the restaurant name and its rating.,"SELECT ResName, Rating FROM Restaurant ORDER BY Rating DESC LIMIT 1","CREATE TABLE Restaurant (ResName VARCHAR, Rating VARCHAR)"
What is the age of student Linda Smith?,"SELECT Age FROM Student WHERE Fname = ""Linda"" AND Lname = ""Smith""","CREATE TABLE Student (Age VARCHAR, Fname VARCHAR, Lname VARCHAR)"
What is the gender of the student Linda Smith?,"SELECT Sex FROM Student WHERE Fname = ""Linda"" AND Lname = ""Smith""","CREATE TABLE Student (Sex VARCHAR, Fname VARCHAR, Lname VARCHAR)"
List all students' first names and last names who majored in 600.,"SELECT Fname, Lname FROM Student WHERE Major = 600","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Major VARCHAR)"
Which city does student Linda Smith live in?,"SELECT city_code FROM Student WHERE Fname = ""Linda"" AND Lname = ""Smith""","CREATE TABLE Student (city_code VARCHAR, Fname VARCHAR, Lname VARCHAR)"
Advisor 1121 has how many students?,SELECT COUNT(*) FROM Student WHERE Advisor = 1121,CREATE TABLE Student (Advisor VARCHAR)
Which Advisor has most of students? List advisor and the number of students.,"SELECT Advisor, COUNT(*) FROM Student GROUP BY Advisor ORDER BY COUNT(Advisor) DESC LIMIT 1",CREATE TABLE Student (Advisor VARCHAR)
Which major has least number of students? List the major and the number of students.,"SELECT Major, COUNT(*) FROM Student GROUP BY Major ORDER BY COUNT(Major) LIMIT 1",CREATE TABLE Student (Major VARCHAR)
Which major has between 2 and 30 number of students? List major and the number of students.,"SELECT Major, COUNT(*) FROM Student GROUP BY Major HAVING COUNT(Major) BETWEEN 2 AND 30",CREATE TABLE Student (Major VARCHAR)
Which student's age is older than 18 and is majoring in 600? List each student's first and last name.,"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major = 600","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Age VARCHAR, Major VARCHAR)"
List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.,"SELECT Fname, Lname FROM Student WHERE Age > 18 AND Major <> 600 AND Sex = 'F'","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, Sex VARCHAR, Age VARCHAR, Major VARCHAR)"
How many restaurant is the Sandwich type restaurant?,SELECT COUNT(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID = Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich',CREATE TABLE Type_Of_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR); CREATE TABLE Restaurant_Type (Id VARCHAR)
How long does student Linda Smith spend on the restaurant in total?,"SELECT SUM(Spent) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID WHERE Student.Fname = ""Linda"" AND Student.Lname = ""Smith""",CREATE TABLE Visits_Restaurant (Spent INTEGER); CREATE TABLE Student (Spent INTEGER)
How many times has the student Linda Smith visited Subway?,"SELECT COUNT(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = ""Linda"" AND Student.Lname = ""Smith"" AND Restaurant.ResName = ""Subway""",CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)
When did Linda Smith visit Subway?,"SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = ""Linda"" AND Student.Lname = ""Smith"" AND Restaurant.ResName = ""Subway""",CREATE TABLE Restaurant (TIME VARCHAR); CREATE TABLE Visits_Restaurant (TIME VARCHAR); CREATE TABLE Student (TIME VARCHAR)
At which restaurant did the students spend the least amount of time? List restaurant and the time students spent on in total.,"SELECT Restaurant.ResName, SUM(Visits_Restaurant.Spent) FROM Visits_Restaurant JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID GROUP BY Restaurant.ResID ORDER BY SUM(Visits_Restaurant.Spent) LIMIT 1",CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Restaurant (Id VARCHAR)
Which student visited restaurant most often? List student's first name and last name.,"SELECT Student.Fname, Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Visits_Restaurant (Id VARCHAR); CREATE TABLE Student (Id VARCHAR)
Find the ids of orders whose status is 'Success'.,SELECT actual_order_id FROM actual_orders WHERE order_status_code = 'Success',"CREATE TABLE actual_orders (actual_order_id VARCHAR, order_status_code VARCHAR)"
Find the name and price of the product that has been ordered the greatest number of times.,"SELECT t1.product_name, t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id = t2.product_id GROUP BY t2.product_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE products (product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE regular_order_products (product_id VARCHAR)"
Find the number of customers in total.,SELECT COUNT(*) FROM customers,CREATE TABLE customers (Id VARCHAR)
How many different payment methods are there?,SELECT COUNT(DISTINCT payment_method) FROM customers,CREATE TABLE customers (payment_method VARCHAR)
Show the details of all trucks in the order of their license number.,SELECT truck_details FROM trucks ORDER BY truck_licence_number,"CREATE TABLE trucks (truck_details VARCHAR, truck_licence_number VARCHAR)"
Find the name of the most expensive product.,SELECT product_name FROM products ORDER BY product_price DESC LIMIT 1,"CREATE TABLE products (product_name VARCHAR, product_price VARCHAR)"
Find the names of customers who are not living in the state of California.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California',"CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)"
List the names and emails of customers who payed by Visa card.,"SELECT customer_email, customer_name FROM customers WHERE payment_method = 'Visa'","CREATE TABLE customers (customer_email VARCHAR, customer_name VARCHAR, payment_method VARCHAR)"
Find the names and phone numbers of customers living in California state.,"SELECT t1.customer_name, t1.customer_phone FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = 'California'","CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)"
Find the states which do not have any employee in their record.,SELECT state_province_county FROM addresses WHERE NOT address_id IN (SELECT employee_address_id FROM Employees),"CREATE TABLE Employees (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR, employee_address_id VARCHAR)"
"List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.","SELECT customer_name, customer_phone, customer_email FROM Customers ORDER BY date_became_customer","CREATE TABLE Customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, date_became_customer VARCHAR)"
Find the name of the first 5 customers.,SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5,"CREATE TABLE Customers (customer_name VARCHAR, date_became_customer VARCHAR)"
Find the payment method that is used most frequently.,SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Customers (payment_method VARCHAR)
List the names of all routes in alphabetic order.,SELECT route_name FROM Delivery_Routes ORDER BY route_name,CREATE TABLE Delivery_Routes (route_name VARCHAR)
Find the name of route that has the highest number of deliveries.,SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id = t2.route_id GROUP BY t1.route_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Delivery_Routes (route_name VARCHAR, route_id VARCHAR); CREATE TABLE Delivery_Route_Locations (route_id VARCHAR)"
List the state names and the number of customers living in each state.,"SELECT t2.state_province_county, COUNT(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county","CREATE TABLE customer_addresses (address_id VARCHAR); CREATE TABLE addresses (state_province_county VARCHAR, address_id VARCHAR)"
How many authors are there?,SELECT COUNT(*) FROM authors,CREATE TABLE authors (Id VARCHAR)
How many institutions are there?,SELECT COUNT(*) FROM inst,CREATE TABLE inst (Id VARCHAR)
How many papers are published in total?,SELECT COUNT(*) FROM papers,CREATE TABLE papers (Id VARCHAR)
"What are the titles of papers published by ""Jeremy Gibbons""?","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = ""Jeremy"" AND t1.lname = ""Gibbons""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)"
"Find all the papers published by ""Aaron Turon"".","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = ""Aaron"" AND t1.lname = ""Turon""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)"
"How many papers have ""Atsushi Ohori"" published?","SELECT COUNT(*) FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = ""Atsushi"" AND t1.lname = ""Ohori""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE papers (paperid VARCHAR)"
"What is the name of the institution that ""Matthias Blume"" belongs to?","SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = ""Matthias"" AND t1.lname = ""Blume""","CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)"
"Which institution does ""Katsuhiro Ueno"" belong to?","SELECT DISTINCT t3.name FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t1.fname = ""Katsuhiro"" AND t1.lname = ""Ueno""","CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE inst (name VARCHAR, instid VARCHAR)"
"Who belong to the institution ""University of Oxford""? Show the first names and last names.","SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""University of Oxford""","CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)"
"Which authors belong to the institution ""Google""? Show the first names and last names.","SELECT DISTINCT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""Google""","CREATE TABLE authorship (authid VARCHAR, instid VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR); CREATE TABLE inst (instid VARCHAR, name VARCHAR)"
"What are the last names of the author of the paper titled ""Binders Unbound""?","SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = ""Binders Unbound""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)"
"Find the first and last name of the author(s) who wrote the paper ""Nameless, Painless"".","SELECT t1.fname, t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title = ""Nameless ,  Painless""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authors (fname VARCHAR, lname VARCHAR, authid VARCHAR)"
"What are the papers published under the institution ""Indiana University""?","SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""Indiana University""","CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)"
"Find all the papers published by the institution ""Google"".","SELECT DISTINCT t1.title FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""Google""","CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)"
"How many papers are published by the institution ""Tokohu University""?","SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""Tokohu University""","CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)"
"Find the number of papers published by the institution ""University of Pennsylvania"".","SELECT COUNT(DISTINCT t1.title) FROM papers AS t1 JOIN authorship AS t2 ON t1.paperid = t2.paperid JOIN inst AS t3 ON t2.instid = t3.instid WHERE t3.name = ""University of Pennsylvania""","CREATE TABLE inst (instid VARCHAR, name VARCHAR); CREATE TABLE authorship (paperid VARCHAR, instid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)"
"Find the papers which have ""Olin Shivers"" as an author.","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = ""Olin"" AND t1.lname = ""Shivers""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)"
"Which papers have ""Stephanie Weirich"" as an author?","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t1.fname = ""Stephanie"" AND t1.lname = ""Weirich""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE authors (authid VARCHAR, fname VARCHAR, lname VARCHAR)"
"Which paper is published in an institution in ""USA"" and have ""Turon"" as its second author?","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = ""USA"" AND t2.authorder = 2 AND t1.lname = ""Turon""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)"
"Find the titles of papers whose first author is affiliated with an institution in the country ""Japan"" and has last name ""Ohori""?","SELECT t3.title FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid JOIN inst AS t4 ON t2.instid = t4.instid WHERE t4.country = ""Japan"" AND t2.authorder = 1 AND t1.lname = ""Ohori""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR, instid VARCHAR, authorder VARCHAR); CREATE TABLE authors (authid VARCHAR, lname VARCHAR); CREATE TABLE papers (title VARCHAR, paperid VARCHAR); CREATE TABLE inst (instid VARCHAR, country VARCHAR)"
What is the last name of the author that has published the most papers?,"SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.fname, t1.lname ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR)"
Retrieve the country that has published the most papers.,SELECT t1.country FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.country ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE inst (country VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)"
Find the name of the organization that has published the largest number of papers.,SELECT t1.name FROM inst AS t1 JOIN authorship AS t2 ON t1.instid = t2.instid JOIN papers AS t3 ON t2.paperid = t3.paperid GROUP BY t1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE inst (name VARCHAR, instid VARCHAR); CREATE TABLE authorship (instid VARCHAR, paperid VARCHAR); CREATE TABLE papers (paperid VARCHAR)"
"Find the titles of the papers that contain the word ""ML"".","SELECT title FROM papers WHERE title LIKE ""%ML%""",CREATE TABLE papers (title VARCHAR)
"Which paper's title contains the word ""Database""?","SELECT title FROM papers WHERE title LIKE ""%Database%""",CREATE TABLE papers (title VARCHAR)
"Find the first names of all the authors who have written a paper with title containing the word ""Functional"".","SELECT t1.fname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE ""%Functional%""","CREATE TABLE authors (fname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR); CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR)"
"Find the last names of all the authors that have written a paper with title containing the word ""Monadic"".","SELECT t1.lname FROM authors AS t1 JOIN authorship AS t2 ON t1.authid = t2.authid JOIN papers AS t3 ON t2.paperid = t3.paperid WHERE t3.title LIKE ""%Monadic%""","CREATE TABLE authorship (authid VARCHAR, paperid VARCHAR); CREATE TABLE authors (lname VARCHAR, authid VARCHAR); CREATE TABLE papers (paperid VARCHAR, title VARCHAR)"
Retrieve the title of the paper that has the largest number of authors.,SELECT t2.title FROM authorship AS t1 JOIN papers AS t2 ON t1.paperid = t2.paperid WHERE t1.authorder = (SELECT MAX(authorder) FROM authorship),"CREATE TABLE authorship (authorder INTEGER); CREATE TABLE authorship (paperid VARCHAR, authorder INTEGER); CREATE TABLE papers (title VARCHAR, paperid VARCHAR)"
"What is the first name of the author with last name ""Ueno""?","SELECT fname FROM authors WHERE lname = ""Ueno""","CREATE TABLE authors (fname VARCHAR, lname VARCHAR)"
"Find the last name of the author with first name ""Amal"".","SELECT lname FROM authors WHERE fname = ""Amal""","CREATE TABLE authors (lname VARCHAR, fname VARCHAR)"
Find the first names of all the authors ordered in alphabetical order.,SELECT fname FROM authors ORDER BY fname,CREATE TABLE authors (fname VARCHAR)
Retrieve all the last names of authors in alphabetical order.,SELECT lname FROM authors ORDER BY lname,CREATE TABLE authors (lname VARCHAR)
Retrieve all the first and last names of authors in the alphabetical order of last names.,"SELECT fname, lname FROM authors ORDER BY lname","CREATE TABLE authors (fname VARCHAR, lname VARCHAR)"
How many different last names do the actors and actresses have?,SELECT COUNT(DISTINCT last_name) FROM actor,CREATE TABLE actor (last_name VARCHAR)
What is the most popular first name of the actors?,SELECT first_name FROM actor GROUP BY first_name ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE actor (first_name VARCHAR)
What is the most popular full name of the actors?,"SELECT first_name, last_name FROM actor GROUP BY first_name, last_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR)"
Which districts have at least two addresses?,SELECT district FROM address GROUP BY district HAVING COUNT(*) >= 2,CREATE TABLE address (district VARCHAR)
What is the phone number and postal code of the address 1031 Daugavpils Parkway?,"SELECT phone, postal_code FROM address WHERE address = '1031 Daugavpils Parkway'","CREATE TABLE address (phone VARCHAR, postal_code VARCHAR, address VARCHAR)"
"Which city has the most addresses? List the city name, number of addresses, and city id.","SELECT T2.city, COUNT(*), T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE address (city_id VARCHAR); CREATE TABLE city (city VARCHAR, city_id VARCHAR)"
How many addresses are in the district of California?,SELECT COUNT(*) FROM address WHERE district = 'California',CREATE TABLE address (district VARCHAR)
Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.,"SELECT title, film_id FROM film WHERE rental_rate = 0.99 INTERSECT SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id HAVING COUNT(*) < 3","CREATE TABLE film (title VARCHAR, film_id VARCHAR, rental_rate VARCHAR); CREATE TABLE inventory (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR)"
How many cities are in Australia?,SELECT COUNT(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id WHERE T2.country = 'Australia',"CREATE TABLE country (country_id VARCHAR, country VARCHAR); CREATE TABLE city (country_id VARCHAR)"
Which countries have at least 3 cities?,SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id = T2.country_id GROUP BY T2.country_id HAVING COUNT(*) >= 3,"CREATE TABLE country (country VARCHAR, country_id VARCHAR); CREATE TABLE city (country_id VARCHAR)"
Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.,SELECT payment_date FROM payment WHERE amount > 10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = 'Elsa',"CREATE TABLE payment (payment_date VARCHAR, staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, first_name VARCHAR); CREATE TABLE payment (payment_date VARCHAR, amount INTEGER)"
How many customers have an active value of 1?,SELECT COUNT(*) FROM customer WHERE active = '1',CREATE TABLE customer (active VARCHAR)
Which film has the highest rental rate? And what is the rate?,"SELECT title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1","CREATE TABLE film (title VARCHAR, rental_rate VARCHAR)"
"Which film has the most number of actors or actresses? List the film name, film id and description.","SELECT T2.title, T2.film_id, T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE film_actor (film_id VARCHAR); CREATE TABLE film (title VARCHAR, film_id VARCHAR, description VARCHAR)"
"Which film actor (actress) starred the most films? List his or her first name, last name and actor id.","SELECT T2.first_name, T2.last_name, T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)"
Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.,"SELECT T2.first_name, T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id HAVING COUNT(*) > 30","CREATE TABLE film_actor (actor_id VARCHAR); CREATE TABLE actor (first_name VARCHAR, last_name VARCHAR, actor_id VARCHAR)"
Which store owns most items?,SELECT store_id FROM inventory GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE inventory (store_id VARCHAR)
What is the total amount of all payments?,SELECT SUM(amount) FROM payment,CREATE TABLE payment (amount INTEGER)
"Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.","SELECT T1.first_name, T1.last_name, T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY SUM(amount) LIMIT 1","CREATE TABLE payment (customer_id VARCHAR); CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR)"
What is the genre name of the film HUNGER ROOF?,SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id = T2.category_id JOIN film AS T3 ON T2.film_id = T3.film_id WHERE T3.title = 'HUNGER ROOF',"CREATE TABLE film_category (category_id VARCHAR, film_id VARCHAR); CREATE TABLE film (film_id VARCHAR, title VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)"
"How many films are there in each category? List the genre name, genre id and the count.","SELECT T2.name, T1.category_id, COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id","CREATE TABLE film_category (category_id VARCHAR); CREATE TABLE category (name VARCHAR, category_id VARCHAR)"
Which film has the most copies in the inventory? List both title and id.,"SELECT T1.title, T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T1.film_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (film_id VARCHAR)"
What is the film title and inventory id of the item in the inventory which was rented most frequently?,"SELECT T1.title, T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id JOIN rental AS T3 ON T2.inventory_id = T3.inventory_id GROUP BY T2.inventory_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE film (title VARCHAR, film_id VARCHAR); CREATE TABLE inventory (inventory_id VARCHAR, film_id VARCHAR); CREATE TABLE rental (inventory_id VARCHAR)"
How many languages are in these films?,SELECT COUNT(DISTINCT language_id) FROM film,CREATE TABLE film (language_id VARCHAR)
What are all the movies rated as R? List the titles.,SELECT title FROM film WHERE rating = 'R',"CREATE TABLE film (title VARCHAR, rating VARCHAR)"
Where is store 1 located?,SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE store_id = 1,"CREATE TABLE store (address_id VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)"
Which staff handled least number of payments? List the full name and the id.,"SELECT T1.first_name, T1.last_name, T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id = T2.staff_id GROUP BY T1.staff_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE payment (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)"
Which language does the film AIRPORT POLLOCK use? List the language name.,SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id = T2.language_id WHERE T1.title = 'AIRPORT POLLOCK',"CREATE TABLE film (language_id VARCHAR, title VARCHAR); CREATE TABLE LANGUAGE (name VARCHAR, language_id VARCHAR)"
How many stores are there?,SELECT COUNT(*) FROM store,CREATE TABLE store (Id VARCHAR)
How many kinds of different ratings are listed?,SELECT COUNT(DISTINCT rating) FROM film,CREATE TABLE film (rating VARCHAR)
Which movies have 'Deleted Scenes' as a substring in the special feature?,SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%',"CREATE TABLE film (title VARCHAR, special_features VARCHAR)"
How many items in inventory does store 1 have?,SELECT COUNT(*) FROM inventory WHERE store_id = 1,CREATE TABLE inventory (store_id VARCHAR)
When did the first payment happen?,SELECT payment_date FROM payment ORDER BY payment_date LIMIT 1,CREATE TABLE payment (payment_date VARCHAR)
Where does the customer with the first name Linda live? And what is her email?,"SELECT T2.address, T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id = T1.address_id WHERE T1.first_name = 'LINDA'","CREATE TABLE customer (email VARCHAR, address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)"
"Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",SELECT title FROM film WHERE LENGTH > 100 OR rating = 'PG' EXCEPT SELECT title FROM film WHERE replacement_cost > 200,"CREATE TABLE film (title VARCHAR, replacement_cost INTEGER, LENGTH VARCHAR, rating VARCHAR)"
What is the first name and the last name of the customer who made the earliest rental?,"SELECT T1.first_name, T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.rental_date LIMIT 1","CREATE TABLE customer (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE rental (customer_id VARCHAR, rental_date VARCHAR)"
What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?,"SELECT DISTINCT T1.first_name, T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id = T2.staff_id JOIN customer AS T3 ON T2.customer_id = T3.customer_id WHERE T3.first_name = 'APRIL' AND T3.last_name = 'BURNS'","CREATE TABLE customer (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE rental (staff_id VARCHAR, customer_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, last_name VARCHAR, staff_id VARCHAR)"
Which store has most the customers?,SELECT store_id FROM customer GROUP BY store_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE customer (store_id VARCHAR)
What is the largest payment amount?,SELECT amount FROM payment ORDER BY amount DESC LIMIT 1,CREATE TABLE payment (amount VARCHAR)
Where does the staff member with the first name Elsa live?,SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id = T2.address_id WHERE T1.first_name = 'Elsa',"CREATE TABLE staff (address_id VARCHAR, first_name VARCHAR); CREATE TABLE address (address VARCHAR, address_id VARCHAR)"
What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?,SELECT first_name FROM customer WHERE NOT customer_id IN (SELECT customer_id FROM rental WHERE rental_date > '2005-08-23 02:06:01'),"CREATE TABLE customer (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER); CREATE TABLE rental (first_name VARCHAR, customer_id VARCHAR, rental_date INTEGER)"
How many bank branches are there?,SELECT COUNT(*) FROM bank,CREATE TABLE bank (Id VARCHAR)
How many customers are there?,SELECT SUM(no_of_customers) FROM bank,CREATE TABLE bank (no_of_customers INTEGER)
Find the number of customers in the banks at New York City.,SELECT SUM(no_of_customers) FROM bank WHERE city = 'New York City',"CREATE TABLE bank (no_of_customers INTEGER, city VARCHAR)"
Find the average number of customers in all banks of Utah state.,SELECT AVG(no_of_customers) FROM bank WHERE state = 'Utah',"CREATE TABLE bank (no_of_customers INTEGER, state VARCHAR)"
Find the average number of customers cross all banks.,SELECT AVG(no_of_customers) FROM bank,CREATE TABLE bank (no_of_customers INTEGER)
Find the city and state of the bank branch named morningside.,"SELECT city, state FROM bank WHERE bname = 'morningside'","CREATE TABLE bank (city VARCHAR, state VARCHAR, bname VARCHAR)"
Find the branch names of banks in the New York state.,SELECT bname FROM bank WHERE state = 'New York',"CREATE TABLE bank (bname VARCHAR, state VARCHAR)"
List the name of all customers sorted by their account balance in ascending order.,SELECT cust_name FROM customer ORDER BY acc_bal,"CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)"
List the name of all different customers who have some loan sorted by their total loan amount.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount),"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)"
"Find the state, account type, and credit score of the customer whose number of loan is 0.","SELECT state, acc_type, credit_score FROM customer WHERE no_of_loans = 0","CREATE TABLE customer (state VARCHAR, acc_type VARCHAR, credit_score VARCHAR, no_of_loans VARCHAR)"
Find the number of different cities which banks are located at.,SELECT COUNT(DISTINCT city) FROM bank,CREATE TABLE bank (city VARCHAR)
Find the number of different states which banks are located at.,SELECT COUNT(DISTINCT state) FROM bank,CREATE TABLE bank (state VARCHAR)
How many distinct types of accounts are there?,SELECT COUNT(DISTINCT acc_type) FROM customer,CREATE TABLE customer (acc_type VARCHAR)
Find the name and account balance of the customer whose name includes the letter ‘a’.,"SELECT cust_name, acc_bal FROM customer WHERE cust_name LIKE '%a%'","CREATE TABLE customer (cust_name VARCHAR, acc_bal VARCHAR)"
Find the total account balance of each customer from Utah or Texas.,SELECT SUM(acc_bal) FROM customer WHERE state = 'Utah' OR state = 'Texas',"CREATE TABLE customer (acc_bal INTEGER, state VARCHAR)"
Find the name of customers who have both saving and checking account types.,SELECT cust_name FROM customer WHERE acc_type = 'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type = 'checking',"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)"
Find the name of customers who do not have an saving account.,SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = 'saving',"CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR)"
Find the name of customers who do not have a loan with a type of Mortgages.,SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE T2.loan_type = 'Mortgages',"CREATE TABLE loan (cust_id VARCHAR, loan_type VARCHAR); CREATE TABLE customer (cust_name VARCHAR); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)"
Find the name of customers who have loans of both Mortgages and Auto.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE loan_type = 'Auto',"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)"
Find the name of customers whose credit score is below the average credit scores of all customers.,SELECT cust_name FROM customer WHERE credit_score < (SELECT AVG(credit_score) FROM customer),"CREATE TABLE customer (cust_name VARCHAR, credit_score INTEGER)"
Find the branch name of the bank that has the most number of customers.,SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1,"CREATE TABLE bank (bname VARCHAR, no_of_customers VARCHAR)"
Find the name of customer who has the lowest credit score.,SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1,"CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR)"
"Find the name, account type, and account balance of the customer who has the highest credit score.","SELECT cust_name, acc_type, acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1","CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, acc_bal VARCHAR, credit_score VARCHAR)"
Find the name of customer who has the highest amount of loans.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name ORDER BY SUM(T2.amount) DESC LIMIT 1,"CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR)"
Find the state which has the most number of customers.,SELECT state FROM bank GROUP BY state ORDER BY SUM(no_of_customers) DESC LIMIT 1,"CREATE TABLE bank (state VARCHAR, no_of_customers INTEGER)"
"For each account type, find the average account balance of customers with credit score lower than 50.","SELECT AVG(acc_bal), acc_type FROM customer WHERE credit_score < 50 GROUP BY acc_type","CREATE TABLE customer (acc_type VARCHAR, acc_bal INTEGER, credit_score INTEGER)"
"For each state, find the total account balance of customers whose credit score is above 100.","SELECT SUM(acc_bal), state FROM customer WHERE credit_score > 100 GROUP BY state","CREATE TABLE customer (state VARCHAR, acc_bal INTEGER, credit_score INTEGER)"
Find the total amount of loans offered by each bank branch.,"SELECT SUM(amount), T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname","CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)"
Find the name of customers who have more than one loan.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING COUNT(*) > 1,"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)"
Find the name and account balance of the customers who have loans with a total amount of more than 5000.,"SELECT T1.cust_name, T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id GROUP BY T1.cust_name HAVING SUM(T2.amount) > 5000","CREATE TABLE loan (cust_id VARCHAR, amount INTEGER); CREATE TABLE customer (cust_name VARCHAR, acc_type VARCHAR, cust_id VARCHAR)"
Find the name of bank branch that provided the greatest total amount of loans.,SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY SUM(T2.amount) DESC LIMIT 1,"CREATE TABLE loan (branch_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)"
Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100 GROUP BY T2.bname ORDER BY SUM(T1.amount) DESC LIMIT 1,"CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR, amount INTEGER); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER)"
Find the name of bank branches that provided some loans.,SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id,"CREATE TABLE loan (branch_id VARCHAR); CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR)"
Find the name and credit score of the customers who have some loans.,"SELECT DISTINCT T1.cust_name, T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id","CREATE TABLE customer (cust_name VARCHAR, credit_score VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)"
Find the the name of the customers who have a loan with amount more than 3000.,SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id WHERE amount > 3000,"CREATE TABLE customer (cust_name VARCHAR, cust_id VARCHAR); CREATE TABLE loan (cust_id VARCHAR)"
Find the city and name of bank branches that provide business loans.,"SELECT T1.bname, T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T2.loan_type = 'Business'","CREATE TABLE bank (bname VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE loan (branch_id VARCHAR, loan_type VARCHAR)"
Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.,SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id = T2.branch_id JOIN customer AS T3 ON T1.cust_id = T3.cust_id WHERE T3.credit_score < 100,"CREATE TABLE bank (bname VARCHAR, branch_id VARCHAR); CREATE TABLE customer (cust_id VARCHAR, credit_score INTEGER); CREATE TABLE loan (branch_id VARCHAR, cust_id VARCHAR)"
Find the total amount of loans provided by bank branches in the state of New York.,SELECT SUM(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id WHERE T1.state = 'New York',"CREATE TABLE bank (branch_id VARCHAR, state VARCHAR); CREATE TABLE loan (amount INTEGER, branch_id VARCHAR)"
Find the average credit score of the customers who have some loan.,SELECT AVG(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan),"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)"
Find the average credit score of the customers who do not have any loan.,SELECT AVG(credit_score) FROM customer WHERE NOT cust_id IN (SELECT cust_id FROM loan),"CREATE TABLE loan (credit_score INTEGER, cust_id VARCHAR); CREATE TABLE customer (credit_score INTEGER, cust_id VARCHAR)"
How many assessment notes are there in total?,SELECT COUNT(*) FROM ASSESSMENT_NOTES,CREATE TABLE ASSESSMENT_NOTES (Id VARCHAR)
What are the dates of the assessment notes?,SELECT date_of_notes FROM Assessment_Notes,CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)
How many addresses have zip code 197?,"SELECT COUNT(*) FROM ADDRESSES WHERE zip_postcode = ""197""",CREATE TABLE ADDRESSES (zip_postcode VARCHAR)
How many distinct incident type codes are there?,SELECT COUNT(DISTINCT incident_type_code) FROM Behavior_Incident,CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)
Return all distinct detention type codes.,SELECT DISTINCT detention_type_code FROM Detention,CREATE TABLE Detention (detention_type_code VARCHAR)
"What are the start and end dates for incidents with incident type code ""NOISE""?","SELECT date_incident_start, date_incident_end FROM Behavior_Incident WHERE incident_type_code = ""NOISE""","CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, date_incident_end VARCHAR, incident_type_code VARCHAR)"
Return all detention summaries.,SELECT detention_summary FROM Detention,CREATE TABLE Detention (detention_summary VARCHAR)
Return the cell phone number and email address for all students.,"SELECT cell_mobile_number, email_address FROM STUDENTS","CREATE TABLE STUDENTS (cell_mobile_number VARCHAR, email_address VARCHAR)"
"What is the email of the student with first name ""Emma"" and last name ""Rohan""?","SELECT email_address FROM Students WHERE first_name = ""Emma"" AND last_name = ""Rohan""","CREATE TABLE Students (email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many distinct students have been in detention?,SELECT COUNT(DISTINCT student_id) FROM Students_in_Detention,CREATE TABLE Students_in_Detention (student_id VARCHAR)
"What is the gender of the teacher with last name ""Medhurst""?","SELECT gender FROM TEACHERS WHERE last_name = ""Medhurst""","CREATE TABLE TEACHERS (gender VARCHAR, last_name VARCHAR)"
"What is the incident type description for the incident type with code ""VIOLENCE""?","SELECT incident_type_description FROM Ref_Incident_Type WHERE incident_type_code = ""VIOLENCE""","CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR)"
Find the maximum and minimum monthly rental for all student addresses.,"SELECT MAX(monthly_rental), MIN(monthly_rental) FROM Student_Addresses",CREATE TABLE Student_Addresses (monthly_rental INTEGER)
"Find the first names of teachers whose email address contains the word ""man"".",SELECT first_name FROM Teachers WHERE email_address LIKE '%man%',"CREATE TABLE Teachers (first_name VARCHAR, email_address VARCHAR)"
List all information about the assessment notes sorted by date in ascending order.,SELECT * FROM Assessment_Notes ORDER BY date_of_notes,CREATE TABLE Assessment_Notes (date_of_notes VARCHAR)
List all cities of addresses in alphabetical order.,SELECT city FROM Addresses ORDER BY city,CREATE TABLE Addresses (city VARCHAR)
Find the first names and last names of teachers in alphabetical order of last name.,"SELECT first_name, last_name FROM Teachers ORDER BY last_name","CREATE TABLE Teachers (first_name VARCHAR, last_name VARCHAR)"
"Find all information about student addresses, and sort by monthly rental in descending order.",SELECT * FROM Student_Addresses ORDER BY monthly_rental DESC,CREATE TABLE Student_Addresses (monthly_rental VARCHAR)
Find the id and first name of the student that has the most number of assessment notes?,"SELECT T1.student_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Assessment_Notes (student_id VARCHAR)"
Find the ids and first names of the 3 teachers that have the most number of assessment notes?,"SELECT T1.teacher_id, T2.first_name FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE Assessment_Notes (teacher_id VARCHAR); CREATE TABLE Teachers (first_name VARCHAR, teacher_id VARCHAR)"
Find the id and last name of the student that has the most behavior incidents?,"SELECT T1.student_id, T2.last_name FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)"
"Find the id and last name of the teacher that has the most detentions with detention type code ""AFTER""?","SELECT T1.teacher_id, T2.last_name FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T1.detention_type_code = ""AFTER"" GROUP BY T1.teacher_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Detention (teacher_id VARCHAR, detention_type_code VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR)"
What are the id and first name of the student whose addresses have the highest average monthly rental?,"SELECT T1.student_id, T2.first_name FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","CREATE TABLE Students (first_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR)"
Find the id and city of the student address with the highest average monthly rental.,"SELECT T2.address_id, T1.city FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id ORDER BY AVG(monthly_rental) DESC LIMIT 1","CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)"
What are the code and description of the most frequent behavior incident type?,"SELECT T1.incident_type_code, T2.incident_type_description FROM Behavior_Incident AS T1 JOIN Ref_Incident_Type AS T2 ON T1.incident_type_code = T2.incident_type_code GROUP BY T1.incident_type_code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Ref_Incident_Type (incident_type_description VARCHAR, incident_type_code VARCHAR); CREATE TABLE Behavior_Incident (incident_type_code VARCHAR)"
What are the code and description of the least frequent detention type ?,"SELECT T1.detention_type_code, T2.detention_type_description FROM Detention AS T1 JOIN Ref_Detention_Type AS T2 ON T1.detention_type_code = T2.detention_type_code GROUP BY T1.detention_type_code ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Ref_Detention_Type (detention_type_description VARCHAR, detention_type_code VARCHAR); CREATE TABLE Detention (detention_type_code VARCHAR)"
"Find the dates of assessment notes for students with first name ""Fanny"".","SELECT T1.date_of_notes FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = ""Fanny""","CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR); CREATE TABLE Assessment_Notes (date_of_notes VARCHAR, student_id VARCHAR)"
"Find the texts of assessment notes for teachers with last name ""Schuster"".","SELECT T1.text_of_notes FROM Assessment_Notes AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = ""Schuster""","CREATE TABLE Assessment_Notes (text_of_notes VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)"
"Find the start and end dates of behavior incidents of students with last name ""Fahey"".","SELECT T1.date_incident_start, date_incident_end FROM Behavior_Incident AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.last_name = ""Fahey""","CREATE TABLE Behavior_Incident (date_incident_start VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, last_name VARCHAR)"
"Find the start and end dates of detentions of teachers with last name ""Schultz"".","SELECT T1.datetime_detention_start, datetime_detention_end FROM Detention AS T1 JOIN Teachers AS T2 ON T1.teacher_id = T2.teacher_id WHERE T2.last_name = ""Schultz""","CREATE TABLE Detention (datetime_detention_start VARCHAR, teacher_id VARCHAR); CREATE TABLE Teachers (teacher_id VARCHAR, last_name VARCHAR)"
What are the id and zip code of the address with the highest monthly rental?,"SELECT T2.address_id, T1.zip_postcode FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id ORDER BY monthly_rental DESC LIMIT 1","CREATE TABLE Student_Addresses (address_id VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)"
What is the cell phone number of the student whose address has the lowest monthly rental?,SELECT T2.cell_mobile_number FROM Student_Addresses AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.monthly_rental LIMIT 1,"CREATE TABLE Students (cell_mobile_number VARCHAR, student_id VARCHAR); CREATE TABLE Student_Addresses (student_id VARCHAR, monthly_rental VARCHAR)"
What are the monthly rentals of student addresses in Texas state?,"SELECT T2.monthly_rental FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = ""Texas""","CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Student_Addresses (monthly_rental VARCHAR, address_id VARCHAR)"
What are the first names and last names of students with address in Wisconsin state?,"SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id WHERE T1.state_province_county = ""Wisconsin""","CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (first_name VARCHAR, last_name VARCHAR, address_id VARCHAR)"
What are the line 1 and average monthly rentals of all student addresses?,"SELECT T1.line_1, AVG(T2.monthly_rental) FROM Addresses AS T1 JOIN Student_Addresses AS T2 ON T1.address_id = T2.address_id GROUP BY T2.address_id","CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR); CREATE TABLE Student_Addresses (monthly_rental INTEGER, address_id VARCHAR)"
"What is the zip code of the address where the teacher with first name ""Lyla"" lives?","SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T2.first_name = ""Lyla""","CREATE TABLE Teachers (address_id VARCHAR, first_name VARCHAR); CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR)"
"What are the email addresses of teachers whose address has zip code ""918""?","SELECT T2.email_address FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id WHERE T1.zip_postcode = ""918""","CREATE TABLE Addresses (address_id VARCHAR, zip_postcode VARCHAR); CREATE TABLE Teachers (email_address VARCHAR, address_id VARCHAR)"
How many students are not involved in any behavior incident?,SELECT COUNT(*) FROM STUDENTS WHERE NOT student_id IN (SELECT student_id FROM Behavior_Incident),CREATE TABLE STUDENTS (student_id VARCHAR); CREATE TABLE Behavior_Incident (student_id VARCHAR)
Find the last names of teachers who are not involved in any detention.,SELECT last_name FROM Teachers EXCEPT SELECT T1.last_name FROM Teachers AS T1 JOIN Detention AS T2 ON T1.teacher_id = T2.teacher_id,"CREATE TABLE Teachers (last_name VARCHAR); CREATE TABLE Teachers (last_name VARCHAR, teacher_id VARCHAR); CREATE TABLE Detention (teacher_id VARCHAR)"
What are the line 1 of addresses shared by some students and some teachers?,SELECT T1.line_1 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.address_id INTERSECT SELECT T1.line_1 FROM Addresses AS T1 JOIN Teachers AS T2 ON T1.address_id = T2.address_id,"CREATE TABLE Teachers (address_id VARCHAR); CREATE TABLE Students (address_id VARCHAR); CREATE TABLE Addresses (line_1 VARCHAR, address_id VARCHAR)"
Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.,"SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) = 2 INTERSECT SELECT T1.asset_id, T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id GROUP BY T1.asset_id HAVING COUNT(*) < 2","CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR); CREATE TABLE Asset_Parts (asset_id VARCHAR); CREATE TABLE Fault_Log (asset_id VARCHAR)"
How many assets does each maintenance contract contain? List the number and the contract id.,"SELECT COUNT(*), T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",CREATE TABLE Assets (maintenance_contract_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_id VARCHAR)
How many assets does each third party company supply? List the count and the company id.,"SELECT COUNT(*), T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id = T2.supplier_company_id GROUP BY T1.company_id",CREATE TABLE Assets (supplier_company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR)
Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.,"SELECT T1.company_id, T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Engineers AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id HAVING COUNT(*) >= 2 UNION SELECT T3.company_id, T3.company_name FROM Third_Party_Companies AS T3 JOIN Maintenance_Contracts AS T4 ON T3.company_id = T4.maintenance_contract_company_id GROUP BY T3.company_id HAVING COUNT(*) >= 2","CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR); CREATE TABLE Maintenance_Engineers (company_id VARCHAR); CREATE TABLE Third_Party_Companies (company_id VARCHAR, company_name VARCHAR)"
What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?,"SELECT T1.staff_name, T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id = T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name, T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id = T4.contact_staff_id","CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Fault_Log (recorded_by_staff_id VARCHAR)"
"Which engineer has visited the most times? Show the engineer id, first name and last name.","SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 GROUP BY T1.engineer_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Engineer_Visits (Id VARCHAR)"
Which parts have more than 2 faults? Show the part name and id.,"SELECT T1.part_name, T1.part_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id HAVING COUNT(*) > 2","CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)"
"List all every engineer's first name, last name, details and coresponding skill description.","SELECT T1.first_name, T1.last_name, T1.other_details, T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, other_details VARCHAR, engineer_id VARCHAR); CREATE TABLE Engineer_Skills (engineer_id VARCHAR, skill_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)"
"For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.","SELECT T1.fault_short_name, T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id = T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id","CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR, skill_id VARCHAR); CREATE TABLE Part_Faults (fault_short_name VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills (skill_description VARCHAR, skill_id VARCHAR)"
How many assets can each parts be used in? List the part name and the number.,"SELECT T1.part_name, COUNT(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name","CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Asset_Parts (part_id VARCHAR)"
What are all the fault descriptions and the fault status of all the faults recoreded in the logs?,"SELECT T1.fault_description, T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id","CREATE TABLE Fault_Log (fault_description VARCHAR, fault_log_entry_id VARCHAR); CREATE TABLE Fault_Log_Parts (fault_status VARCHAR, fault_log_entry_id VARCHAR)"
How many engineer visits are required at most for a single fault log? List the number and the log entry id.,"SELECT COUNT(*), T1.fault_log_entry_id FROM Fault_Log AS T1 JOIN Engineer_Visits AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR); CREATE TABLE Engineer_Visits (fault_log_entry_id VARCHAR)
What are all the distinct last names of all the engineers?,SELECT DISTINCT last_name FROM Maintenance_Engineers,CREATE TABLE Maintenance_Engineers (last_name VARCHAR)
How many fault status codes are recorded in the fault log parts table?,SELECT DISTINCT fault_status FROM Fault_Log_Parts,CREATE TABLE Fault_Log_Parts (fault_status VARCHAR)
Which engineers have never visited to maintain the assets? List the engineer first name and last name.,"SELECT first_name, last_name FROM Maintenance_Engineers WHERE NOT engineer_id IN (SELECT engineer_id FROM Engineer_Visits)","CREATE TABLE Engineer_Visits (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)"
"List the asset id, details, make and model for every asset.","SELECT asset_id, asset_details, asset_make, asset_model FROM Assets","CREATE TABLE Assets (asset_id VARCHAR, asset_details VARCHAR, asset_make VARCHAR, asset_model VARCHAR)"
When was the first asset acquired?,SELECT asset_acquired_date FROM Assets ORDER BY asset_acquired_date LIMIT 1,CREATE TABLE Assets (asset_acquired_date VARCHAR)
Which part fault requires the most number of skills to fix? List part id and name.,"SELECT T1.part_id, T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id = T3.part_fault_id GROUP BY T1.part_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Part_Faults (part_id VARCHAR, part_fault_id VARCHAR); CREATE TABLE Skills_Required_To_Fix (part_fault_id VARCHAR); CREATE TABLE Parts (part_id VARCHAR, part_name VARCHAR)"
Which kind of part has the least number of faults? List the part name.,SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_name ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE Parts (part_name VARCHAR, part_id VARCHAR); CREATE TABLE Part_Faults (part_id VARCHAR)"
"Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.","SELECT T1.engineer_id, T1.first_name, T1.last_name FROM Maintenance_Engineers AS T1 JOIN Engineer_Visits AS T2 ON T1.engineer_id = T2.engineer_id GROUP BY T1.engineer_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Engineer_Visits (engineer_id VARCHAR); CREATE TABLE Maintenance_Engineers (engineer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
Which staff have contacted which engineers? List the staff name and the engineer first name and last name.,"SELECT T1.staff_name, T3.first_name, T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id","CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR, engineer_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE Maintenance_Engineers (first_name VARCHAR, last_name VARCHAR, engineer_id VARCHAR)"
"Which fault log included the most number of faulty parts? List the fault log id, description and record time.","SELECT T1.fault_log_entry_id, T1.fault_description, T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Fault_Log (fault_log_entry_id VARCHAR, fault_description VARCHAR, fault_log_entry_datetime VARCHAR); CREATE TABLE Fault_Log_Parts (fault_log_entry_id VARCHAR)"
Which skill is used in fixing the most number of faults? List the skill id and description.,"SELECT T1.skill_id, T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id = T2.skill_id GROUP BY T1.skill_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Skills (skill_id VARCHAR, skill_description VARCHAR); CREATE TABLE Skills_Required_To_Fix (skill_id VARCHAR)"
What are all the distinct asset models?,SELECT DISTINCT asset_model FROM Assets,CREATE TABLE Assets (asset_model VARCHAR)
"List the all the assets make, model, details by the disposed date ascendingly.","SELECT asset_make, asset_model, asset_details FROM Assets ORDER BY asset_disposed_date","CREATE TABLE Assets (asset_make VARCHAR, asset_model VARCHAR, asset_details VARCHAR, asset_disposed_date VARCHAR)"
Which part has the least chargeable amount? List the part id and amount.,"SELECT part_id, chargeable_amount FROM Parts ORDER BY chargeable_amount LIMIT 1","CREATE TABLE Parts (part_id VARCHAR, chargeable_amount VARCHAR)"
Which company started the earliest the maintenance contract? Show the company name.,SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_start_date LIMIT 1,"CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR); CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_start_date VARCHAR)"
What is the description of the type of the company who concluded its contracts most recently?,SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id JOIN Ref_Company_Types AS T3 ON T1.company_type_code = T3.company_type_code ORDER BY T2.contract_end_date DESC LIMIT 1,"CREATE TABLE Maintenance_Contracts (maintenance_contract_company_id VARCHAR, contract_end_date VARCHAR); CREATE TABLE Third_Party_Companies (company_name VARCHAR, company_id VARCHAR, company_type_code VARCHAR); CREATE TABLE Ref_Company_Types (company_type_code VARCHAR)"
Which gender makes up the majority of the staff?,SELECT gender FROM staff GROUP BY gender ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE staff (gender VARCHAR)
How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.,"SELECT T1.staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name","CREATE TABLE Engineer_Visits (contact_staff_id VARCHAR); CREATE TABLE Staff (staff_name VARCHAR, staff_id VARCHAR)"
Which assets did not incur any fault log? List the asset model.,SELECT asset_model FROM Assets WHERE NOT asset_id IN (SELECT asset_id FROM Fault_Log),"CREATE TABLE Fault_Log (asset_model VARCHAR, asset_id VARCHAR); CREATE TABLE Assets (asset_model VARCHAR, asset_id VARCHAR)"
list the local authorities and services provided by all stations.,"SELECT local_authority, services FROM station","CREATE TABLE station (local_authority VARCHAR, services VARCHAR)"
show all train numbers and names ordered by their time from early to late.,"SELECT train_number, name FROM train ORDER BY TIME","CREATE TABLE train (train_number VARCHAR, name VARCHAR, TIME VARCHAR)"
"Give me the times and numbers of all trains that go to Chennai, ordered by time.","SELECT TIME, train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME","CREATE TABLE train (TIME VARCHAR, train_number VARCHAR, destination VARCHAR)"
How many trains have 'Express' in their names?,"SELECT COUNT(*) FROM train WHERE name LIKE ""%Express%""",CREATE TABLE train (name VARCHAR)
Find the number and time of the train that goes from Chennai to Guruvayur.,"SELECT train_number, TIME FROM train WHERE origin = 'Chennai' AND destination = 'Guruvayur'","CREATE TABLE train (train_number VARCHAR, TIME VARCHAR, origin VARCHAR, destination VARCHAR)"
Find the number of trains starting from each origin.,"SELECT origin, COUNT(*) FROM train GROUP BY origin",CREATE TABLE train (origin VARCHAR)
Find the name of the train whose route runs through greatest number of stations.,SELECT t1.name FROM train AS t1 JOIN route AS t2 ON t1.id = t2.train_id GROUP BY t2.train_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE route (train_id VARCHAR); CREATE TABLE train (name VARCHAR, id VARCHAR)"
"Find the number of trains for each station, as well as the station network name and services.","SELECT COUNT(*), t1.network_name, t1.services FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id GROUP BY t2.station_id","CREATE TABLE route (station_id VARCHAR); CREATE TABLE station (network_name VARCHAR, services VARCHAR, id VARCHAR)"
What is the average high temperature for each day of week?,"SELECT AVG(high_temperature), day_of_week FROM weekly_weather GROUP BY day_of_week","CREATE TABLE weekly_weather (day_of_week VARCHAR, high_temperature INTEGER)"
Give me the maximum low temperature and average precipitation at the Amersham station.,"SELECT MAX(t1.low_temperature), AVG(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id WHERE t2.network_name = ""Amersham""","CREATE TABLE weekly_weather (low_temperature INTEGER, precipitation INTEGER, station_id VARCHAR); CREATE TABLE station (id VARCHAR, network_name VARCHAR)"
Find names and times of trains that run through stations for the local authority Chiltern.,"SELECT t3.name, t3.time FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = ""Chiltern""","CREATE TABLE station (id VARCHAR, local_authority VARCHAR); CREATE TABLE route (station_id VARCHAR, train_id VARCHAR); CREATE TABLE train (name VARCHAR, time VARCHAR, id VARCHAR)"
How many different services are provided by all stations?,SELECT COUNT(DISTINCT services) FROM station,CREATE TABLE station (services VARCHAR)
Find the id and local authority of the station with has the highest average high temperature.,"SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id ORDER BY AVG(high_temperature) DESC LIMIT 1","CREATE TABLE weekly_weather (station_id VARCHAR); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)"
Find the id and local authority of the station whose maximum precipitation is higher than 50.,"SELECT t2.id, t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id = t2.id GROUP BY t1.station_id HAVING MAX(t1.precipitation) > 50","CREATE TABLE weekly_weather (station_id VARCHAR, precipitation INTEGER); CREATE TABLE station (id VARCHAR, local_authority VARCHAR)"
show the lowest low temperature and highest wind speed in miles per hour.,"SELECT MIN(low_temperature), MAX(wind_speed_mph) FROM weekly_weather","CREATE TABLE weekly_weather (low_temperature INTEGER, wind_speed_mph INTEGER)"
Find the origins from which more than 1 train starts.,SELECT origin FROM train GROUP BY origin HAVING COUNT(*) > 1,CREATE TABLE train (origin VARCHAR)
Find the number of professors in accounting department.,"SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE DEPT_NAME = ""Accounting""",CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)
How many professors are teaching class with code ACCT-211?,"SELECT COUNT(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE = ""ACCT-211""","CREATE TABLE CLASS (PROF_NUM VARCHAR, CRS_CODE VARCHAR)"
What is the first and last name of the professor in biology department?,"SELECT T3.EMP_FNAME, T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM = T3.EMP_NUM WHERE DEPT_NAME = ""Biology""","CREATE TABLE professor (dept_code VARCHAR, EMP_NUM VARCHAR); CREATE TABLE department (dept_code VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_LNAME VARCHAR, EMP_NUM VARCHAR)"
What are the first names and date of birth of professors teaching course ACCT-211?,"SELECT DISTINCT T1.EMP_FNAME, T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = ""ACCT-211""","CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_FNAME VARCHAR, EMP_DOB VARCHAR, EMP_NUM VARCHAR)"
How many classes are professor whose last name is Graztevski has?,SELECT COUNT(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE T1.EMP_LNAME = 'Graztevski',"CREATE TABLE CLASS (PROF_NUM VARCHAR); CREATE TABLE employee (EMP_NUM VARCHAR, EMP_LNAME VARCHAR)"
What is the code of the school where the accounting department belongs to?,"SELECT school_code FROM department WHERE dept_name = ""Accounting""","CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)"
"How many credits does course CIS-220 have, and what its description?","SELECT crs_credit, crs_description FROM course WHERE crs_code = 'CIS-220'","CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)"
what is the address of history department?,SELECT dept_address FROM department WHERE dept_name = 'History',"CREATE TABLE department (dept_address VARCHAR, dept_name VARCHAR)"
How many different locations does the school with code BUS has?,SELECT COUNT(DISTINCT dept_address) FROM department WHERE school_code = 'BUS',"CREATE TABLE department (dept_address VARCHAR, school_code VARCHAR)"
How many different locations does each school have?,"SELECT COUNT(DISTINCT dept_address), school_code FROM department GROUP BY school_code","CREATE TABLE department (school_code VARCHAR, dept_address VARCHAR)"
Find the description and credit for the course QM-261?,"SELECT crs_credit, crs_description FROM course WHERE crs_code = 'QM-261'","CREATE TABLE course (crs_credit VARCHAR, crs_description VARCHAR, crs_code VARCHAR)"
Find the number of departments in each school.,"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code","CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)"
Find the number of different departments in each school whose number of different departments is less than 5.,"SELECT COUNT(DISTINCT dept_name), school_code FROM department GROUP BY school_code HAVING COUNT(DISTINCT dept_name) < 5","CREATE TABLE department (school_code VARCHAR, dept_name VARCHAR)"
How many sections does each course has?,"SELECT COUNT(*), crs_code FROM CLASS GROUP BY crs_code",CREATE TABLE CLASS (crs_code VARCHAR)
What is the total credit does each department offer?,"SELECT SUM(crs_credit), dept_code FROM course GROUP BY dept_code","CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER)"
Find the number of classes offered for all class rooms that held at least 2 classes.,"SELECT COUNT(*), class_room FROM CLASS GROUP BY class_room HAVING COUNT(*) >= 2",CREATE TABLE CLASS (class_room VARCHAR)
Find the number of classes in each department.,"SELECT COUNT(*), dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR)
Find the number of classes in each school.,"SELECT COUNT(*), T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T2.dept_code = T3.dept_code GROUP BY T3.school_code","CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR)"
What is the number of professors for different school?,"SELECT COUNT(*), T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code","CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)"
Find the count and code of the job has most employees.,"SELECT emp_jobcode, COUNT(*) FROM employee GROUP BY emp_jobcode ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE employee (emp_jobcode VARCHAR)
Which school has the smallest amount of professors?,SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE department (school_code VARCHAR, dept_code VARCHAR); CREATE TABLE professor (dept_code VARCHAR)"
Find the number of professors with a Ph.D. degree in each department.,"SELECT COUNT(*), dept_code FROM professor WHERE prof_high_degree = 'Ph.D.' GROUP BY dept_code","CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR)"
Find the number of students for each department.,"SELECT COUNT(*), dept_code FROM student GROUP BY dept_code",CREATE TABLE student (dept_code VARCHAR)
Find the total number of hours have done for all students in each department.,"SELECT SUM(stu_hrs), dept_code FROM student GROUP BY dept_code","CREATE TABLE student (dept_code VARCHAR, stu_hrs INTEGER)"
"Find the max, average, and minimum gpa of all students in each department.","SELECT MAX(stu_gpa), AVG(stu_gpa), MIN(stu_gpa), dept_code FROM student GROUP BY dept_code","CREATE TABLE student (dept_code VARCHAR, stu_gpa INTEGER)"
What is the name and the average gpa of department whose students have the highest average gpa?,"SELECT T2.dept_name, AVG(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY AVG(T1.stu_gpa) DESC LIMIT 1","CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, dept_code VARCHAR)"
how many schools exist in total?,SELECT COUNT(DISTINCT school_code) FROM department,CREATE TABLE department (school_code VARCHAR)
How many different classes are there?,SELECT COUNT(DISTINCT class_code) FROM CLASS,CREATE TABLE CLASS (class_code VARCHAR)
How many courses are offered?,SELECT COUNT(DISTINCT crs_code) FROM CLASS,CREATE TABLE CLASS (crs_code VARCHAR)
How many departments does the college has?,SELECT COUNT(DISTINCT dept_name) FROM department,CREATE TABLE department (dept_name VARCHAR)
How many courses are offered by the Computer Info. Systems department?,"SELECT COUNT(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code = T2.dept_code WHERE dept_name = ""Computer Info. Systems""",CREATE TABLE course (dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR)
How many sections does course ACCT-211 has?,SELECT COUNT(DISTINCT class_section) FROM CLASS WHERE crs_code = 'ACCT-211',"CREATE TABLE CLASS (class_section VARCHAR, crs_code VARCHAR)"
Find the total credits of all classes offered by each department.,"SELECT SUM(T1.crs_credit), T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code GROUP BY T1.dept_code","CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_credit INTEGER, crs_code VARCHAR)"
Find the name of the department that offers the largest number of credits of all classes.,SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code = T2.crs_code JOIN department AS T3 ON T1.dept_code = T3.dept_code GROUP BY T1.dept_code ORDER BY SUM(T1.crs_credit) DESC LIMIT 1,"CREATE TABLE CLASS (crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR, crs_credit INTEGER)"
How many students enrolled in class ACCT-211?,SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code WHERE T1.crs_code = 'ACCT-211',"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)"
What is the first name of each student enrolled in class ACCT-211?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211',"CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)"
What is the first name of students enrolled in class ACCT-211 and got grade C?,SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T2.stu_num = T3.stu_num WHERE T1.crs_code = 'ACCT-211' AND T2.enroll_grade = 'C',"CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR, enroll_grade VARCHAR)"
Find the total number of employees.,SELECT COUNT(*) FROM employee,CREATE TABLE employee (Id VARCHAR)
How many professors do have a Ph.D. degree?,SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.',CREATE TABLE professor (prof_high_degree VARCHAR)
How many students are enrolled in the class taught by some professor from the accounting department?,SELECT COUNT(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code WHERE T4.dept_name = 'Accounting',"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR)"
What is the name of the department that has the largest number of students enrolled?,SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN department AS T4 ON T3.dept_code = T4.dept_code GROUP BY T3.dept_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE enroll (class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE course (dept_code VARCHAR, crs_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)"
list names of all departments ordered by their names.,SELECT dept_name FROM department ORDER BY dept_name,CREATE TABLE department (dept_name VARCHAR)
List the codes of all courses that take place in room KLR209.,SELECT class_code FROM CLASS WHERE class_room = 'KLR209',"CREATE TABLE CLASS (class_code VARCHAR, class_room VARCHAR)"
List the first name of all employees with job code PROF ordered by their date of birth.,SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' ORDER BY emp_dob,"CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR, emp_dob VARCHAR)"
Find the first names and offices of all professors sorted by alphabetical order of their first name.,"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num ORDER BY T2.emp_fname","CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
What is the first and last name of the oldest employee?,"SELECT emp_fname, emp_lname FROM employee ORDER BY emp_dob LIMIT 1","CREATE TABLE employee (emp_fname VARCHAR, emp_lname VARCHAR, emp_dob VARCHAR)"
"What is the first, last name, gpa of the youngest one among students whose GPA is above 3?","SELECT stu_fname, stu_lname, stu_gpa FROM student WHERE stu_gpa > 3 ORDER BY stu_dob DESC LIMIT 1","CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_gpa INTEGER, stu_dob VARCHAR)"
What is the first name of students who got grade C in any class?,SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE enroll_grade = 'C',CREATE TABLE student (stu_num VARCHAR); CREATE TABLE enroll (stu_num VARCHAR)
What is the name of department where has the smallest number of professors?,SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE professor (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)"
What is the name of department where has the largest number of professors with a Ph.D. degree?,"SELECT T2.dept_name, T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.prof_high_degree = 'Ph.D.' GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE professor (dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)"
What are the first names of the professors who do not teach a class.,SELECT emp_fname FROM employee WHERE emp_jobcode = 'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num,"CREATE TABLE employee (emp_fname VARCHAR, emp_jobcode VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
What is the first names of the professors from the history department who do not teach a class.,SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num = T5.prof_num,"CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
What is the last name and office of the professor from the history department?,"SELECT T1.emp_lname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T3.dept_name = 'History'","CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_num VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)"
What is department name and office for the professor whose last name is Heffington?,"SELECT T3.dept_name, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T2.dept_code = T3.dept_code WHERE T1.emp_lname = 'Heffington'","CREATE TABLE employee (emp_num VARCHAR, emp_lname VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)"
Find the last name and hire date of the professor who is in office DRE 102.,"SELECT T1.emp_lname, T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'","CREATE TABLE professor (emp_num VARCHAR, prof_office VARCHAR); CREATE TABLE employee (emp_lname VARCHAR, emp_hiredate VARCHAR, emp_num VARCHAR)"
What is the code of the course which the student whose last name is Smithson took?,SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num WHERE T3.stu_lname = 'Smithson',"CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR); CREATE TABLE CLASS (crs_code VARCHAR, class_code VARCHAR)"
What are the description and credit of the course which the student whose last name is Smithson took?,"SELECT T4.crs_description, T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code = T2.class_code JOIN student AS T3 ON T3.stu_num = T2.stu_num JOIN course AS T4 ON T4.crs_code = T1.crs_code WHERE T3.stu_lname = 'Smithson'","CREATE TABLE student (stu_num VARCHAR, stu_lname VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_credit VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (class_code VARCHAR, stu_num VARCHAR)"
How many professors who has a either Ph.D. or MA degree?,SELECT COUNT(*) FROM professor WHERE prof_high_degree = 'Ph.D.' OR prof_high_degree = 'MA',CREATE TABLE professor (prof_high_degree VARCHAR)
How many professors who are from either Accounting or Biology department?,SELECT COUNT(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T2.dept_name = 'Accounting' OR T2.dept_name = 'Biology',"CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (dept_code VARCHAR)"
Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.,SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num = T2.prof_num WHERE crs_code = 'QM-261',"CREATE TABLE CLASS (prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first name of student who is taking classes from accounting and Computer Info. Systems departments,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code JOIN department AS T5 ON T5.dept_code = T4.dept_code WHERE T5.dept_name = 'Computer Info. Systems',"CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE course (crs_code VARCHAR, dept_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)"
What is the average gpa of the students enrolled in the course with code ACCT-211?,SELECT AVG(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T1.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211',"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_gpa INTEGER, stu_num VARCHAR)"
"What is the first name, gpa and phone number of the top 5 students with highest gpa?","SELECT stu_gpa, stu_phone, stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5","CREATE TABLE student (stu_gpa VARCHAR, stu_phone VARCHAR, stu_fname VARCHAR)"
What is the department name of the students with lowest gpa belongs to?,SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code ORDER BY stu_gpa LIMIT 1,"CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)"
Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.,"SELECT stu_fname, stu_gpa FROM student WHERE stu_gpa < (SELECT AVG(stu_gpa) FROM student)","CREATE TABLE student (stu_fname VARCHAR, stu_gpa INTEGER)"
Find the name and address of the department that has the highest number of students.,"SELECT T2.dept_name, T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)"
"Find the name, address, number of students in the departments that have the top 3 highest number of students.","SELECT T2.dept_name, T2.dept_address, COUNT(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE student (dept_code VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_address VARCHAR, dept_code VARCHAR)"
Find the first name and office of the professor who is in the history department and has a Ph.D. degree.,"SELECT T1.emp_fname, T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T3.dept_code = T2.dept_code WHERE T3.dept_name = 'History' AND T2.prof_high_degree = 'Ph.D.'","CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names of all instructors who have taught some course and the course code.,"SELECT T2.emp_fname, T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num","CREATE TABLE CLASS (crs_code VARCHAR, prof_num VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names of all instructors who have taught some course and the course description.,"SELECT T2.emp_fname, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code","CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names and offices of all instructors who have taught some course and also find the course description.,"SELECT T2.emp_fname, T4.prof_office, T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num","CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names and offices of all instructors who have taught some course and the course description and the department name.,"SELECT T2.emp_fname, T4.prof_office, T3.crs_description, T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num JOIN department AS T5 ON T4.dept_code = T5.dept_code","CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR, crs_code VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR)"
Find names of all students who took some course and the course description.,"SELECT T1.stu_fname, T1.stu_lname, T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code JOIN course AS T4 ON T3.crs_code = T4.crs_code","CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE course (crs_description VARCHAR, crs_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)"
Find names of all students who took some course and got A or C.,"SELECT T1.stu_fname, T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A'","CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_lname VARCHAR, stu_num VARCHAR)"
Find the first names of all professors in the Accounting department who is teaching some course and the class room.,"SELECT T2.emp_fname, T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Accounting'","CREATE TABLE CLASS (class_room VARCHAR, prof_num VARCHAR); CREATE TABLE professor (emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.,"SELECT DISTINCT T2.emp_fname, T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN professor AS T3 ON T2.emp_num = T3.emp_num JOIN department AS T4 ON T4.dept_code = T3.dept_code WHERE T4.dept_name = 'Computer Info. Systems'","CREATE TABLE professor (prof_high_degree VARCHAR, emp_num VARCHAR, dept_code VARCHAR); CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)"
What is the last name of the student who got a grade A in the class with code 10018.,SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'A' AND T2.class_code = 10018,"CREATE TABLE enroll (stu_num VARCHAR, enroll_grade VARCHAR, class_code VARCHAR); CREATE TABLE student (stu_lname VARCHAR, stu_num VARCHAR)"
Find the first name and office of history professor who did not get a Ph.D. degree.,"SELECT T2.emp_fname, T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num JOIN department AS T3 ON T1.dept_code = T3.dept_code WHERE T3.dept_name = 'History' AND T1.prof_high_degree <> 'Ph.D.'","CREATE TABLE department (dept_code VARCHAR, dept_name VARCHAR); CREATE TABLE professor (prof_office VARCHAR, emp_num VARCHAR, dept_code VARCHAR, prof_high_degree VARCHAR); CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR)"
Find the first names of professors who are teaching more than one class.,SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY T1.prof_num HAVING COUNT(*) > 1,"CREATE TABLE employee (emp_fname VARCHAR, emp_num VARCHAR); CREATE TABLE CLASS (prof_num VARCHAR)"
Find the first names of students who took exactly one class.,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num GROUP BY T2.stu_num HAVING COUNT(*) = 1,"CREATE TABLE enroll (stu_num VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR)"
"Find the name of department that offers the class whose description has the word ""Statistics"".",SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code WHERE T1.crs_description LIKE '%Statistics%',"CREATE TABLE course (dept_code VARCHAR, crs_description VARCHAR); CREATE TABLE department (dept_name VARCHAR, dept_code VARCHAR)"
What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?,SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num JOIN CLASS AS T3 ON T2.class_code = T3.class_code WHERE T3.crs_code = 'ACCT-211' AND T1.stu_lname LIKE 'S%',"CREATE TABLE enroll (stu_num VARCHAR, class_code VARCHAR); CREATE TABLE CLASS (class_code VARCHAR, crs_code VARCHAR); CREATE TABLE student (stu_fname VARCHAR, stu_num VARCHAR, stu_lname VARCHAR)"
How many clubs are there?,SELECT COUNT(*) FROM club,CREATE TABLE club (Id VARCHAR)
List the distinct region of clubs in ascending alphabetical order.,SELECT DISTINCT Region FROM club ORDER BY Region,CREATE TABLE club (Region VARCHAR)
What is the average number of gold medals for clubs?,SELECT AVG(Gold) FROM club_rank,CREATE TABLE club_rank (Gold INTEGER)
What are the types and countries of competitions?,"SELECT Competition_type, Country FROM competition","CREATE TABLE competition (Competition_type VARCHAR, Country VARCHAR)"
"What are the distinct years in which the competitions type is not ""Tournament""?","SELECT DISTINCT YEAR FROM competition WHERE Competition_type <> ""Tournament""","CREATE TABLE competition (YEAR VARCHAR, Competition_type VARCHAR)"
What are the maximum and minimum number of silver medals for clubs.,"SELECT MAX(Silver), MIN(Silver) FROM club_rank",CREATE TABLE club_rank (Silver INTEGER)
How many clubs have total medals less than 10?,SELECT COUNT(*) FROM club_rank WHERE Total < 10,CREATE TABLE club_rank (Total INTEGER)
List all club names in ascending order of start year.,SELECT name FROM club ORDER BY Start_year,"CREATE TABLE club (name VARCHAR, Start_year VARCHAR)"
List all club names in descending alphabetical order.,SELECT name FROM club ORDER BY name DESC,CREATE TABLE club (name VARCHAR)
Please show the names and the players of clubs.,"SELECT T1.name, T2.Player_id FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID","CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Player_id VARCHAR, Club_ID VARCHAR)"
"Show the names of clubs that have players with position ""Right Wing"".","SELECT T1.name FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T2.Position = ""Right Wing""","CREATE TABLE club (name VARCHAR, Club_ID VARCHAR); CREATE TABLE player (Club_ID VARCHAR, Position VARCHAR)"
"What is the average points of players from club with name ""AIB"".","SELECT AVG(T2.Points) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID WHERE T1.name = ""AIB""","CREATE TABLE player (Points INTEGER, Club_ID VARCHAR); CREATE TABLE club (Club_ID VARCHAR, name VARCHAR)"
List the position of players and the average number of points of players of each position.,"SELECT POSITION, AVG(Points) FROM player GROUP BY POSITION","CREATE TABLE player (POSITION VARCHAR, Points INTEGER)"
List the position of players with average number of points scored by players of that position bigger than 20.,SELECT POSITION FROM player GROUP BY name HAVING AVG(Points) >= 20,"CREATE TABLE player (POSITION VARCHAR, name VARCHAR, Points INTEGER)"
List the types of competition and the number of competitions of each type.,"SELECT Competition_type, COUNT(*) FROM competition GROUP BY Competition_type",CREATE TABLE competition (Competition_type VARCHAR)
List the most common type of competition.,SELECT Competition_type FROM competition GROUP BY Competition_type ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE competition (Competition_type VARCHAR)
List the types of competition that have at most five competitions of that type.,SELECT Competition_type FROM competition GROUP BY Competition_type HAVING COUNT(*) <= 5,CREATE TABLE competition (Competition_type VARCHAR)
List the names of clubs that do not have any players.,SELECT name FROM CLub WHERE NOT Club_ID IN (SELECT Club_ID FROM player),"CREATE TABLE player (name VARCHAR, Club_ID VARCHAR); CREATE TABLE CLub (name VARCHAR, Club_ID VARCHAR)"
What are the positions with both players having more than 20 points and less than 10 points.,SELECT POSITION FROM player WHERE Points > 20 INTERSECT SELECT POSITION FROM player WHERE Points < 10,"CREATE TABLE player (POSITION VARCHAR, Points INTEGER)"
Show total points of all players.,SELECT SUM(Points) FROM player,CREATE TABLE player (Points INTEGER)
how many different positions are there?,SELECT COUNT(DISTINCT POSITION) FROM player,CREATE TABLE player (POSITION VARCHAR)
what are the name of players who get more than the average points.,SELECT name FROM player WHERE points > (SELECT AVG(points) FROM player),"CREATE TABLE player (name VARCHAR, points INTEGER)"
find the number of players whose points are lower than 30 in each position.,"SELECT COUNT(*), POSITION FROM player WHERE points < 30 GROUP BY POSITION","CREATE TABLE player (POSITION VARCHAR, points INTEGER)"
which country did participated in the most number of Tournament competitions?,SELECT country FROM competition WHERE competition_type = 'Tournament' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)"
which countries did participated in both Friendly and Tournament type competitions.,SELECT country FROM competition WHERE competition_type = 'Friendly' INTERSECT SELECT country FROM competition WHERE competition_type = 'Tournament',"CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)"
Find the countries that have never participated in any competition with Friendly type.,SELECT country FROM competition EXCEPT SELECT country FROM competition WHERE competition_type = 'Friendly',"CREATE TABLE competition (country VARCHAR, competition_type VARCHAR)"
How many furniture components are there in total?,SELECT SUM(num_of_component) FROM furniture,CREATE TABLE furniture (num_of_component INTEGER)
Return the name and id of the furniture with the highest market rate.,"SELECT name, furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1","CREATE TABLE furniture (name VARCHAR, furniture_id VARCHAR, market_rate VARCHAR)"
find the total market rate of the furnitures that have the top 2 market shares.,SELECT SUM(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2,CREATE TABLE furniture (market_rate INTEGER)
Find the component amounts and names of all furnitures that have more than 10 components.,"SELECT Num_of_Component, name FROM furniture WHERE Num_of_Component > 10","CREATE TABLE furniture (Num_of_Component INTEGER, name VARCHAR)"
Find the name and component amount of the least popular furniture.,"SELECT name, Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1","CREATE TABLE furniture (name VARCHAR, Num_of_Component VARCHAR, market_rate VARCHAR)"
Find the names of furnitures whose prices are lower than the highest price.,SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID WHERE t2.Price_in_Dollar < (SELECT MAX(Price_in_Dollar) FROM furniture_manufacte),"CREATE TABLE furniture_manufacte (Furniture_ID VARCHAR, Price_in_Dollar INTEGER); CREATE TABLE furniture (name VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture_manufacte (Price_in_Dollar INTEGER)"
Which manufacturer has the most number of shops? List its name and year of opening.,"SELECT open_year, name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1","CREATE TABLE manufacturer (open_year VARCHAR, name VARCHAR, num_of_shops VARCHAR)"
Find the average number of factories for the manufacturers that have more than 20 shops.,SELECT AVG(Num_of_Factories) FROM manufacturer WHERE num_of_shops > 20,"CREATE TABLE manufacturer (Num_of_Factories INTEGER, num_of_shops INTEGER)"
List all manufacturer names and ids ordered by their opening year.,"SELECT name, manufacturer_id FROM manufacturer ORDER BY open_year","CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR, open_year VARCHAR)"
Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.,"SELECT name, open_year FROM manufacturer WHERE num_of_shops > 10 OR Num_of_Factories < 10","CREATE TABLE manufacturer (name VARCHAR, open_year VARCHAR, num_of_shops VARCHAR, Num_of_Factories VARCHAR)"
what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.,"SELECT MAX(num_of_shops), AVG(Num_of_Factories) FROM manufacturer WHERE open_year < 1990","CREATE TABLE manufacturer (num_of_shops INTEGER, Num_of_Factories INTEGER, open_year INTEGER)"
Find the id and number of shops for the company that produces the most expensive furniture.,"SELECT t1.manufacturer_id, t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1","CREATE TABLE manufacturer (manufacturer_id VARCHAR, num_of_shops VARCHAR); CREATE TABLE furniture_manufacte (manufacturer_id VARCHAR, Price_in_Dollar VARCHAR)"
Find the number of funiture types produced by each manufacturer as well as the company names.,"SELECT COUNT(*), t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id","CREATE TABLE furniture_manufacte (manufacturer_id VARCHAR); CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR)"
Give me the names and prices of furnitures which some companies are manufacturing.,"SELECT t1.name, t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID","CREATE TABLE furniture_manufacte (price_in_dollar VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture (name VARCHAR, Furniture_ID VARCHAR)"
Find the market shares and names of furnitures which no any company is producing in our records.,"SELECT Market_Rate, name FROM furniture WHERE NOT Furniture_ID IN (SELECT Furniture_ID FROM furniture_manufacte)","CREATE TABLE furniture (Market_Rate VARCHAR, name VARCHAR, Furniture_ID VARCHAR); CREATE TABLE furniture_manufacte (Market_Rate VARCHAR, name VARCHAR, Furniture_ID VARCHAR)"
Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.,SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component < 6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID = t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id = t3.manufacturer_id WHERE t1.num_of_component > 10,"CREATE TABLE furniture_manufacte (Furniture_ID VARCHAR, manufacturer_id VARCHAR); CREATE TABLE manufacturer (name VARCHAR, manufacturer_id VARCHAR); CREATE TABLE furniture (Furniture_ID VARCHAR, num_of_component INTEGER)"
Display the first name and department name for each employee.,"SELECT T1.first_name, T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id","CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, department_id VARCHAR)"
"List the full name (first and last name), and salary for those employees who earn below 6000.","SELECT first_name, last_name, salary FROM employees WHERE salary < 6000","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER)"
"Display the first name, and department number for all employees whose last name is ""McEwen"".","SELECT first_name, department_id FROM employees WHERE last_name = 'McEwen'","CREATE TABLE employees (first_name VARCHAR, department_id VARCHAR, last_name VARCHAR)"
Return all the information for all employees without any department number.,"SELECT * FROM employees WHERE department_id = ""null""",CREATE TABLE employees (department_id VARCHAR)
Display all the information about the department Marketing.,SELECT * FROM departments WHERE department_name = 'Marketing',CREATE TABLE departments (department_name VARCHAR)
when is the hire date for those employees whose first name does not containing the letter M?,SELECT hire_date FROM employees WHERE NOT first_name LIKE '%M%',"CREATE TABLE employees (hire_date VARCHAR, first_name VARCHAR)"
"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.","SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%'","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, salary VARCHAR, department_id VARCHAR)"
"display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.","SELECT first_name, last_name, hire_date, salary, department_id FROM employees WHERE NOT first_name LIKE '%M%' ORDER BY department_id","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, salary VARCHAR, department_id VARCHAR)"
what is the phone number of employees whose salary is in the range of 8000 and 12000?,SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000,"CREATE TABLE employees (phone_number VARCHAR, salary INTEGER)"
display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.,"SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct <> ""null"" OR department_id <> 40","CREATE TABLE employees (department_id VARCHAR, salary VARCHAR, commission_pct VARCHAR)"
What are the full name (first and last name) and salary for all employees who does not have any value for commission?,"SELECT first_name, last_name, salary FROM employees WHERE commission_pct = ""null""","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary VARCHAR, commission_pct VARCHAR)"
"Display the first and last name, and salary for those employees whose first name is ending with the letter m.","SELECT first_name, last_name, salary FROM employees WHERE first_name LIKE '%m'","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary VARCHAR)"
"Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.","SELECT job_id, hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'","CREATE TABLE employees (job_id VARCHAR, hire_date INTEGER)"
What are the first and last name for those employees who works either in department 70 or 90?,"SELECT first_name, last_name FROM employees WHERE department_id = 70 OR department_id = 90","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR)"
Find the salary and manager number for those employees who is working under a manager.,"SELECT salary, manager_id FROM employees WHERE manager_id <> ""null""","CREATE TABLE employees (salary VARCHAR, manager_id VARCHAR)"
display all the details from Employees table for those employees who was hired before 2002-06-21.,SELECT * FROM employees WHERE hire_date < '2002-06-21',CREATE TABLE employees (hire_date INTEGER)
display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.,SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC,"CREATE TABLE employees (salary VARCHAR, first_name VARCHAR)"
"display those employees who joined after 7th September, 1987.",SELECT * FROM employees WHERE hire_date > '1987-09-07',CREATE TABLE employees (hire_date INTEGER)
display the job title of jobs which minimum salary is greater than 9000.,SELECT job_title FROM jobs WHERE min_salary > 9000,"CREATE TABLE jobs (job_title VARCHAR, min_salary INTEGER)"
"display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.","SELECT job_title, max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000","CREATE TABLE jobs (job_title VARCHAR, max_salary INTEGER, min_salary VARCHAR)"
display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.,"SELECT email FROM employees WHERE commission_pct = ""null"" AND salary BETWEEN 7000 AND 12000 AND department_id = 50","CREATE TABLE employees (email VARCHAR, department_id VARCHAR, commission_pct VARCHAR, salary VARCHAR)"
display the employee ID for each employee and the date on which he ended his previous job.,"SELECT employee_id, MAX(end_date) FROM job_history GROUP BY employee_id","CREATE TABLE job_history (employee_id VARCHAR, end_date INTEGER)"
display those departments where more than ten employees work who got a commission percentage.,SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10,"CREATE TABLE employees (department_id VARCHAR, commission_pct VARCHAR)"
Find the ids of the departments where any manager is managing 4 or more employees.,"SELECT DISTINCT department_id FROM employees GROUP BY department_id, manager_id HAVING COUNT(employee_id) >= 4","CREATE TABLE employees (department_id VARCHAR, manager_id VARCHAR, employee_id VARCHAR)"
display the average salary of employees for each department who gets a commission percentage.,"SELECT department_id, AVG(salary) FROM employees WHERE commission_pct <> ""null"" GROUP BY department_id","CREATE TABLE employees (department_id VARCHAR, salary INTEGER, commission_pct VARCHAR)"
display the country ID and number of cities for each country.,"SELECT country_id, COUNT(*) FROM locations GROUP BY country_id",CREATE TABLE locations (country_id VARCHAR)
display job ID for those jobs that were done by two or more for more than 300 days.,SELECT job_id FROM job_history WHERE end_date - start_date > 300 GROUP BY job_id HAVING COUNT(*) >= 2,"CREATE TABLE job_history (job_id VARCHAR, end_date VARCHAR, start_date VARCHAR)"
display the ID for those employees who did two or more jobs in the past.,SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*) >= 2,CREATE TABLE job_history (employee_id VARCHAR)
Find employee with ID and name of the country presently where (s)he is working.,"SELECT T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id","CREATE TABLE countries (country_name VARCHAR, country_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR); CREATE TABLE locations (location_id VARCHAR, country_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, department_id VARCHAR)"
display the department name and number of employees in each of the department.,"SELECT T2.department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name","CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (department_id VARCHAR)"
Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?,SELECT * FROM job_history AS T1 JOIN employees AS T2 ON T1.employee_id = T2.employee_id WHERE T2.salary >= 12000,"CREATE TABLE job_history (employee_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, salary VARCHAR)"
display job title and average salary of employees.,"SELECT job_title, AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id GROUP BY T2.job_title","CREATE TABLE jobs (job_title VARCHAR, job_id VARCHAR); CREATE TABLE employees (job_id VARCHAR)"
What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?,"SELECT first_name, last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE employee_id = 163)","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER, employee_id VARCHAR)"
return the smallest salary for every departments.,"SELECT MIN(salary), department_id FROM employees GROUP BY department_id","CREATE TABLE employees (department_id VARCHAR, salary INTEGER)"
Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.,"SELECT first_name, last_name, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR, salary INTEGER)"
Find the employee id for all employees who earn more than the average salary.,SELECT employee_id FROM employees WHERE salary > (SELECT AVG(salary) FROM employees),"CREATE TABLE employees (employee_id VARCHAR, salary INTEGER)"
display the employee id and salary of all employees who report to Payam (first name).,"SELECT employee_id, salary FROM employees WHERE manager_id = (SELECT employee_id FROM employees WHERE first_name = 'Payam')","CREATE TABLE employees (employee_id VARCHAR, salary VARCHAR, manager_id VARCHAR, first_name VARCHAR)"
find the name of all departments that do actually have one or more employees assigned to them.,SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id,"CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR); CREATE TABLE employees (department_id VARCHAR)"
get the details of employees who manage a department.,SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id,"CREATE TABLE departments (department_id VARCHAR, manager_id VARCHAR); CREATE TABLE employees (department_id VARCHAR, employee_id VARCHAR)"
Find the job ID for those jobs which average salary is above 8000.,SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000,"CREATE TABLE employees (job_id VARCHAR, salary INTEGER)"
display the employee ID and job name for all those jobs in department 80.,"SELECT T1.employee_id, T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80","CREATE TABLE jobs (job_title VARCHAR, job_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR, job_id VARCHAR, department_id VARCHAR)"
What is the first name and job id for all employees in the Finance department?,"SELECT T1.first_name, T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance'","CREATE TABLE departments (department_id VARCHAR, department_name VARCHAR); CREATE TABLE employees (first_name VARCHAR, job_id VARCHAR, department_id VARCHAR)"
display all the information of the employees whose salary if within the range of smallest salary and 2500.,SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500,CREATE TABLE employees (salary INTEGER)
Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.,SELECT * FROM employees WHERE NOT department_id IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200),"CREATE TABLE departments (department_id VARCHAR, manager_id INTEGER); CREATE TABLE employees (department_id VARCHAR, manager_id INTEGER)"
display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.,"SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = ""Clara"")","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, department_id VARCHAR)"
display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.,"SELECT first_name, last_name, hire_date FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE first_name = ""Clara"") AND first_name <> ""Clara""","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, hire_date VARCHAR, department_id VARCHAR)"
display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a ’T’.,"SELECT employee_id, first_name, last_name FROM employees WHERE department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%T%')","CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, department_id VARCHAR)"
"display the employee number, name( first name and last name ), and salary for all employees who earn more than the average salary and who work in a department with any employee with a 'J' in their first name.","SELECT employee_id, first_name, last_name, salary FROM employees WHERE salary > (SELECT AVG(salary) FROM employees) AND department_id IN (SELECT department_id FROM employees WHERE first_name LIKE '%J%')","CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, salary INTEGER, department_id VARCHAR)"
display the employee number and job id for all employees whose salary is smaller than any salary of those employees whose job title is MK_MAN.,"SELECT employee_id, job_id FROM employees WHERE salary < (SELECT MIN(salary) FROM employees WHERE job_id = 'MK_MAN')","CREATE TABLE employees (employee_id VARCHAR, job_id VARCHAR, salary INTEGER)"
"display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.","SELECT employee_id, first_name, last_name, job_id FROM employees WHERE salary > (SELECT MAX(salary) FROM employees WHERE job_id = 'PU_MAN')","CREATE TABLE employees (employee_id VARCHAR, first_name VARCHAR, last_name VARCHAR, job_id VARCHAR, salary INTEGER)"
display the department id and the total salary for those departments which contains at least two employees.,"SELECT department_id, SUM(salary) FROM employees GROUP BY department_id HAVING COUNT(*) >= 2","CREATE TABLE employees (department_id VARCHAR, salary INTEGER)"
display all the information of those employees who did not have any job in the past.,SELECT * FROM employees WHERE NOT employee_id IN (SELECT employee_id FROM job_history),CREATE TABLE job_history (employee_id VARCHAR); CREATE TABLE employees (employee_id VARCHAR)
"display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.","SELECT first_name, last_name, salary, department_id, MAX(salary) FROM employees GROUP BY department_id","CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, salary INTEGER, department_id VARCHAR)"
"display the first and last name, department, city, and state province for each employee.","SELECT T1.first_name, T1.last_name, T2.department_name, T3.city, T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id","CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR, location_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR); CREATE TABLE locations (city VARCHAR, state_province VARCHAR, location_id VARCHAR)"
"display those employees who contain a letter z to their first name and also display their last name, city.","SELECT T1.first_name, T1.last_name, T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T1.first_name LIKE '%z%'","CREATE TABLE locations (city VARCHAR, location_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR)"
"display the department name, city, and state province for each department.","SELECT T1.department_name, T2.city, T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id = T1.location_id","CREATE TABLE locations (city VARCHAR, state_province VARCHAR, location_id VARCHAR); CREATE TABLE departments (department_name VARCHAR, location_id VARCHAR)"
display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.,"SELECT T1.first_name, T1.last_name, T1.employee_id, T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id JOIN countries AS T4 ON T3.country_id = T4.country_id","CREATE TABLE countries (country_name VARCHAR, country_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR); CREATE TABLE locations (location_id VARCHAR, country_id VARCHAR); CREATE TABLE employees (first_name VARCHAR, last_name VARCHAR, employee_id VARCHAR, department_id VARCHAR)"
display the department name and number of employees in each of the department.,"SELECT department_name, COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",CREATE TABLE employees (department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR)
"display the full name (first and last name), and salary of those employees who working in any department located in London.","SELECT first_name, last_name, salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id JOIN locations AS T3 ON T2.location_id = T3.location_id WHERE T3.city = 'London'","CREATE TABLE locations (location_id VARCHAR, city VARCHAR); CREATE TABLE employees (department_id VARCHAR); CREATE TABLE departments (department_id VARCHAR, location_id VARCHAR)"
What is the name of the song that was released in the most recent year?,"SELECT song_name, releasedate FROM song ORDER BY releasedate DESC LIMIT 1","CREATE TABLE song (song_name VARCHAR, releasedate VARCHAR)"
What is the id of the longest song?,SELECT f_id FROM files ORDER BY duration DESC LIMIT 1,"CREATE TABLE files (f_id VARCHAR, duration VARCHAR)"
Find the names of all English songs.,"SELECT song_name FROM song WHERE languages = ""english""","CREATE TABLE song (song_name VARCHAR, languages VARCHAR)"
What are the id of songs whose format is mp3.,"SELECT f_id FROM files WHERE formats = ""mp3""","CREATE TABLE files (f_id VARCHAR, formats VARCHAR)"
List the name and country of origin for all singers who have produced songs with rating above 9.,"SELECT DISTINCT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > 9","CREATE TABLE song (artist_name VARCHAR, rating INTEGER); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)"
List the file size and format for all songs that have resolution lower than 800.,"SELECT DISTINCT T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < 800","CREATE TABLE song (f_id VARCHAR, resolution INTEGER); CREATE TABLE files (file_size VARCHAR, formats VARCHAR, f_id VARCHAR)"
What is the name of the artist who produced the shortest song?,SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id = T2.f_id ORDER BY T2.duration LIMIT 1,"CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (artist_name VARCHAR, f_id VARCHAR)"
What are the names and countries of origin for the artists who produced the top three highly rated songs.,"SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating DESC LIMIT 3","CREATE TABLE song (artist_name VARCHAR, rating VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)"
How many songs have 4 minute duration?,"SELECT COUNT(*) FROM files WHERE duration LIKE ""4:%""",CREATE TABLE files (duration VARCHAR)
How many artists are from Bangladesh?,"SELECT COUNT(*) FROM artist WHERE country = ""Bangladesh""",CREATE TABLE artist (country VARCHAR)
What is the average rating of songs produced by female artists?,"SELECT AVG(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = ""Female""","CREATE TABLE song (rating INTEGER, artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, gender VARCHAR)"
What is the most popular file format?,SELECT formats FROM files GROUP BY formats ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE files (formats VARCHAR)
Find the names of the artists who are from UK and have produced English songs.,"SELECT artist_name FROM artist WHERE country = ""UK"" INTERSECT SELECT artist_name FROM song WHERE languages = ""english""","CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, languages VARCHAR); CREATE TABLE song (artist_name VARCHAR, country VARCHAR, languages VARCHAR)"
Find the id of songs that are available in mp4 format and have resolution lower than 1000.,"SELECT f_id FROM files WHERE formats = ""mp4"" INTERSECT SELECT f_id FROM song WHERE resolution < 1000","CREATE TABLE song (f_id VARCHAR, formats VARCHAR, resolution INTEGER); CREATE TABLE files (f_id VARCHAR, formats VARCHAR, resolution INTEGER)"
What is the country of origin of the artist who is female and produced a song in Bangla?,"SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = ""Female"" AND T2.languages = ""bangla""","CREATE TABLE artist (country VARCHAR, artist_name VARCHAR, gender VARCHAR); CREATE TABLE song (artist_name VARCHAR, languages VARCHAR)"
What is the average duration of songs that have mp3 format and resolution below 800?,"SELECT AVG(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = ""mp3"" AND T2.resolution < 800","CREATE TABLE files (duration INTEGER, f_id VARCHAR, formats VARCHAR); CREATE TABLE song (f_id VARCHAR, resolution VARCHAR)"
What is the number of artists for each gender?,"SELECT COUNT(*), gender FROM artist GROUP BY gender",CREATE TABLE artist (gender VARCHAR)
What is the average rating of songs for each language?,"SELECT AVG(rating), languages FROM song GROUP BY languages","CREATE TABLE song (languages VARCHAR, rating INTEGER)"
Return the gender and name of artist who produced the song with the lowest resolution.,"SELECT T1.gender, T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.resolution LIMIT 1","CREATE TABLE artist (gender VARCHAR, artist_name VARCHAR); CREATE TABLE song (artist_name VARCHAR, resolution VARCHAR)"
"For each file format, return the number of artists who released songs in that format.","SELECT COUNT(*), formats FROM files GROUP BY formats",CREATE TABLE files (formats VARCHAR)
Find the distinct names of all songs that have a higher resolution than some songs in English.,"SELECT DISTINCT song_name FROM song WHERE resolution > (SELECT MIN(resolution) FROM song WHERE languages = ""english"")","CREATE TABLE song (song_name VARCHAR, resolution INTEGER, languages VARCHAR)"
What are the names of all songs that have a lower rating than some song of blues genre?,"SELECT song_name FROM song WHERE rating < (SELECT MAX(rating) FROM song WHERE genre_is = ""blues"")","CREATE TABLE song (song_name VARCHAR, rating INTEGER, genre_is VARCHAR)"
"What is the name and country of origin of the artist who released a song that has ""love"" in its title?","SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE ""%love%""","CREATE TABLE song (artist_name VARCHAR, song_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)"
List the name and gender for all artists who released songs in March.,"SELECT T1.artist_name, T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.releasedate LIKE ""%Mar%""","CREATE TABLE song (artist_name VARCHAR, releasedate VARCHAR); CREATE TABLE artist (artist_name VARCHAR, gender VARCHAR)"
"List the names of all genres in alphabetical oder, together with its ratings.","SELECT g_name, rating FROM genre ORDER BY g_name","CREATE TABLE genre (g_name VARCHAR, rating VARCHAR)"
Give me a list of the names of all songs ordered by their resolution.,SELECT song_name FROM song ORDER BY resolution,"CREATE TABLE song (song_name VARCHAR, resolution VARCHAR)"
What are the ids of songs that are available in either mp4 format or have resolution above 720?,"SELECT f_id FROM files WHERE formats = ""mp4"" UNION SELECT f_id FROM song WHERE resolution > 720","CREATE TABLE song (f_id VARCHAR, formats VARCHAR, resolution INTEGER); CREATE TABLE files (f_id VARCHAR, formats VARCHAR, resolution INTEGER)"
List the names of all songs that have 4 minute duration or are in English.,"SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE ""4:%"" UNION SELECT song_name FROM song WHERE languages = ""english""","CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (song_name VARCHAR, f_id VARCHAR); CREATE TABLE song (song_name VARCHAR, languages VARCHAR)"
What is the language used most often in the songs?,SELECT languages FROM song GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE song (languages VARCHAR)
What is the language that was used most often in songs with resolution above 500?,SELECT artist_name FROM song WHERE resolution > 500 GROUP BY languages ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE song (artist_name VARCHAR, languages VARCHAR, resolution INTEGER)"
What are the names of artists who are Male and are from UK?,"SELECT artist_name FROM artist WHERE country = ""UK"" AND gender = ""Male""","CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, gender VARCHAR)"
Find the names of songs whose genre is modern or language is English.,"SELECT song_name FROM song WHERE genre_is = ""modern"" OR languages = ""english""","CREATE TABLE song (song_name VARCHAR, genre_is VARCHAR, languages VARCHAR)"
Return the names of songs for which format is mp3 and resolution is below 1000.,"SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = ""mp3"" INTERSECT SELECT song_name FROM song WHERE resolution < 1000","CREATE TABLE song (song_name VARCHAR, resolution INTEGER); CREATE TABLE song (song_name VARCHAR, f_id VARCHAR); CREATE TABLE files (f_id VARCHAR, formats VARCHAR)"
Return the names of singers who are from UK and released an English song.,"SELECT artist_name FROM artist WHERE country = ""UK"" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = ""english""","CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)"
What are the average rating and resolution of songs that are in Bangla?,"SELECT AVG(rating), AVG(resolution) FROM song WHERE languages = ""bangla""","CREATE TABLE song (rating INTEGER, resolution INTEGER, languages VARCHAR)"
What are the maximum and minimum resolution of songs whose duration is 3 minutes?,"SELECT MAX(T2.resolution), MIN(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration LIKE ""3:%""","CREATE TABLE files (f_id VARCHAR, duration VARCHAR); CREATE TABLE song (resolution INTEGER, f_id VARCHAR)"
What are the maximum duration and resolution of songs grouped and ordered by languages?,"SELECT MAX(T1.duration), MAX(T2.resolution), T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.languages ORDER BY T2.languages","CREATE TABLE song (languages VARCHAR, resolution INTEGER, f_id VARCHAR); CREATE TABLE files (duration INTEGER, f_id VARCHAR)"
What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?,"SELECT MIN(T1.duration), MIN(T2.rating), T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is","CREATE TABLE song (genre_is VARCHAR, rating INTEGER, f_id VARCHAR); CREATE TABLE files (duration INTEGER, f_id VARCHAR)"
Find the names and number of works of all artists who have at least one English songs.,"SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = ""english"" GROUP BY T2.artist_name HAVING COUNT(*) >= 1","CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR)"
Find the name and country of origin for all artists who have release at least one song of resolution above 900.,"SELECT T1.artist_name, T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.resolution > 900 GROUP BY T2.artist_name HAVING COUNT(*) >= 1","CREATE TABLE song (artist_name VARCHAR, resolution INTEGER); CREATE TABLE artist (artist_name VARCHAR, country VARCHAR)"
Find the names and number of works of the three artists who have produced the most songs.,"SELECT T1.artist_name, COUNT(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3",CREATE TABLE song (artist_name VARCHAR); CREATE TABLE artist (artist_name VARCHAR)
Find the country of origin for the artist who made the least number of songs?,SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.artist_name ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE song (artist_name VARCHAR); CREATE TABLE artist (country VARCHAR, artist_name VARCHAR)"
What are the names of the songs whose rating is below the rating of all songs in English?,SELECT song_name FROM song WHERE rating < (SELECT MIN(rating) FROM song WHERE languages = 'english'),"CREATE TABLE song (song_name VARCHAR, rating INTEGER, languages VARCHAR)"
What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?,SELECT f_id FROM song WHERE resolution > (SELECT MAX(resolution) FROM song WHERE rating < 8),"CREATE TABLE song (f_id VARCHAR, resolution INTEGER, rating INTEGER)"
What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?,"SELECT f_id FROM song WHERE resolution > (SELECT AVG(resolution) FROM song WHERE genre_is = ""modern"")","CREATE TABLE song (f_id VARCHAR, resolution INTEGER, genre_is VARCHAR)"
Find the top 3 artists who have the largest number of songs works whose language is Bangla.,"SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = ""bangla"" GROUP BY T2.artist_name ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE song (artist_name VARCHAR, languages VARCHAR); CREATE TABLE artist (artist_name VARCHAR)"
"List the id, genre and artist name of English songs ordered by rating.","SELECT f_id, genre_is, artist_name FROM song WHERE languages = ""english"" ORDER BY rating","CREATE TABLE song (f_id VARCHAR, genre_is VARCHAR, artist_name VARCHAR, languages VARCHAR, rating VARCHAR)"
"List the duration, file size and format of songs whose genre is pop, ordered by title?","SELECT T1.duration, T1.file_size, T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.genre_is = ""pop"" ORDER BY T2.song_name","CREATE TABLE song (f_id VARCHAR, genre_is VARCHAR, song_name VARCHAR); CREATE TABLE files (duration VARCHAR, file_size VARCHAR, formats VARCHAR, f_id VARCHAR)"
Find the names of the artists who have produced English songs but have never received rating higher than 8.,"SELECT DISTINCT artist_name FROM song WHERE languages = ""english"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 8","CREATE TABLE song (artist_name VARCHAR, languages VARCHAR, rating INTEGER)"
Find the names of the artists who are from Bangladesh and have never received rating higher than 7.,"SELECT DISTINCT artist_name FROM artist WHERE country = ""Bangladesh"" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating > 7","CREATE TABLE artist (artist_name VARCHAR, country VARCHAR, rating INTEGER); CREATE TABLE song (artist_name VARCHAR, country VARCHAR, rating INTEGER)"
what is the full name and id of the college with the largest number of baseball players?,"SELECT T1.name_full, T1.college_id FROM college AS T1 JOIN player_college AS T2 ON T1.college_id = T2.college_id GROUP BY T1.college_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE player_college (college_id VARCHAR); CREATE TABLE college (name_full VARCHAR, college_id VARCHAR)"
What is average salary of the players in the team named 'Boston Red Stockings' ?,SELECT AVG(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings',"CREATE TABLE salary (salary INTEGER, team_id VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)"
What are first and last names of players participating in all star game in 1998?,"SELECT name_first, name_last FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id WHERE YEAR = 1998",CREATE TABLE all_star (player_id VARCHAR); CREATE TABLE player (player_id VARCHAR)
"What are the first name, last name and id of the player with the most all star game experiences? Also list the count.","SELECT T1.name_first, T1.name_last, T1.player_id, COUNT(*) FROM player AS T1 JOIN all_star AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE all_star (player_id VARCHAR)"
How many players enter hall of fame each year?,"SELECT yearid, COUNT(*) FROM hall_of_fame GROUP BY yearid",CREATE TABLE hall_of_fame (yearid VARCHAR)
What is the average number of attendance at home games for each year?,"SELECT YEAR, AVG(attendance) FROM home_game GROUP BY YEAR","CREATE TABLE home_game (YEAR VARCHAR, attendance INTEGER)"
"In 2014, what are the id and rank of the team that has the largest average number of attendance?","SELECT T2.team_id, T2.rank FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T1.year = 2014 GROUP BY T1.team_id ORDER BY AVG(T1.attendance) DESC LIMIT 1","CREATE TABLE team (team_id VARCHAR, rank VARCHAR); CREATE TABLE home_game (team_id VARCHAR, year VARCHAR, attendance INTEGER)"
"What are the manager's first name, last name and id who won the most manager award?","SELECT T1.name_first, T1.name_last, T2.player_id FROM player AS T1 JOIN manager_award AS T2 ON T1.player_id = T2.player_id GROUP BY T2.player_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE manager_award (player_id VARCHAR)"
How many parks are there in the state of NY?,SELECT COUNT(*) FROM park WHERE state = 'NY',CREATE TABLE park (state VARCHAR)
Which 3 players won the most player awards? List their full name and id.,"SELECT T1.name_first, T1.name_last, T1.player_id FROM player AS T1 JOIN player_award AS T2 ON T1.player_id = T2.player_id GROUP BY T1.player_id ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE player_award (player_id VARCHAR)"
List three countries which are the origins of the least players.,SELECT birth_country FROM player GROUP BY birth_country ORDER BY COUNT(*) LIMIT 3,CREATE TABLE player (birth_country VARCHAR)
Find all the players' first name and last name who have empty death record.,"SELECT name_first, name_last FROM player WHERE death_year = ''","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, death_year VARCHAR)"
"How many players born in USA are right-handed batters? That is, have the batter value 'R'.",SELECT COUNT(*) FROM player WHERE birth_country = 'USA' AND bats = 'R',"CREATE TABLE player (birth_country VARCHAR, bats VARCHAR)"
What is the average height of the players from the college named 'Yale University'?,SELECT AVG(T1.height) FROM player AS T1 JOIN player_college AS T2 ON T1.player_id = T2.player_id JOIN college AS T3 ON T3.college_id = T2.college_id WHERE T3.name_full = 'Yale University',"CREATE TABLE player_college (player_id VARCHAR, college_id VARCHAR); CREATE TABLE player (height INTEGER, player_id VARCHAR); CREATE TABLE college (college_id VARCHAR, name_full VARCHAR)"
"What is the highest salary among each team? List the team name, id and maximum salary.","SELECT T1.name, T1.team_id, MAX(T2.salary) FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id","CREATE TABLE salary (salary INTEGER, team_id VARCHAR); CREATE TABLE team (name VARCHAR, team_id VARCHAR)"
What are the name and id of the team offering the lowest average salary?,"SELECT T1.name, T1.team_id FROM team AS T1 JOIN salary AS T2 ON T1.team_id = T2.team_id GROUP BY T1.team_id ORDER BY AVG(T2.salary) LIMIT 1","CREATE TABLE team (name VARCHAR, team_id VARCHAR); CREATE TABLE salary (team_id VARCHAR, salary INTEGER)"
Find the players' first name and last name who won award both in 1960 and in 1961.,"SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1960 INTERSECT SELECT T1.name_first, T1.name_last FROM player AS T1 JOIN player_award AS T2 WHERE T2.year = 1961","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR); CREATE TABLE player_award (year VARCHAR)"
List players' first name and last name who have weight greater than 220 or height shorter than 75.,"SELECT name_first, name_last FROM player WHERE weight > 220 OR height < 75","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, weight VARCHAR, height VARCHAR)"
List the maximum scores of the team Boston Red Stockings when the team won in postseason?,SELECT MAX(T1.wins) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings',"CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE postseason (wins INTEGER, team_id_winner VARCHAR)"
How many times did Boston Red Stockings lose in 2009 postseason?,SELECT COUNT(*) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2009,"CREATE TABLE postseason (team_id_loser VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)"
What are the name and id of the team with the most victories in 2008 postseason?,"SELECT T2.name, T1.team_id_winner FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T1.year = 2008 GROUP BY T1.team_id_winner ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE postseason (team_id_winner VARCHAR, year VARCHAR); CREATE TABLE team (name VARCHAR, team_id_br VARCHAR)"
What is the number of wins the team Boston Red Stockings got in the postseasons each year in history?,"SELECT COUNT(*), T1.year FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' GROUP BY T1.year","CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE postseason (year VARCHAR, team_id_winner VARCHAR)"
What is the total number of postseason games that team Boston Red Stockings participated in?,SELECT COUNT(*) FROM (SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' UNION SELECT * FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_loser = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'),"CREATE TABLE postseason (team_id_winner VARCHAR, team_id_loser VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)"
"How many games in 1885 postseason resulted in ties (that is, the value of ""ties"" is '1')?",SELECT COUNT(*) FROM postseason WHERE YEAR = 1885 AND ties = 1,"CREATE TABLE postseason (YEAR VARCHAR, ties VARCHAR)"
What is the total salary paid by team Boston Red Stockings in 2010?,SELECT SUM(T1.salary) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2010,"CREATE TABLE salary (salary INTEGER, team_id VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)"
How many players were in the team Boston Red Stockings in 2000?,SELECT COUNT(*) FROM salary AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year = 2000,"CREATE TABLE salary (team_id VARCHAR, year VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR)"
List the 3 highest salaries of the players in 2001?,SELECT salary FROM salary WHERE YEAR = 2001 ORDER BY salary DESC LIMIT 3,"CREATE TABLE salary (salary VARCHAR, YEAR VARCHAR)"
What were all the salary values of players in 2010 and 2001?,SELECT salary FROM salary WHERE YEAR = 2010 UNION SELECT salary FROM salary WHERE YEAR = 2001,"CREATE TABLE salary (salary VARCHAR, YEAR VARCHAR)"
In which year did the least people enter hall of fame?,SELECT yearid FROM hall_of_fame GROUP BY yearid ORDER BY COUNT(*) LIMIT 1,CREATE TABLE hall_of_fame (yearid VARCHAR)
How many parks are there in Atlanta city?,SELECT COUNT(*) FROM park WHERE city = 'Atlanta',CREATE TABLE park (city VARCHAR)
"How many games were played in park ""Columbia Park"" in 1907?",SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 1907 AND T2.park_name = 'Columbia Park',"CREATE TABLE park (park_id VARCHAR, park_name VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR)"
How many games were played in city Atlanta in 2000?,SELECT COUNT(*) FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2000 AND T2.city = 'Atlanta',"CREATE TABLE park (park_id VARCHAR, city VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR)"
What is the total home game attendance of team Boston Red Stockings from 2000 to 2010?,SELECT SUM(T1.attendance) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 2000 AND 2010,"CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE home_game (attendance INTEGER, team_id VARCHAR, year VARCHAR)"
How much did the the player with first name Len and last name Barker earn between 1985 to 1990 in total?,SELECT SUM(T1.salary) FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_first = 'Len' AND T2.name_last = 'Barker' AND T1.year BETWEEN 1985 AND 1990,"CREATE TABLE salary (salary INTEGER, player_id VARCHAR, year VARCHAR); CREATE TABLE player (player_id VARCHAR, name_first VARCHAR, name_last VARCHAR)"
List players' first name and last name who received salary from team Washington Nationals in both 2005 and 2007.,"SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2005 AND T3.name = 'Washington Nationals' INTERSECT SELECT T2.name_first, T2.name_last FROM salary AS T1 JOIN player AS T2 ON T1.player_id = T2.player_id JOIN team AS T3 ON T3.team_id_br = T1.team_id WHERE T1.year = 2007 AND T3.name = 'Washington Nationals'","CREATE TABLE player (name_first VARCHAR, name_last VARCHAR, player_id VARCHAR); CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE salary (player_id VARCHAR, team_id VARCHAR, year VARCHAR)"
How many home games did the team Boston Red Stockings play from 1990 to 2000 in total?,SELECT SUM(T1.games) FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' AND T1.year BETWEEN 1990 AND 2000,"CREATE TABLE team (team_id_br VARCHAR, name VARCHAR); CREATE TABLE home_game (games INTEGER, team_id VARCHAR, year VARCHAR)"
Which team had the least number of attendances in home games in 1980?,SELECT T2.name FROM home_game AS T1 JOIN team AS T2 ON T1.team_id = T2.team_id_br WHERE T1.year = 1980 ORDER BY T1.attendance LIMIT 1,"CREATE TABLE home_game (team_id VARCHAR, year VARCHAR, attendance VARCHAR); CREATE TABLE team (name VARCHAR, team_id_br VARCHAR)"
List the names of states that have more than 2 parks.,SELECT state FROM park GROUP BY state HAVING COUNT(*) > 2,CREATE TABLE park (state VARCHAR)
"How many team franchises are active, with active value 'Y'?",SELECT COUNT(*) FROM team_franchise WHERE active = 'Y',CREATE TABLE team_franchise (active VARCHAR)
Which cities have 2 to 4 parks?,SELECT city FROM park GROUP BY city HAVING COUNT(*) BETWEEN 2 AND 4,CREATE TABLE park (city VARCHAR)
Which park had most attendances in 2008?,SELECT T2.park_name FROM home_game AS T1 JOIN park AS T2 ON T1.park_id = T2.park_id WHERE T1.year = 2008 ORDER BY T1.attendance DESC LIMIT 1,"CREATE TABLE park (park_name VARCHAR, park_id VARCHAR); CREATE TABLE home_game (park_id VARCHAR, year VARCHAR, attendance VARCHAR)"
How many camera lenses have a focal length longer than 15 mm?,SELECT COUNT(*) FROM camera_lens WHERE focal_length_mm > 15,CREATE TABLE camera_lens (focal_length_mm INTEGER)
"Find the brand and name for each camera lens, and sort in descending order of maximum aperture.","SELECT brand, name FROM camera_lens ORDER BY max_aperture DESC","CREATE TABLE camera_lens (brand VARCHAR, name VARCHAR, max_aperture VARCHAR)"
"List the id, color scheme, and name for all the photos.","SELECT id, color, name FROM photos","CREATE TABLE photos (id VARCHAR, color VARCHAR, name VARCHAR)"
What are the maximum and average height of the mountains?,"SELECT MAX(height), AVG(height) FROM mountain",CREATE TABLE mountain (height INTEGER)
What are the average prominence of the mountains in country 'Morocco'?,SELECT AVG(prominence) FROM mountain WHERE country = 'Morocco',"CREATE TABLE mountain (prominence INTEGER, country VARCHAR)"
"What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?","SELECT name, height, prominence FROM mountain WHERE range <> 'Aberdare Range'","CREATE TABLE mountain (name VARCHAR, height VARCHAR, prominence VARCHAR, range VARCHAR)"
What are the id and name of the photos for mountains?,"SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.height > 4000","CREATE TABLE photos (mountain_id VARCHAR); CREATE TABLE mountain (id VARCHAR, name VARCHAR, height INTEGER)"
What are the id and name of the mountains that have at least 2 photos?,"SELECT T1.id, T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(*) >= 2","CREATE TABLE mountain (id VARCHAR, name VARCHAR); CREATE TABLE photos (mountain_id VARCHAR)"
What are the names of the cameras that have taken picture of the most mountains?,SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id = T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE camera_lens (name VARCHAR, id VARCHAR); CREATE TABLE photos (camera_lens_id VARCHAR)"
What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?,SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus',"CREATE TABLE photos (camera_lens_id VARCHAR); CREATE TABLE camera_lens (name VARCHAR, id VARCHAR, brand VARCHAR)"
How many different kinds of lens brands are there?,SELECT COUNT(DISTINCT brand) FROM camera_lens,CREATE TABLE camera_lens (brand VARCHAR)
How many camera lenses are not used in taking any photos?,SELECT COUNT(*) FROM camera_lens WHERE NOT id IN (SELECT camera_lens_id FROM photos),"CREATE TABLE photos (id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE camera_lens (id VARCHAR, camera_lens_id VARCHAR)"
How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?,SELECT COUNT(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.country = 'Ethiopia',"CREATE TABLE mountain (id VARCHAR, country VARCHAR); CREATE TABLE photos (camera_lens_id VARCHAR, mountain_id VARCHAR)"
List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif',SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T1.range = 'Lasta Massif',"CREATE TABLE mountain (id VARCHAR, range VARCHAR); CREATE TABLE photos (mountain_id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE camera_lens (brand VARCHAR, id VARCHAR)"
Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.,"SELECT name, prominence FROM mountain EXCEPT SELECT T1.name, T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id = T3.id WHERE T3.brand = 'Sigma'","CREATE TABLE camera_lens (id VARCHAR, brand VARCHAR); CREATE TABLE mountain (name VARCHAR, prominence VARCHAR, id VARCHAR); CREATE TABLE photos (mountain_id VARCHAR, camera_lens_id VARCHAR); CREATE TABLE mountain (name VARCHAR, prominence VARCHAR)"
"List the camera lens names containing substring ""Digital"".","SELECT name FROM camera_lens WHERE name LIKE ""%Digital%""",CREATE TABLE camera_lens (name VARCHAR)
What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.,"SELECT T1.name, COUNT(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id = T2.camera_lens_id GROUP BY T1.id ORDER BY COUNT(*)","CREATE TABLE photos (camera_lens_id VARCHAR); CREATE TABLE camera_lens (name VARCHAR, id VARCHAR)"
Find the names of channels that are not owned by CCTV.,SELECT name FROM channel WHERE OWNER <> 'CCTV',"CREATE TABLE channel (name VARCHAR, OWNER VARCHAR)"
List all channel names ordered by their rating in percent from big to small.,SELECT name FROM channel ORDER BY rating_in_percent DESC,"CREATE TABLE channel (name VARCHAR, rating_in_percent VARCHAR)"
What is the owner of the channel that has the highest rating ratio?,SELECT OWNER FROM channel ORDER BY rating_in_percent DESC LIMIT 1,"CREATE TABLE channel (OWNER VARCHAR, rating_in_percent VARCHAR)"
how many programs are there?,SELECT COUNT(*) FROM program,CREATE TABLE program (Id VARCHAR)
"list all the names of programs, ordering by launch time.",SELECT name FROM program ORDER BY launch,"CREATE TABLE program (name VARCHAR, launch VARCHAR)"
"List the name, origin and owner of each program.","SELECT name, origin, OWNER FROM program","CREATE TABLE program (name VARCHAR, origin VARCHAR, OWNER VARCHAR)"
find the name of the program that was launched most recently.,SELECT name FROM program ORDER BY launch DESC LIMIT 1,"CREATE TABLE program (name VARCHAR, launch VARCHAR)"
find the total percentage share of all channels owned by CCTV.,SELECT SUM(Share_in_percent) FROM channel WHERE OWNER = 'CCTV',"CREATE TABLE channel (Share_in_percent INTEGER, OWNER VARCHAR)"
Find the names of the channels that are broadcast in the morning.,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning',"CREATE TABLE channel (name VARCHAR, channel_id VARCHAR); CREATE TABLE broadcast (channel_id VARCHAR, time_of_day VARCHAR)"
what are the names of the channels that broadcast in both morning and night?,SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Morning' INTERSECT SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id = t2.channel_id WHERE t2.time_of_day = 'Night',"CREATE TABLE channel (name VARCHAR, channel_id VARCHAR); CREATE TABLE broadcast (channel_id VARCHAR, time_of_day VARCHAR)"
how many programs are broadcast in each time section of the day?,"SELECT COUNT(*), time_of_day FROM broadcast GROUP BY time_of_day",CREATE TABLE broadcast (time_of_day VARCHAR)
find the number of different programs that are broadcast during night time.,SELECT COUNT(DISTINCT program_id) FROM broadcast WHERE time_of_day = 'Night',"CREATE TABLE broadcast (program_id VARCHAR, time_of_day VARCHAR)"
Find the names of programs that are never broadcasted in the morning.,"SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = ""Morning""","CREATE TABLE broadcast (program_id VARCHAR, Time_of_day VARCHAR); CREATE TABLE program (name VARCHAR, program_id VARCHAR); CREATE TABLE program (name VARCHAR)"
find the program owners that have some programs in both morning and night time.,"SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = ""Morning"" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id WHERE t2.Time_of_day = ""Night""","CREATE TABLE broadcast (program_id VARCHAR, Time_of_day VARCHAR); CREATE TABLE program (owner VARCHAR, program_id VARCHAR)"
List all program origins in the alphabetical order.,SELECT origin FROM program ORDER BY origin,CREATE TABLE program (origin VARCHAR)
what is the number of different channel owners?,SELECT COUNT(DISTINCT OWNER) FROM channel,CREATE TABLE channel (OWNER VARCHAR)
find the names of programs whose origin is not in Beijing.,SELECT name FROM program WHERE origin <> 'Beijing',"CREATE TABLE program (name VARCHAR, origin VARCHAR)"
What are the names of the channels owned by CCTV or HBS?,SELECT name FROM channel WHERE OWNER = 'CCTV' OR OWNER = 'HBS',"CREATE TABLE channel (name VARCHAR, OWNER VARCHAR)"
Find the total rating ratio for each channel owner.,"SELECT SUM(Rating_in_percent), OWNER FROM channel GROUP BY OWNER","CREATE TABLE channel (OWNER VARCHAR, Rating_in_percent INTEGER)"
Find the name of the program that is broadcast most frequently.,SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id = t2.program_id GROUP BY t2.program_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE program (name VARCHAR, program_id VARCHAR); CREATE TABLE broadcast (program_id VARCHAR)"
How many courses are there in total?,SELECT COUNT(*) FROM COURSES,CREATE TABLE COURSES (Id VARCHAR)
"What are the descriptions of the courses with name ""database""?","SELECT course_description FROM COURSES WHERE course_name = ""database""","CREATE TABLE COURSES (course_description VARCHAR, course_name VARCHAR)"
"What are the addresses of the course authors or tutors with personal name ""Cathrine""","SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = ""Cathrine""","CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, personal_name VARCHAR)"
List the addresses of all the course authors or tutors.,SELECT address_line_1 FROM Course_Authors_and_Tutors,CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR)
List all the login names and family names of course author and tutors.,"SELECT login_name, family_name FROM Course_Authors_and_Tutors","CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR, family_name VARCHAR)"
List all the dates of enrollment and completion of students.,"SELECT date_of_enrolment, date_of_completion FROM Student_Course_Enrolment","CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR)"
How many distinct students are enrolled in courses?,SELECT COUNT(DISTINCT student_id) FROM Student_Course_Enrolment,CREATE TABLE Student_Course_Enrolment (student_id VARCHAR)
How many distinct courses are enrolled in by students?,SELECT COUNT(course_id) FROM Student_Course_Enrolment,CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)
"Find the dates of the tests taken with result ""Pass"".","SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result = ""Pass""","CREATE TABLE Student_Tests_Taken (date_test_taken VARCHAR, test_result VARCHAR)"
"How many tests have result ""Fail""?","SELECT COUNT(*) FROM Student_Tests_Taken WHERE test_result = ""Fail""",CREATE TABLE Student_Tests_Taken (test_result VARCHAR)
"What are the login names of the students with family name ""Ward""?","SELECT login_name FROM Students WHERE family_name = ""Ward""","CREATE TABLE Students (login_name VARCHAR, family_name VARCHAR)"
"What are the dates of the latest logon of the students with family name ""Jaskolski"" or ""Langosh""?","SELECT date_of_latest_logon FROM Students WHERE family_name = ""Jaskolski"" OR family_name = ""Langosh""","CREATE TABLE Students (date_of_latest_logon VARCHAR, family_name VARCHAR)"
"How many students have personal names that contain the word ""son""?","SELECT COUNT(*) FROM Students WHERE personal_name LIKE ""%son%""",CREATE TABLE Students (personal_name VARCHAR)
List all the subject names.,SELECT subject_name FROM SUBJECTS,CREATE TABLE SUBJECTS (subject_name VARCHAR)
List all the information about course authors and tutors in alphabetical order of the personal name.,SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name,CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR)
List the personal names and family names of all the students in alphabetical order of family name.,"SELECT personal_name, family_name FROM Students ORDER BY family_name","CREATE TABLE Students (personal_name VARCHAR, family_name VARCHAR)"
List each test result and its count in descending order of count.,"SELECT test_result, COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",CREATE TABLE Student_Tests_Taken (test_result VARCHAR)
"Find the login name of the course author that teaches the course with name ""advanced database"".","SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = ""advanced database""","CREATE TABLE Courses (author_id VARCHAR, course_name VARCHAR); CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR, author_id VARCHAR)"
"Find the addresses of the course authors who teach the course with name ""operating system"" or ""data structure"".","SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = ""operating system"" OR T2.course_name = ""data structure""","CREATE TABLE Courses (author_id VARCHAR, course_name VARCHAR); CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, author_id VARCHAR)"
"Find the personal name, family name, and author ID of the course author that teaches the most courses.","SELECT T1.personal_name, T1.family_name, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Courses (author_id VARCHAR); CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR, family_name VARCHAR, author_id VARCHAR)"
Find the addresses and author IDs of the course authors that teach at least two courses.,"SELECT T1.address_line_1, T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id HAVING COUNT(*) >= 2","CREATE TABLE Courses (author_id VARCHAR); CREATE TABLE Course_Authors_and_Tutors (address_line_1 VARCHAR, author_id VARCHAR)"
"Find the names of courses taught by the tutor who has personal name ""Julio"".","SELECT T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.personal_name = ""Julio""","CREATE TABLE Course_Authors_and_Tutors (author_id VARCHAR, personal_name VARCHAR); CREATE TABLE Courses (course_name VARCHAR, author_id VARCHAR)"
"Find the names and descriptions of courses that belong to the subject named ""Computer Science"".","SELECT T1.course_name, T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id WHERE T2.subject_name = ""Computer Science""","CREATE TABLE Courses (course_name VARCHAR, course_description VARCHAR, subject_id VARCHAR); CREATE TABLE Subjects (subject_id VARCHAR, subject_name VARCHAR)"
"Find the subject ID, subject name, and the corresponding number of available courses for each subject.","SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id","CREATE TABLE Courses (subject_id VARCHAR); CREATE TABLE Subjects (subject_name VARCHAR, subject_id VARCHAR)"
"Find the subject ID, name of subject and the corresponding number of courses for each subject, and sort by the course count in ascending order.","SELECT T1.subject_id, T2.subject_name, COUNT(*) FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id = T2.subject_id GROUP BY T1.subject_id ORDER BY COUNT(*)","CREATE TABLE Courses (subject_id VARCHAR); CREATE TABLE Subjects (subject_name VARCHAR, subject_id VARCHAR)"
"What is the date of enrollment of the course named ""Spanish""?","SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = ""Spanish""","CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, course_id VARCHAR); CREATE TABLE Courses (course_id VARCHAR, course_name VARCHAR)"
What is the name of the course that has the most student enrollment?,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)"
What are the names of the courses that have exactly 1 student enrollment?,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) = 1,"CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)"
What are the descriptions and names of the courses that have student enrollment bigger than 2?,"SELECT T1.course_description, T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name HAVING COUNT(*) > 2","CREATE TABLE Student_Course_Enrolment (course_id VARCHAR); CREATE TABLE Courses (course_description VARCHAR, course_name VARCHAR, course_id VARCHAR)"
What is the name of each course and the corresponding number of student enrollment?,"SELECT T1.course_name, COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name","CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Course_Enrolment (course_id VARCHAR)"
"What are the enrollment dates of all the tests that have result ""Pass""?","SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = ""Pass""","CREATE TABLE Student_Tests_Taken (registration_id VARCHAR, test_result VARCHAR); CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, registration_id VARCHAR)"
"What are the completion dates of all the tests that have result ""Fail""?","SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = ""Fail""","CREATE TABLE Student_Tests_Taken (registration_id VARCHAR, test_result VARCHAR); CREATE TABLE Student_Course_Enrolment (date_of_completion VARCHAR, registration_id VARCHAR)"
"List the dates of enrollment and completion of the student with personal name ""Karson"".","SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.personal_name = ""Karson""","CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, personal_name VARCHAR)"
"List the dates of enrollment and completion of the student with family name ""Zieme"" and personal name ""Bernie"".","SELECT T1.date_of_enrolment, T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.family_name = ""Zieme"" AND T2.personal_name = ""Bernie""","CREATE TABLE Student_Course_Enrolment (date_of_enrolment VARCHAR, date_of_completion VARCHAR, student_id VARCHAR); CREATE TABLE Students (student_id VARCHAR, family_name VARCHAR, personal_name VARCHAR)"
Find the student ID and login name of the student with the most course enrollments,"SELECT T1.student_id, T2.login_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (login_name VARCHAR, student_id VARCHAR)"
Find the student ID and personal name of the student with at least two enrollments.,"SELECT T1.student_id, T2.personal_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) >= 2","CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (personal_name VARCHAR, student_id VARCHAR)"
Find the student ID and middle name for all the students with at most two enrollments.,"SELECT T1.student_id, T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) <= 2","CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (middle_name VARCHAR, student_id VARCHAR)"
Find the personal names of students not enrolled in any course.,SELECT personal_name FROM Students EXCEPT SELECT T1.personal_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id,"CREATE TABLE Student_Course_Enrolment (student_id VARCHAR); CREATE TABLE Students (personal_name VARCHAR); CREATE TABLE Students (personal_name VARCHAR, student_id VARCHAR)"
How many students did not have any course enrollment?,SELECT COUNT(*) FROM Students WHERE NOT student_id IN (SELECT student_id FROM Student_Course_Enrolment),CREATE TABLE Students (student_id VARCHAR); CREATE TABLE Student_Course_Enrolment (student_id VARCHAR)
Find the common login name of course authors and students.,SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students,CREATE TABLE Course_Authors_and_Tutors (login_name VARCHAR); CREATE TABLE Students (login_name VARCHAR)
Find the common personal name of course authors and students.,SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students,CREATE TABLE Course_Authors_and_Tutors (personal_name VARCHAR); CREATE TABLE Students (personal_name VARCHAR)
Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.,"SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.Claim_id HAVING COUNT(*) > 2 UNION SELECT T1.Date_Claim_Made, T1.Claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id WHERE T1.Amount_Claimed = (SELECT MAX(Amount_Claimed) FROM Claims)","CREATE TABLE Settlements (Claim_id VARCHAR); CREATE TABLE Claims (Amount_Claimed INTEGER); CREATE TABLE Claims (Date_Claim_Made VARCHAR, Claim_id VARCHAR, Amount_Claimed INTEGER)"
Which customer had at least 2 policies but did not file any claims? List the customer details and id.,"SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 2 EXCEPT SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.customer_id JOIN Claims AS T3 ON T2.policy_id = T3.policy_id","CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR, Customer_id VARCHAR); CREATE TABLE Customer_Policies (customer_id VARCHAR, policy_id VARCHAR); CREATE TABLE Claims (policy_id VARCHAR)"
"List the method, date and amount of all the payments, in ascending order of date.","SELECT Payment_Method_Code, Date_Payment_Made, Amount_Payment FROM Payments ORDER BY Date_Payment_Made","CREATE TABLE Payments (Payment_Method_Code VARCHAR, Date_Payment_Made VARCHAR, Amount_Payment VARCHAR)"
"Among all the claims, what is the settlement amount of the claim with the largest claim amount? List both the settlement amount and claim amount.","SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Claimed DESC LIMIT 1","CREATE TABLE Claims (Amount_Settled VARCHAR, Amount_Claimed VARCHAR)"
"Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.","SELECT Amount_Settled, Amount_Claimed FROM Claims ORDER BY Amount_Settled LIMIT 1","CREATE TABLE Claims (Amount_Settled VARCHAR, Amount_Claimed VARCHAR)"
"Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.","SELECT Date_Claim_Made, Date_Claim_Settled FROM Claims WHERE Amount_Claimed > (SELECT AVG(Amount_Claimed) FROM Claims)","CREATE TABLE Claims (Date_Claim_Made VARCHAR, Date_Claim_Settled VARCHAR, Amount_Claimed INTEGER)"
"Among all the claims, which settlements have a claimed amount that is no more than the average? List the claim start date.",SELECT Date_Claim_Made FROM Claims WHERE Amount_Settled <= (SELECT AVG(Amount_Settled) FROM Claims),"CREATE TABLE Claims (Date_Claim_Made VARCHAR, Amount_Settled INTEGER)"
How many settlements does each claim correspond to? List the claim id and the number of settlements.,"SELECT T1.Claim_id, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id","CREATE TABLE Settlements (claim_id VARCHAR); CREATE TABLE Claims (Claim_id VARCHAR, claim_id VARCHAR)"
"Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.","SELECT T1.claim_id, T1.date_claim_made, COUNT(*) FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Claims (claim_id VARCHAR, date_claim_made VARCHAR); CREATE TABLE Settlements (claim_id VARCHAR)"
How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.,"SELECT COUNT(*), T1.claim_id FROM Claims AS T1 JOIN Settlements AS T2 ON T1.claim_id = T2.claim_id GROUP BY T1.claim_id ORDER BY T1.Date_Claim_Settled DESC LIMIT 1","CREATE TABLE Settlements (claim_id VARCHAR); CREATE TABLE Claims (claim_id VARCHAR, Date_Claim_Settled VARCHAR)"
"Of all the claims, what was the earliest date when any claim was made?",SELECT Date_Claim_Made FROM Claims ORDER BY Date_Claim_Made LIMIT 1,CREATE TABLE Claims (Date_Claim_Made VARCHAR)
What is the total amount of settlement made for all the settlements?,SELECT SUM(Amount_Settled) FROM Settlements,CREATE TABLE Settlements (Amount_Settled INTEGER)
Who are the customers that had more than 1 policy? List the customer details and id.,"SELECT T1.customer_details, T1.customer_id FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 1","CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR, Customer_id VARCHAR); CREATE TABLE Customer_Policies (Customer_id VARCHAR)"
What are the claim dates and settlement dates of all the settlements?,"SELECT Date_Claim_Made, Date_Claim_Settled FROM Settlements","CREATE TABLE Settlements (Date_Claim_Made VARCHAR, Date_Claim_Settled VARCHAR)"
What is the most popular payment method?,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Payments (Payment_Method_Code VARCHAR)
With which kind of payment method were the least number of payments processed?,SELECT Payment_Method_Code FROM Payments GROUP BY Payment_Method_Code ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Payments (Payment_Method_Code VARCHAR)
What is the total amount of payment?,SELECT SUM(Amount_Payment) FROM Payments,CREATE TABLE Payments (Amount_Payment INTEGER)
What are all the distinct details of the customers?,SELECT DISTINCT customer_details FROM Customers,CREATE TABLE Customers (customer_details VARCHAR)
Which kind of policy type was chosen by the most customers?,SELECT Policy_Type_Code FROM Customer_Policies GROUP BY Policy_Type_Code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Customer_Policies (Policy_Type_Code VARCHAR)
How many settlements are there in total?,SELECT COUNT(*) FROM Settlements,CREATE TABLE Settlements (Id VARCHAR)
"Which Payments were processed with Visa? List the payment Id, the date and the amount.","SELECT Payment_ID, Date_Payment_Made, Amount_Payment FROM Payments WHERE Payment_Method_Code = 'Visa'","CREATE TABLE Payments (Payment_ID VARCHAR, Date_Payment_Made VARCHAR, Amount_Payment VARCHAR, Payment_Method_Code VARCHAR)"
List the details of the customers who do not have any policies.,SELECT customer_details FROM Customers EXCEPT SELECT T1.customer_details FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.customer_id = T2.customer_id,"CREATE TABLE Customer_Policies (customer_id VARCHAR); CREATE TABLE Customers (customer_details VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_details VARCHAR)"
"List the date the claim was made, the date it was settled and the amount settled for all the claims which had exactly one settlement.","SELECT T1.claim_id, T1.date_claim_made, T1.Date_Claim_Settled FROM Claims AS T1 JOIN Settlements AS T2 ON T1.Claim_id = T2.Claim_id GROUP BY T1.claim_id HAVING COUNT(*) = 1","CREATE TABLE Claims (claim_id VARCHAR, date_claim_made VARCHAR, Date_Claim_Settled VARCHAR, Claim_id VARCHAR); CREATE TABLE Settlements (Claim_id VARCHAR)"
Find the total claimed amount of all the claims.,SELECT SUM(Amount_Claimed) FROM Claims,CREATE TABLE Claims (Amount_Claimed INTEGER)
Which department has the largest number of employees?,SELECT name FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) DESC LIMIT 1,"CREATE TABLE department (name VARCHAR, departmentID VARCHAR)"
What is the employee id of the head whose department has the least number of employees?,SELECT head FROM department GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1,"CREATE TABLE department (head VARCHAR, departmentID VARCHAR)"
what is the name and position of the head whose department has least number of employees?,"SELECT T2.name, T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head = T2.EmployeeID GROUP BY departmentID ORDER BY COUNT(departmentID) LIMIT 1","CREATE TABLE department (head VARCHAR); CREATE TABLE physician (name VARCHAR, position VARCHAR, EmployeeID VARCHAR)"
What are names of patients who made an appointment?,SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn,CREATE TABLE appointment (patient VARCHAR); CREATE TABLE patient (ssn VARCHAR)
what are name and phone number of patients who had more than one appointment?,"SELECT name, phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient = T2.ssn GROUP BY T1.patient HAVING COUNT(*) > 1",CREATE TABLE appointment (patient VARCHAR); CREATE TABLE patient (ssn VARCHAR)
Find the id of the appointment with the most recent start date?,SELECT appointmentid FROM appointment ORDER BY START DESC LIMIT 1,"CREATE TABLE appointment (appointmentid VARCHAR, START VARCHAR)"
List the name of physicians who took some appointment.,SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID,"CREATE TABLE appointment (Physician VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)"
List the name of physicians who never took any appointment.,SELECT name FROM physician EXCEPT SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID,"CREATE TABLE physician (name VARCHAR); CREATE TABLE appointment (Physician VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)"
Find the names of all physicians and their primary affiliated departments' names.,"SELECT T1.name, T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T2.PrimaryAffiliation = 1","CREATE TABLE department (name VARCHAR, DepartmentID VARCHAR); CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR, PrimaryAffiliation VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)"
What is the name of the patient who made the most recent appointment?,SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1,"CREATE TABLE patient (name VARCHAR, ssn VARCHAR); CREATE TABLE appointment (patient VARCHAR, start VARCHAR)"
How many patients stay in room 112?,SELECT COUNT(patient) FROM stay WHERE room = 112,"CREATE TABLE stay (patient VARCHAR, room VARCHAR)"
How many patients' prescriptions are made by physician John Dorian?,"SELECT COUNT(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN = T2.patient JOIN physician AS T3 ON T2.physician = T3.employeeid WHERE T3.name = ""John Dorian""","CREATE TABLE patient (SSN VARCHAR); CREATE TABLE prescribes (patient VARCHAR, physician VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR)"
Find the name of medication used on the patient who stays in room 111?,SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient = T2.SSN JOIN Prescribes AS T3 ON T3.Patient = T2.SSN JOIN Medication AS T4 ON T3.Medication = T4.Code WHERE room = 111,"CREATE TABLE Prescribes (Patient VARCHAR, Medication VARCHAR); CREATE TABLE Medication (name VARCHAR, Code VARCHAR); CREATE TABLE patient (SSN VARCHAR); CREATE TABLE stay (Patient VARCHAR)"
Find the patient who most recently stayed in room 111.,SELECT patient FROM stay WHERE room = 111 ORDER BY staystart DESC LIMIT 1,"CREATE TABLE stay (patient VARCHAR, room VARCHAR, staystart VARCHAR)"
What is the name of the nurse has the most appointments?,SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid = T2.prepnurse GROUP BY T1.employeeid ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE nurse (name VARCHAR, employeeid VARCHAR); CREATE TABLE appointment (prepnurse VARCHAR)"
How many patients do each physician take care of? List their names and number of patients they take care of.,"SELECT T1.name, COUNT(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid","CREATE TABLE patient (PCP VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)"
Find the name of physicians who are in charge of more than one patient.,SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid HAVING COUNT(*) > 1,"CREATE TABLE patient (PCP VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)"
Find the number of rooms located on each block floor.,"SELECT COUNT(*), T1.blockfloor FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockfloor","CREATE TABLE room (blockfloor VARCHAR, blockcode VARCHAR); CREATE TABLE BLOCK (blockfloor VARCHAR, blockcode VARCHAR)"
Find the number of rooms for different block code?,"SELECT COUNT(*), T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor = T2.blockfloor AND T1.blockcode = T2.blockcode GROUP BY T1.blockcode","CREATE TABLE room (blockfloor VARCHAR, blockcode VARCHAR); CREATE TABLE BLOCK (blockcode VARCHAR, blockfloor VARCHAR)"
What are the unique block codes that have available rooms?,SELECT DISTINCT blockcode FROM room WHERE unavailable = 0,"CREATE TABLE room (blockcode VARCHAR, unavailable VARCHAR)"
How many different types of rooms are there?,SELECT COUNT(DISTINCT roomtype) FROM room,CREATE TABLE room (roomtype VARCHAR)
What is the names of the physicians who prescribe medication Thesisin?,"SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name = ""Thesisin""","CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE prescribes (physician VARCHAR, medication VARCHAR); CREATE TABLE medication (code VARCHAR, name VARCHAR)"
Find the name and position of physicians who prescribe some medication whose brand is X?,"SELECT DISTINCT T1.name, T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand = ""X""","CREATE TABLE medication (code VARCHAR, Brand VARCHAR); CREATE TABLE prescribes (physician VARCHAR, medication VARCHAR); CREATE TABLE physician (name VARCHAR, position VARCHAR, employeeid VARCHAR)"
Find the number of medications prescribed for each brand.,"SELECT COUNT(*), T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand","CREATE TABLE medication (name VARCHAR, brand VARCHAR, code VARCHAR); CREATE TABLE prescribes (medication VARCHAR)"
Find the name of physicians whose position title contains the word 'senior'.,SELECT name FROM physician WHERE POSITION LIKE '%senior%',"CREATE TABLE physician (name VARCHAR, POSITION VARCHAR)"
Find the patient who has the most recent undergoing treatment?,SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1,"CREATE TABLE undergoes (patient VARCHAR, dateundergoes VARCHAR)"
Find the names of all patients who have an undergoing treatment and are staying in room 111.,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay = T3.StayID WHERE T3.room = 111,"CREATE TABLE undergoes (patient VARCHAR, Stay VARCHAR); CREATE TABLE stay (StayID VARCHAR, room VARCHAR); CREATE TABLE patient (name VARCHAR, SSN VARCHAR)"
List the names of all distinct nurses ordered by alphabetical order?,SELECT DISTINCT name FROM nurse ORDER BY name,CREATE TABLE nurse (name VARCHAR)
Find the names of nurses who are nursing an undergoing treatment.,SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse = T2.EmployeeID,"CREATE TABLE undergoes (AssistingNurse VARCHAR); CREATE TABLE nurse (name VARCHAR, EmployeeID VARCHAR)"
"List the names of all distinct medications, ordered in an alphabetical order.",SELECT DISTINCT name FROM medication ORDER BY name,CREATE TABLE medication (name VARCHAR)
What are the names of the physician who prescribed the highest dose?,SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1,"CREATE TABLE prescribes (physician VARCHAR, dose VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR)"
List the physicians' employee ids together with their primary affiliation departments' ids.,"SELECT physician, department FROM affiliated_with WHERE primaryaffiliation = 1","CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR, primaryaffiliation VARCHAR)"
List the names of departments where some physicians are primarily affiliated with.,SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation = 1,"CREATE TABLE affiliated_with (department VARCHAR); CREATE TABLE department (name VARCHAR, departmentid VARCHAR)"
What nurses are on call with block floor 1 and block code 1? Tell me their names.,SELECT nurse FROM on_call WHERE blockfloor = 1 AND blockcode = 1,"CREATE TABLE on_call (nurse VARCHAR, blockfloor VARCHAR, blockcode VARCHAR)"
"What are the highest cost, lowest cost and average cost of procedures?","SELECT MAX(cost), MIN(cost), AVG(cost) FROM procedures",CREATE TABLE procedures (cost INTEGER)
List the name and cost of all procedures sorted by the cost from the highest to the lowest.,"SELECT name, cost FROM procedures ORDER BY cost DESC","CREATE TABLE procedures (name VARCHAR, cost VARCHAR)"
Find the three most expensive procedures.,SELECT name FROM procedures ORDER BY cost LIMIT 3,"CREATE TABLE procedures (name VARCHAR, cost VARCHAR)"
Find the physicians who are trained in a procedure that costs more than 5000.,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T3.cost > 5000,"CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE procedures (code VARCHAR, cost INTEGER)"
Find the physician who was trained in the most expensive procedure?,SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment ORDER BY T3.cost DESC LIMIT 1,"CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (name VARCHAR, employeeid VARCHAR); CREATE TABLE procedures (code VARCHAR, cost VARCHAR)"
What is the average cost of procedures that physician John Wen was trained in?,"SELECT AVG(T3.cost) FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = ""John Wen""","CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (cost INTEGER, code VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR)"
Find the names of procedures which physician John Wen was trained in.,"SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = ""John Wen""","CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)"
Find all procedures which cost more than 1000 or which physician John Wen was trained in.,"SELECT name FROM procedures WHERE cost > 1000 UNION SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = ""John Wen""","CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)"
Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?,"SELECT name FROM procedures WHERE cost > 1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = ""John Wen""","CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)"
Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.,"SELECT name FROM procedures WHERE cost < 5000 INTERSECT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid = T2.physician JOIN procedures AS T3 ON T3.code = T2.treatment WHERE T1.name = ""John Wen""","CREATE TABLE trained_in (physician VARCHAR, treatment VARCHAR); CREATE TABLE procedures (name VARCHAR, cost INTEGER); CREATE TABLE physician (employeeid VARCHAR, name VARCHAR); CREATE TABLE procedures (name VARCHAR, code VARCHAR)"
Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Psychiatry',"CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR); CREATE TABLE department (DepartmentID VARCHAR, name VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)"
Find the name of physicians who are affiliated with Surgery or Psychiatry department.,SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID = T2.physician JOIN department AS T3 ON T2.department = T3.DepartmentID WHERE T3.name = 'Surgery' OR T3.name = 'Psychiatry',"CREATE TABLE affiliated_with (physician VARCHAR, department VARCHAR); CREATE TABLE department (DepartmentID VARCHAR, name VARCHAR); CREATE TABLE physician (name VARCHAR, EmployeeID VARCHAR)"
Find the names of patients who are not using the medication of Procrastin-X.,SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient = T1.SSN JOIN Medication AS T3 ON T2.Medication = T3.Code WHERE T3.name = 'Procrastin-X',"CREATE TABLE Prescribes (Patient VARCHAR, Medication VARCHAR); CREATE TABLE Medication (Code VARCHAR, name VARCHAR); CREATE TABLE patient (name VARCHAR, SSN VARCHAR); CREATE TABLE patient (name VARCHAR)"
Find the number of patients who are not using the medication of Procrastin-X.,SELECT COUNT(*) FROM patient WHERE NOT SSN IN (SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication = T2.Code WHERE T2.name = 'Procrastin-X'),"CREATE TABLE Prescribes (patient VARCHAR, Medication VARCHAR); CREATE TABLE patient (SSN VARCHAR); CREATE TABLE Medication (Code VARCHAR, name VARCHAR)"
How many appointments are there?,SELECT COUNT(*) FROM appointment,CREATE TABLE appointment (Id VARCHAR)
Find the names of nurses who are on call.,SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID = T2.nurse,"CREATE TABLE on_call (nurse VARCHAR); CREATE TABLE nurse (name VARCHAR, EmployeeID VARCHAR)"
How many ships are there?,SELECT COUNT(*) FROM ship,CREATE TABLE ship (Id VARCHAR)
List the name of ships in ascending order of tonnage.,SELECT Name FROM ship ORDER BY Tonnage,"CREATE TABLE ship (Name VARCHAR, Tonnage VARCHAR)"
What are the type and nationality of ships?,"SELECT TYPE, Nationality FROM ship","CREATE TABLE ship (TYPE VARCHAR, Nationality VARCHAR)"
"List the name of ships whose nationality is not ""United States"".","SELECT Name FROM ship WHERE Nationality <> ""United States""","CREATE TABLE ship (Name VARCHAR, Nationality VARCHAR)"
Show the name of ships whose nationality is either United States or United Kingdom.,"SELECT Name FROM ship WHERE Nationality = ""United States"" OR Nationality = ""United Kingdom""","CREATE TABLE ship (Name VARCHAR, Nationality VARCHAR)"
What is the name of the ship with the largest tonnage?,SELECT Name FROM ship ORDER BY Tonnage DESC LIMIT 1,"CREATE TABLE ship (Name VARCHAR, Tonnage VARCHAR)"
Show different types of ships and the number of ships of each type.,"SELECT TYPE, COUNT(*) FROM ship GROUP BY TYPE",CREATE TABLE ship (TYPE VARCHAR)
Please show the most common type of ships.,SELECT TYPE FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE ship (TYPE VARCHAR)
List the nations that have more than two ships.,SELECT Nationality FROM ship GROUP BY Nationality HAVING COUNT(*) > 2,CREATE TABLE ship (Nationality VARCHAR)
Show different types of ships and the average tonnage of ships of each type.,"SELECT TYPE, AVG(Tonnage) FROM ship GROUP BY TYPE","CREATE TABLE ship (TYPE VARCHAR, Tonnage INTEGER)"
"Show codes and fates of missions, and names of ships involved.","SELECT T1.Code, T1.Fate, T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID","CREATE TABLE mission (Code VARCHAR, Fate VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)"
Show names of ships involved in a mission launched after 1928.,SELECT T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T1.Launched_Year > 1928,"CREATE TABLE mission (Ship_ID VARCHAR, Launched_Year INTEGER); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)"
"Show the distinct fate of missions that involve ships with nationality ""United States""","SELECT DISTINCT T1.Fate FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Nationality = ""United States""","CREATE TABLE mission (Fate VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Ship_ID VARCHAR, Nationality VARCHAR)"
List the name of ships that are not involved in any mission,SELECT Name FROM ship WHERE NOT Ship_ID IN (SELECT Ship_ID FROM mission),"CREATE TABLE mission (Name VARCHAR, Ship_ID VARCHAR); CREATE TABLE ship (Name VARCHAR, Ship_ID VARCHAR)"
Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.,SELECT TYPE FROM ship WHERE Tonnage > 6000 INTERSECT SELECT TYPE FROM ship WHERE Tonnage < 4000,"CREATE TABLE ship (TYPE VARCHAR, Tonnage INTEGER)"
Find the number of students in total.,SELECT COUNT(*) FROM list,CREATE TABLE list (Id VARCHAR)
Find the last names of students studying in room 111.,SELECT lastname FROM list WHERE classroom = 111,"CREATE TABLE list (lastname VARCHAR, classroom VARCHAR)"
Find the first names of students studying in room 108.,SELECT firstname FROM list WHERE classroom = 108,"CREATE TABLE list (firstname VARCHAR, classroom VARCHAR)"
What are the first names of students studying in room 107?,SELECT DISTINCT firstname FROM list WHERE classroom = 107,"CREATE TABLE list (firstname VARCHAR, classroom VARCHAR)"
For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.,"SELECT DISTINCT classroom, grade FROM list","CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Which grade is studying in classroom 103?,SELECT DISTINCT grade FROM list WHERE classroom = 103,"CREATE TABLE list (grade VARCHAR, classroom VARCHAR)"
Find the grade studying in room 105.,SELECT DISTINCT grade FROM list WHERE classroom = 105,"CREATE TABLE list (grade VARCHAR, classroom VARCHAR)"
Which classrooms are used by grade 4?,SELECT DISTINCT classroom FROM list WHERE grade = 4,"CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Which classrooms are used by grade 5?,SELECT DISTINCT classroom FROM list WHERE grade = 5,"CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Find the last names of the teachers that teach fifth grade.,SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 5,"CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR)"
Find the first names of the teachers that teach first grade.,SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE grade = 1,"CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (firstname VARCHAR, classroom VARCHAR)"
Find the first names of all the teachers that teach in classroom 110.,SELECT firstname FROM teachers WHERE classroom = 110,"CREATE TABLE teachers (firstname VARCHAR, classroom VARCHAR)"
Find the last names of teachers teaching in classroom 109.,SELECT lastname FROM teachers WHERE classroom = 109,"CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR)"
Report the first name and last name of all the teachers.,"SELECT DISTINCT firstname, lastname FROM teachers","CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR)"
Report the first name and last name of all the students.,"SELECT DISTINCT firstname, lastname FROM list","CREATE TABLE list (firstname VARCHAR, lastname VARCHAR)"
Find all students taught by OTHA MOYER. Output the first and last names of the students.,"SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""OTHA"" AND T2.lastname = ""MOYER""","CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find all students taught by MARROTTE KIRK. Output first and last names of students.,"SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""MARROTTE"" AND T2.lastname = ""KIRK""","CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find the first and last name of all the teachers that teach EVELINA BROMLEY.,"SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = ""EVELINA"" AND T1.lastname = ""BROMLEY""","CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find the last names of all the teachers that teach GELL TAMI.,"SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = ""GELL"" AND T1.lastname = ""TAMI""","CREATE TABLE teachers (lastname VARCHAR, classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
How many students does LORIA ONDERSMA teaches?,"SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""LORIA"" AND T2.lastname = ""ONDERSMA""","CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
How many students does KAWA GORDON teaches?,"SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""KAWA"" AND T2.lastname = ""GORDON""","CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find the number of students taught by TARRING LEIA.,"SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""TARRING"" AND T2.lastname = ""LEIA""","CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
How many teachers does the student named CHRISSY NABOZNY have?,"SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = ""CHRISSY"" AND T1.lastname = ""NABOZNY""","CREATE TABLE teachers (classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
How many teachers does the student named MADLOCK RAY have?,"SELECT COUNT(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.firstname = ""MADLOCK"" AND T1.lastname = ""RAY""","CREATE TABLE teachers (classroom VARCHAR); CREATE TABLE list (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.,"SELECT DISTINCT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 1 EXCEPT SELECT T1.firstname, T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T2.firstname = ""OTHA"" AND T2.lastname = ""MOYER""","CREATE TABLE list (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR, grade VARCHAR); CREATE TABLE teachers (classroom VARCHAR, firstname VARCHAR, lastname VARCHAR)"
Find the last names of the students in third grade that are not taught by COVIN JEROME.,"SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom WHERE T1.grade = 3 AND T2.firstname <> ""COVIN"" AND T2.lastname <> ""JEROME""","CREATE TABLE list (lastname VARCHAR, classroom VARCHAR, grade VARCHAR); CREATE TABLE teachers (classroom VARCHAR, lastname VARCHAR, firstname VARCHAR)"
"For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.","SELECT grade, COUNT(DISTINCT classroom), COUNT(*) FROM list GROUP BY grade","CREATE TABLE list (grade VARCHAR, classroom VARCHAR)"
"For each classroom, report the classroom number and the number of grades using it.","SELECT classroom, COUNT(DISTINCT grade) FROM list GROUP BY classroom","CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Which classroom has the most students?,SELECT classroom FROM list GROUP BY classroom ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE list (classroom VARCHAR)
Report the number of students in each classroom.,"SELECT classroom, COUNT(*) FROM list GROUP BY classroom",CREATE TABLE list (classroom VARCHAR)
"For each grade 0 classroom, report the total number of students.","SELECT classroom, COUNT(*) FROM list WHERE grade = ""0"" GROUP BY classroom","CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Report the total number of students for each fourth-grade classroom.,"SELECT classroom, COUNT(*) FROM list WHERE grade = ""4"" GROUP BY classroom","CREATE TABLE list (classroom VARCHAR, grade VARCHAR)"
Find the name of the teacher who teaches the largest number of students.,"SELECT T2.firstname, T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom = T2.classroom GROUP BY T2.firstname, T2.lastname ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE list (classroom VARCHAR); CREATE TABLE teachers (firstname VARCHAR, lastname VARCHAR, classroom VARCHAR)"
Find the number of students in one classroom.,"SELECT COUNT(*), classroom FROM list GROUP BY classroom",CREATE TABLE list (classroom VARCHAR)
How many companies are headquartered in the US?,SELECT COUNT(*) FROM company WHERE Headquarters = 'USA',CREATE TABLE company (Headquarters VARCHAR)
List the names of companies by ascending number of sales.,SELECT Name FROM company ORDER BY Sales_in_Billion,"CREATE TABLE company (Name VARCHAR, Sales_in_Billion VARCHAR)"
What are the headquarters and industries of all companies?,"SELECT Headquarters, Industry FROM company","CREATE TABLE company (Headquarters VARCHAR, Industry VARCHAR)"
Show the names of companies in the banking or retailing industry?,"SELECT Name FROM company WHERE Industry = ""Banking"" OR Industry = ""Retailing""","CREATE TABLE company (Name VARCHAR, Industry VARCHAR)"
What is the maximum and minimum market value of companies?,"SELECT MAX(Market_Value_in_Billion), MIN(Market_Value_in_Billion) FROM company",CREATE TABLE company (Market_Value_in_Billion INTEGER)
What is the headquarter of the company with the largest sales?,SELECT Headquarters FROM company ORDER BY Sales_in_Billion DESC LIMIT 1,"CREATE TABLE company (Headquarters VARCHAR, Sales_in_Billion VARCHAR)"
Show the different headquarters and number of companies at each headquarter.,"SELECT Headquarters, COUNT(*) FROM company GROUP BY Headquarters",CREATE TABLE company (Headquarters VARCHAR)
Show the most common headquarter for companies.,SELECT Headquarters FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE company (Headquarters VARCHAR)
Show the headquarters that have at least two companies.,SELECT Headquarters FROM company GROUP BY Headquarters HAVING COUNT(*) >= 2,CREATE TABLE company (Headquarters VARCHAR)
Show the headquarters that have both companies in banking industry and companies in oil and gas industry.,"SELECT Headquarters FROM company WHERE Industry = ""Banking"" INTERSECT SELECT Headquarters FROM company WHERE Industry = ""Oil and gas""","CREATE TABLE company (Headquarters VARCHAR, Industry VARCHAR)"
Show the names of companies and of employees.,"SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID","CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
Show names of companies and that of employees in descending order of number of years working for that employee.,"SELECT T3.Name, T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID ORDER BY T1.Year_working","CREATE TABLE people (Name VARCHAR, People_ID VARCHAR); CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR, Year_working VARCHAR)"
Show the names of employees that work for companies with sales bigger than 200.,SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID WHERE T3.Sales_in_Billion > 200,"CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR); CREATE TABLE company (Company_ID VARCHAR, Sales_in_Billion INTEGER); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
Show the names of companies and the number of employees they have,"SELECT T3.Name, COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID JOIN company AS T3 ON T1.Company_ID = T3.Company_ID GROUP BY T3.Name","CREATE TABLE company (Name VARCHAR, Company_ID VARCHAR); CREATE TABLE people (People_ID VARCHAR); CREATE TABLE employment (People_ID VARCHAR, Company_ID VARCHAR)"
List the names of people that are not employed by any company,SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM employment),"CREATE TABLE employment (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
list the names of the companies with more than 200 sales in the descending order of sales and profits.,"SELECT name FROM company WHERE Sales_in_Billion > 200 ORDER BY Sales_in_Billion, Profits_in_Billion DESC","CREATE TABLE company (name VARCHAR, Sales_in_Billion INTEGER, Profits_in_Billion VARCHAR)"
How many film are there?,SELECT COUNT(*) FROM film,CREATE TABLE film (Id VARCHAR)
List the distinct director of all films.,SELECT DISTINCT Director FROM film,CREATE TABLE film (Director VARCHAR)
What is the average ticket sales gross in dollars of films?,SELECT AVG(Gross_in_dollar) FROM film,CREATE TABLE film (Gross_in_dollar INTEGER)
What are the low and high estimates of film markets?,"SELECT Low_Estimate, High_Estimate FROM film_market_estimation","CREATE TABLE film_market_estimation (Low_Estimate VARCHAR, High_Estimate VARCHAR)"
What are the types of film market estimations in year 1995?,SELECT TYPE FROM film_market_estimation WHERE YEAR = 1995,"CREATE TABLE film_market_estimation (TYPE VARCHAR, YEAR VARCHAR)"
What are the maximum and minimum number of cities in all markets.,"SELECT MAX(Number_cities), MIN(Number_cities) FROM market",CREATE TABLE market (Number_cities INTEGER)
How many markets have number of cities smaller than 300?,SELECT COUNT(*) FROM market WHERE Number_cities < 300,CREATE TABLE market (Number_cities INTEGER)
List all countries of markets in ascending alphabetical order.,SELECT Country FROM market ORDER BY Country,CREATE TABLE market (Country VARCHAR)
List all countries of markets in descending order of number of cities.,SELECT Country FROM market ORDER BY Number_cities DESC,"CREATE TABLE market (Country VARCHAR, Number_cities VARCHAR)"
Please show the titles of films and the types of market estimations.,"SELECT T1.Title, T2.Type FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID","CREATE TABLE film (Title VARCHAR, Film_ID VARCHAR); CREATE TABLE film_market_estimation (Type VARCHAR, Film_ID VARCHAR)"
Show the distinct director of films with market estimation in the year of 1995.,SELECT DISTINCT T1.Director FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID WHERE T2.Year = 1995,"CREATE TABLE film (Director VARCHAR, Film_ID VARCHAR); CREATE TABLE film_market_estimation (Film_ID VARCHAR, Year VARCHAR)"
What is the average number of cities of markets with low film market estimate bigger than 10000?,SELECT AVG(T2.Number_cities) FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T1.Low_Estimate > 10000,"CREATE TABLE market (Number_cities INTEGER, Market_ID VARCHAR); CREATE TABLE film_market_estimation (Market_ID VARCHAR, Low_Estimate INTEGER)"
Please list the countries and years of film market estimations.,"SELECT T2.Country, T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID","CREATE TABLE film_market_estimation (Year VARCHAR, Market_ID VARCHAR); CREATE TABLE market (Country VARCHAR, Market_ID VARCHAR)"
"Please list the years of film market estimations when the market is in country ""Japan"" in descending order.","SELECT T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID WHERE T2.Country = ""Japan"" ORDER BY T1.Year DESC","CREATE TABLE film_market_estimation (Year VARCHAR, Market_ID VARCHAR); CREATE TABLE market (Market_ID VARCHAR, Country VARCHAR)"
List the studios of each film and the number of films produced by that studio.,"SELECT Studio, COUNT(*) FROM film GROUP BY Studio",CREATE TABLE film (Studio VARCHAR)
List the name of film studio that have the most number of films.,SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE film (Studio VARCHAR)
List the names of studios that have at least two films.,SELECT Studio FROM film GROUP BY Studio HAVING COUNT(*) >= 2,CREATE TABLE film (Studio VARCHAR)
List the title of films that do not have any market estimation.,SELECT Title FROM film WHERE NOT Film_ID IN (SELECT Film_ID FROM film_market_estimation),"CREATE TABLE film_market_estimation (Title VARCHAR, Film_ID VARCHAR); CREATE TABLE film (Title VARCHAR, Film_ID VARCHAR)"
"Show the studios that have produced films with director ""Nicholas Meyer"" and ""Walter Hill"".","SELECT Studio FROM film WHERE Director = ""Nicholas Meyer"" INTERSECT SELECT Studio FROM film WHERE Director = ""Walter Hill""","CREATE TABLE film (Studio VARCHAR, Director VARCHAR)"
"Find the titles and studios of the films that are produced by some film studios that contained the word ""Universal"".","SELECT title, Studio FROM film WHERE Studio LIKE ""%Universal%""","CREATE TABLE film (title VARCHAR, Studio VARCHAR)"
"Show the studios that have not produced films with director ""Walter Hill"".","SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director = ""Walter Hill""","CREATE TABLE film (Studio VARCHAR, Director VARCHAR)"
List the studios which average gross is above 4500000.,SELECT Studio FROM film GROUP BY Studio HAVING AVG(Gross_in_dollar) >= 4500000,"CREATE TABLE film (Studio VARCHAR, Gross_in_dollar INTEGER)"
What is the title of the film that has the highest high market estimation.,SELECT t1.title FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID ORDER BY high_estimate DESC LIMIT 1,CREATE TABLE film_market_estimation (Film_ID VARCHAR); CREATE TABLE film (Film_ID VARCHAR)
What are the titles and directors of the films were never presented in China?,"SELECT title, director FROM film WHERE NOT film_id IN (SELECT film_id FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.market_id = T2.Market_ID WHERE country = 'China')","CREATE TABLE film (title VARCHAR, director VARCHAR, film_id VARCHAR, country VARCHAR); CREATE TABLE market (Market_ID VARCHAR); CREATE TABLE film_market_estimation (market_id VARCHAR)"
How many calendar items do we have?,SELECT COUNT(*) FROM Ref_calendar,CREATE TABLE Ref_calendar (Id VARCHAR)
Show all calendar dates and day Numbers.,"SELECT calendar_date, day_Number FROM Ref_calendar","CREATE TABLE Ref_calendar (calendar_date VARCHAR, day_Number VARCHAR)"
Show the number of document types.,SELECT COUNT(*) FROM Ref_document_types,CREATE TABLE Ref_document_types (Id VARCHAR)
List all document type codes and document type names.,"SELECT document_type_code, document_type_name FROM Ref_document_types","CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR)"
What is the name and description for document type code RV?,"SELECT document_type_name, document_type_description FROM Ref_document_types WHERE document_type_code = ""RV""","CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_description VARCHAR, document_type_code VARCHAR)"
"What is the document type code for document type ""Paper""?","SELECT document_type_code FROM Ref_document_types WHERE document_type_name = ""Paper""","CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR)"
Show the number of documents with document type code CV or BK.,"SELECT COUNT(*) FROM All_documents WHERE document_type_code = ""CV"" OR document_type_code = ""BK""",CREATE TABLE All_documents (document_type_code VARCHAR)
"What is the date when the document ""Marry CV"" was stored?","SELECT date_stored FROM All_documents WHERE Document_name = ""Marry CV""","CREATE TABLE All_documents (date_stored VARCHAR, Document_name VARCHAR)"
What is the day Number and date of all the documents?,"SELECT T2.day_Number, T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date","CREATE TABLE All_documents (Date_Stored VARCHAR, date_stored VARCHAR); CREATE TABLE Ref_calendar (day_Number VARCHAR, calendar_date VARCHAR)"
"What is the document type name for the document with name ""How to read a book""?","SELECT T2.document_type_name FROM All_documents AS T1 JOIN Ref_document_types AS T2 ON T1.document_type_code = T2.document_type_code WHERE T1.document_name = ""How to read a book""","CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_code VARCHAR); CREATE TABLE All_documents (document_type_code VARCHAR, document_name VARCHAR)"
Show the number of locations.,SELECT COUNT(*) FROM Ref_locations,CREATE TABLE Ref_locations (Id VARCHAR)
List all location codes and location names.,"SELECT location_code, location_name FROM Ref_locations","CREATE TABLE Ref_locations (location_code VARCHAR, location_name VARCHAR)"
What are the name and description for location code x?,"SELECT location_name, location_description FROM Ref_locations WHERE location_code = ""x""","CREATE TABLE Ref_locations (location_name VARCHAR, location_description VARCHAR, location_code VARCHAR)"
"What is the location code for the country ""Canada""?","SELECT location_code FROM Ref_locations WHERE location_name = ""Canada""","CREATE TABLE Ref_locations (location_code VARCHAR, location_name VARCHAR)"
How many roles are there?,SELECT COUNT(*) FROM ROLES,CREATE TABLE ROLES (Id VARCHAR)
"List all role codes, role names, and role descriptions.","SELECT role_code, role_name, role_description FROM ROLES","CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR, role_description VARCHAR)"
"What are the name and description for role code ""MG""?","SELECT role_name, role_description FROM ROLES WHERE role_code = ""MG""","CREATE TABLE ROLES (role_name VARCHAR, role_description VARCHAR, role_code VARCHAR)"
"Show the description for role name ""Proof Reader"".","SELECT role_description FROM ROLES WHERE role_name = ""Proof Reader""","CREATE TABLE ROLES (role_description VARCHAR, role_name VARCHAR)"
"Show the name, role code, and date of birth for the employee with name 'Armani'.","SELECT employee_name, role_code, date_of_birth FROM Employees WHERE employee_Name = 'Armani'","CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR, date_of_birth VARCHAR, employee_Name VARCHAR)"
What is the id for the employee called Ebba?,"SELECT employee_ID FROM Employees WHERE employee_name = ""Ebba""","CREATE TABLE Employees (employee_ID VARCHAR, employee_name VARCHAR)"
"Show the names of all the employees with role ""HR"".","SELECT employee_name FROM Employees WHERE role_code = ""HR""","CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR)"
Show all role codes and the number of employees in each role.,"SELECT role_code, COUNT(*) FROM Employees GROUP BY role_code",CREATE TABLE Employees (role_code VARCHAR)
What is the role code with the largest number of employees?,SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Employees (role_code VARCHAR)
Show all role codes with at least 3 employees.,SELECT role_code FROM Employees GROUP BY role_code HAVING COUNT(*) >= 3,CREATE TABLE Employees (role_code VARCHAR)
Show the role code with the least employees.,SELECT role_code FROM Employees GROUP BY role_code ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Employees (role_code VARCHAR)
What is the role name and role description for employee called Ebba?,"SELECT T2.role_name, T2.role_description FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T1.employee_name = ""Ebba""","CREATE TABLE Employees (role_code VARCHAR, employee_name VARCHAR); CREATE TABLE ROLES (role_name VARCHAR, role_description VARCHAR, role_code VARCHAR)"
Show the names of employees with role name Editor.,"SELECT T1.employee_name FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = ""Editor""","CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR); CREATE TABLE Employees (employee_name VARCHAR, role_code VARCHAR)"
"Show the employee ids for all employees with role name ""Human Resource"" or ""Manager"".","SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code = T2.role_code WHERE T2.role_name = ""Human Resource"" OR T2.role_name = ""Manager""","CREATE TABLE Employees (employee_id VARCHAR, role_code VARCHAR); CREATE TABLE ROLES (role_code VARCHAR, role_name VARCHAR)"
What are the different location codes for documents?,SELECT DISTINCT location_code FROM Document_locations,CREATE TABLE Document_locations (location_code VARCHAR)
"Show the location name for document ""Robin CV"".","SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id = T2.document_id JOIN Ref_locations AS T3 ON T2.location_code = T3.location_code WHERE T1.document_name = ""Robin CV""","CREATE TABLE Ref_locations (location_name VARCHAR, location_code VARCHAR); CREATE TABLE All_documents (document_id VARCHAR, document_name VARCHAR); CREATE TABLE Document_locations (document_id VARCHAR, location_code VARCHAR)"
"Show the location code, the starting date and ending data in that location for all the documents.","SELECT location_code, date_in_location_from, date_in_locaton_to FROM Document_locations","CREATE TABLE Document_locations (location_code VARCHAR, date_in_location_from VARCHAR, date_in_locaton_to VARCHAR)"
"What is ""the date in location from"" and ""the date in location to"" for the document with name ""Robin CV""?","SELECT T1.date_in_location_from, T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = ""Robin CV""","CREATE TABLE All_documents (document_id VARCHAR, document_name VARCHAR); CREATE TABLE Document_locations (date_in_location_from VARCHAR, date_in_locaton_to VARCHAR, document_id VARCHAR)"
Show the location codes and the number of documents in each location.,"SELECT location_code, COUNT(*) FROM Document_locations GROUP BY location_code",CREATE TABLE Document_locations (location_code VARCHAR)
What is the location code with the most documents?,SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Document_locations (location_code VARCHAR)
Show the location codes with at least 3 documents.,SELECT location_code FROM Document_locations GROUP BY location_code HAVING COUNT(*) >= 3,CREATE TABLE Document_locations (location_code VARCHAR)
Show the location name and code with the least documents.,"SELECT T2.location_name, T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code = T2.location_code GROUP BY T1.location_code ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Document_locations (location_code VARCHAR); CREATE TABLE Ref_locations (location_name VARCHAR, location_code VARCHAR)"
What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?,"SELECT T2.employee_name, T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id","CREATE TABLE Employees (employee_name VARCHAR, employee_id VARCHAR); CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR, Destroyed_by_Employee_ID VARCHAR)"
Show the id of each employee and the number of document destruction authorised by that employee.,"SELECT Destruction_Authorised_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR)
Show the employee ids and the number of documents destroyed by each employee.,"SELECT Destroyed_by_Employee_ID, COUNT(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR)
Show the ids of the employees who don't authorize destruction for any document.,SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,"CREATE TABLE Documents_to_be_destroyed (employee_id VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR); CREATE TABLE Employees (employee_id VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR)"
Show the ids of all employees who have authorized destruction.,SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,CREATE TABLE Documents_to_be_destroyed (Destruction_Authorised_by_Employee_ID VARCHAR)
Show the ids of all employees who have destroyed a document.,SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR)
Show the ids of all employees who don't destroy any document.,SELECT employee_id FROM Employees EXCEPT SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed,"CREATE TABLE Employees (employee_id VARCHAR, Destroyed_by_Employee_ID VARCHAR); CREATE TABLE Documents_to_be_destroyed (employee_id VARCHAR, Destroyed_by_Employee_ID VARCHAR)"
Show the ids of all employees who have either destroyed a document or made an authorization to do this.,SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed,"CREATE TABLE Documents_to_be_destroyed (Destroyed_by_Employee_ID VARCHAR, Destruction_Authorised_by_Employee_ID VARCHAR)"
What are the names of all clubs?,SELECT clubname FROM club,CREATE TABLE club (clubname VARCHAR)
How many students are there?,SELECT COUNT(*) FROM student,CREATE TABLE student (Id VARCHAR)
What are the first names of all the students?,SELECT DISTINCT fname FROM student,CREATE TABLE student (fname VARCHAR)
"Find the last names of the members of the club ""Bootup Baltimore"".","SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Who are the members of the club named ""Hopkins Student Enterprises""? Show the last name.","SELECT t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Hopkins Student Enterprises""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"How many members does the club ""Tennis Club"" has?","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Tennis Club""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)"
"Find the number of members of club ""Pen and Paper Gaming"".","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Pen and Paper Gaming""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)"
"How many clubs does ""Linda Smith"" belong to?","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = ""Linda"" AND t3.lname = ""Smith""","CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubid VARCHAR)"
"Find the number of clubs where ""Tracy Kim"" is a member.","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = ""Tracy"" AND t3.lname = ""Kim""","CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubid VARCHAR)"
"Find all the female members of club ""Bootup Baltimore"". Show the first name and last name.","SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore"" AND t3.sex = ""F""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Find all the male members of club ""Hopkins Student Enterprises"". Show the first name and last name.","SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Hopkins Student Enterprises"" AND t3.sex = ""M""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Find all members of ""Bootup Baltimore"" whose major is ""600"". Show the first name and last name.","SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore"" AND t3.major = ""600""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR, major VARCHAR)"
"Which club has the most members majoring in ""600""?","SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.major = ""600"" GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE student (stuid VARCHAR, major VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)"
Find the name of the club that has the most female students.,"SELECT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.sex = ""F"" GROUP BY t1.clubname ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE student (stuid VARCHAR, sex VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)"
"What is the description of the club named ""Tennis Club""?","SELECT clubdesc FROM club WHERE clubname = ""Tennis Club""","CREATE TABLE club (clubdesc VARCHAR, clubname VARCHAR)"
"Find the description of the club ""Pen and Paper Gaming"".","SELECT clubdesc FROM club WHERE clubname = ""Pen and Paper Gaming""","CREATE TABLE club (clubdesc VARCHAR, clubname VARCHAR)"
"What is the location of the club named ""Tennis Club""?","SELECT clublocation FROM club WHERE clubname = ""Tennis Club""","CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)"
"Find the location of the club ""Pen and Paper Gaming"".","SELECT clublocation FROM club WHERE clubname = ""Pen and Paper Gaming""","CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)"
"Where is the club ""Hopkins Student Enterprises"" located?","SELECT clublocation FROM club WHERE clubname = ""Hopkins Student Enterprises""","CREATE TABLE club (clublocation VARCHAR, clubname VARCHAR)"
"Find the name of all the clubs at ""AKW"".","SELECT clubname FROM club WHERE clublocation = ""AKW""","CREATE TABLE club (clubname VARCHAR, clublocation VARCHAR)"
"How many clubs are located at ""HHH""?","SELECT COUNT(*) FROM club WHERE clublocation = ""HHH""",CREATE TABLE club (clublocation VARCHAR)
"What are the first and last name of the president of the club ""Bootup Baltimore""?","SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore"" AND t2.position = ""President""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR, position VARCHAR)"
"Who is the ""CTO"" of club ""Hopkins Student Enterprises""? Show the first name and last name.","SELECT t3.fname, t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Hopkins Student Enterprises"" AND t2.position = ""CTO""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR, position VARCHAR)"
"How many different roles are there in the club ""Bootup Baltimore""?","SELECT COUNT(DISTINCT t2.position) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid WHERE t1.clubname = ""Bootup Baltimore""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE member_of_club (position VARCHAR, clubid VARCHAR)"
"How many members of ""Bootup Baltimore"" are older than 18?","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore"" AND t3.age > 18","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (stuid VARCHAR, age VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"How many members of club ""Bootup Baltimore"" are younger than 18?","SELECT COUNT(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore"" AND t3.age < 18","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (stuid VARCHAR, age VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Find the names of all the clubs that have at least a member from the city with city code ""BAL"".","SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = ""BAL""","CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, city_code VARCHAR)"
"Find the names of the clubs that have at least a member from the city with city code ""HOU"".","SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.city_code = ""HOU""","CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, city_code VARCHAR)"
"How many clubs does the student named ""Eric Tai"" belong to?","SELECT COUNT(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = ""Eric"" AND t3.lname = ""Tai""","CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)"
"List the clubs having ""Davis Steven"" as a member.","SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.fname = ""Davis"" AND t3.lname = ""Steven""","CREATE TABLE student (stuid VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR)"
"List the clubs that have at least a member with advisor ""1121"".",SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t3.advisor = 1121,"CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR); CREATE TABLE club (clubname VARCHAR, clubid VARCHAR); CREATE TABLE student (stuid VARCHAR, advisor VARCHAR)"
"What is the average age of the members of the club ""Bootup Baltimore""?","SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Bootup Baltimore""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Find the average age of members of the club ""Hopkins Student Enterprises"".","SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Hopkins Student Enterprises""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
"Retrieve the average age of members of the club ""Tennis Club"".","SELECT AVG(t3.age) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid = t2.clubid JOIN student AS t3 ON t2.stuid = t3.stuid WHERE t1.clubname = ""Tennis Club""","CREATE TABLE club (clubid VARCHAR, clubname VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE member_of_club (clubid VARCHAR, stuid VARCHAR)"
What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?,SELECT T1.grant_amount FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id WHERE T2.sent_date < '1986-08-26 20:49:27' INTERSECT SELECT grant_amount FROM grants WHERE grant_end_date > '1989-03-16 18:27:16',"CREATE TABLE grants (grant_amount VARCHAR, grant_end_date INTEGER); CREATE TABLE Grants (grant_amount VARCHAR, grant_id VARCHAR); CREATE TABLE Documents (grant_id VARCHAR, sent_date INTEGER)"
List the project details of the project both producing patent and paper as outcomes.,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Paper' INTERSECT SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id WHERE T2.outcome_code = 'Patent',"CREATE TABLE Project_outcomes (project_id VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)"
What is the total grant amount of the organisations described as research?,SELECT SUM(grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id JOIN organisation_Types AS T3 ON T2.organisation_type = T3.organisation_type WHERE T3.organisation_type_description = 'Research',"CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Grants (organisation_id VARCHAR); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR)"
List from which date and to which date these staff work: project staff of the project which hires the most staffs,"SELECT date_from, date_to FROM Project_Staff WHERE project_id IN (SELECT project_id FROM Project_Staff GROUP BY project_id ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'leader'","CREATE TABLE Project_Staff (date_from VARCHAR, date_to VARCHAR, project_id VARCHAR, role_code VARCHAR)"
Find the organisation ids and details of the organisations which are involved in,"SELECT T2.organisation_id, T2.organisation_details FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id HAVING SUM(T1.grant_amount) > 6000","CREATE TABLE Grants (organisation_id VARCHAR, grant_amount INTEGER); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_details VARCHAR)"
What is the organisation type and id of the organisation which has the most number of research staff?,"SELECT T1.organisation_type, T1.organisation_id FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Research_Staff (employer_organisation_id VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR, organisation_id VARCHAR)"
Which organisation type hires most research staff?,SELECT T1.organisation_type FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_type ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Research_Staff (employer_organisation_id VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR, organisation_id VARCHAR)"
Find out the send dates of the documents with the grant amount of more than 5000 were granted by organisation type described,SELECT T1.sent_date FROM documents AS T1 JOIN Grants AS T2 ON T1.grant_id = T2.grant_id JOIN Organisations AS T3 ON T2.organisation_id = T3.organisation_id JOIN organisation_Types AS T4 ON T3.organisation_type = T4.organisation_type WHERE T2.grant_amount > 5000 AND T4.organisation_type_description = 'Research',"CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Grants (grant_id VARCHAR, organisation_id VARCHAR, grant_amount VARCHAR); CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR); CREATE TABLE documents (sent_date VARCHAR, grant_id VARCHAR)"
What are the response received dates for the documents described as 'Regular' or granted with more than 100?,SELECT T1.response_received_date FROM Documents AS T1 JOIN Document_Types AS T2 ON T1.document_type_code = T2.document_type_code JOIN Grants AS T3 ON T1.grant_id = T3.grant_id WHERE T2.document_description = 'Regular' OR T3.grant_amount > 100,"CREATE TABLE Documents (response_received_date VARCHAR, document_type_code VARCHAR, grant_id VARCHAR); CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR); CREATE TABLE Grants (grant_id VARCHAR, grant_amount VARCHAR)"
List the project details of the projects which did not hire any staff for a researcher role.,SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_Staff WHERE role_code = 'researcher'),"CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR, role_code VARCHAR); CREATE TABLE Project_Staff (project_details VARCHAR, project_id VARCHAR, role_code VARCHAR)"
"What are the task details, task id and project id for the projects which are detailed as 'omnis' or  have more than 2 outcomes?","SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'omnis' UNION SELECT T1.task_details, T1.task_id, T2.project_id FROM Tasks AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.project_id HAVING COUNT(*) > 2","CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR); CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Tasks (task_details VARCHAR, task_id VARCHAR, project_id VARCHAR)"
"When do all the researcher role staff start to work, and when do they stop working?","SELECT date_from, date_to FROM Project_Staff WHERE role_code = 'researcher'","CREATE TABLE Project_Staff (date_from VARCHAR, date_to VARCHAR, role_code VARCHAR)"
How many kinds of roles are there for the staff?,SELECT COUNT(DISTINCT role_code) FROM Project_Staff,CREATE TABLE Project_Staff (role_code VARCHAR)
What is the total amount of grants given by each organisations? Also list the organisation id.,"SELECT SUM(grant_amount), organisation_id FROM Grants GROUP BY organisation_id","CREATE TABLE Grants (organisation_id VARCHAR, grant_amount INTEGER)"
List the project details of the projects with the research outcome described with the substring 'Published'.,SELECT T1.project_details FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id JOIN Research_outcomes AS T3 ON T2.outcome_code = T3.outcome_code WHERE T3.outcome_description LIKE '%Published%',"CREATE TABLE Research_outcomes (outcome_code VARCHAR, outcome_description VARCHAR); CREATE TABLE Project_outcomes (project_id VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)"
How many staff does each project has? List the project id and the number in an ascending order.,"SELECT T1.project_id, COUNT(*) FROM Project_Staff AS T1 JOIN Projects AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*)",CREATE TABLE Project_Staff (project_id VARCHAR); CREATE TABLE Projects (project_id VARCHAR)
What is the complete description of the researcher role.,SELECT role_description FROM Staff_Roles WHERE role_code = 'researcher',"CREATE TABLE Staff_Roles (role_description VARCHAR, role_code VARCHAR)"
When did the first staff for the projects started working?,SELECT date_from FROM Project_Staff ORDER BY date_from LIMIT 1,CREATE TABLE Project_Staff (date_from VARCHAR)
Which project made the most number of outcomes? List the project details and the project id.,"SELECT T1.project_details, T1.project_id FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)"
Which projects have no outcome? List the project details.,SELECT project_details FROM Projects WHERE NOT project_id IN (SELECT project_id FROM Project_outcomes),"CREATE TABLE Project_outcomes (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR)"
"Which organisation hired the most number of research staff? List the organisation id, type and detail.","SELECT T1.organisation_id, T1.organisation_type, T1.organisation_details FROM Organisations AS T1 JOIN Research_Staff AS T2 ON T1.organisation_id = T2.employer_organisation_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Organisations (organisation_id VARCHAR, organisation_type VARCHAR, organisation_details VARCHAR); CREATE TABLE Research_Staff (employer_organisation_id VARCHAR)"
Show the role description and the id of the project staff involved in most number of project outcomes?,"SELECT T1.role_description, T2.staff_id FROM Staff_Roles AS T1 JOIN Project_Staff AS T2 ON T1.role_code = T2.role_code JOIN Project_outcomes AS T3 ON T2.project_id = T3.project_id GROUP BY T2.staff_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Project_Staff (staff_id VARCHAR, role_code VARCHAR, project_id VARCHAR); CREATE TABLE Staff_Roles (role_description VARCHAR, role_code VARCHAR)"
Which document type is described with the prefix 'Initial'?,SELECT document_type_code FROM Document_Types WHERE document_description LIKE 'Initial%',"CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR)"
"For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Regular' INTERSECT SELECT T1.grant_start_date FROM Grants AS T1 JOIN Documents AS T2 ON T1.grant_id = T2.grant_id JOIN Document_Types AS T3 ON T2.document_type_code = T3.document_type_code WHERE T3.document_description = 'Initial Application',"CREATE TABLE Grants (grant_start_date VARCHAR, grant_id VARCHAR); CREATE TABLE Document_Types (document_type_code VARCHAR, document_description VARCHAR); CREATE TABLE Documents (grant_id VARCHAR, document_type_code VARCHAR)"
How many documents can one grant have at most? List the grant id and number.,"SELECT grant_id, COUNT(*) FROM Documents GROUP BY grant_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Documents (grant_id VARCHAR)
Find the organisation type description of the organisation detailed as 'quo'.,SELECT T1.organisation_type_description FROM organisation_Types AS T1 JOIN Organisations AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_details = 'quo',"CREATE TABLE Organisations (organisation_type VARCHAR, organisation_details VARCHAR); CREATE TABLE organisation_Types (organisation_type_description VARCHAR, organisation_type VARCHAR)"
What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.,SELECT organisation_details FROM Organisations AS T1 JOIN organisation_Types AS T2 ON T1.organisation_type = T2.organisation_type WHERE T2.organisation_type_description = 'Sponsor' ORDER BY organisation_details,"CREATE TABLE organisation_Types (organisation_type VARCHAR, organisation_type_description VARCHAR); CREATE TABLE Organisations (organisation_type VARCHAR)"
How many Patent outcomes are generated from all the projects?,SELECT COUNT(*) FROM Project_outcomes WHERE outcome_code = 'Patent',CREATE TABLE Project_outcomes (outcome_code VARCHAR)
How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?,SELECT COUNT(*) FROM Project_Staff WHERE role_code = 'leader' OR date_from < '1989-04-24 23:51:54',"CREATE TABLE Project_Staff (role_code VARCHAR, date_from VARCHAR)"
What is the last date of the staff leaving the projects?,SELECT date_to FROM Project_Staff ORDER BY date_to DESC LIMIT 1,CREATE TABLE Project_Staff (date_to VARCHAR)
What are the result description of the project whose detail is 'sint'?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code JOIN Projects AS T3 ON T2.project_id = T3.project_id WHERE T3.project_details = 'sint',"CREATE TABLE Project_outcomes (outcome_code VARCHAR, project_id VARCHAR); CREATE TABLE Research_outcomes (outcome_description VARCHAR, outcome_code VARCHAR); CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR)"
"List the organisation id with the maximum outcome count, and the count.","SELECT T1.organisation_id, COUNT(*) FROM Projects AS T1 JOIN Project_outcomes AS T2 ON T1.project_id = T2.project_id GROUP BY T1.organisation_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Project_outcomes (project_id VARCHAR); CREATE TABLE Projects (organisation_id VARCHAR, project_id VARCHAR)"
List the project details of the projects launched by the organisation,SELECT project_details FROM Projects WHERE organisation_id IN (SELECT organisation_id FROM Projects GROUP BY organisation_id ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE Projects (project_details VARCHAR, organisation_id VARCHAR)"
"List the research staff details, and order in ascending order.",SELECT staff_details FROM Research_Staff ORDER BY staff_details,CREATE TABLE Research_Staff (staff_details VARCHAR)
How many tasks are there in total?,SELECT COUNT(*) FROM Tasks,CREATE TABLE Tasks (Id VARCHAR)
How many tasks does each project have? List the task count and the project detail.,"SELECT COUNT(*), T1.project_details FROM Projects AS T1 JOIN Tasks AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id","CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Tasks (project_id VARCHAR)"
What are the staff roles of the staff who,SELECT role_code FROM Project_Staff WHERE date_from > '2003-04-19 15:06:20' AND date_to < '2016-03-15 00:33:18',"CREATE TABLE Project_Staff (role_code VARCHAR, date_from VARCHAR, date_to VARCHAR)"
What are the descriptions of all the project outcomes?,SELECT T1.outcome_description FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code,"CREATE TABLE Research_outcomes (outcome_description VARCHAR, outcome_code VARCHAR); CREATE TABLE Project_outcomes (outcome_code VARCHAR)"
Which role is most common for the staff?,SELECT role_code FROM Project_Staff GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Project_Staff (role_code VARCHAR)
How many friends does Dan have?,SELECT COUNT(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Dan',"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR)"
How many females does this network has?,SELECT COUNT(*) FROM Person WHERE gender = 'female',CREATE TABLE Person (gender VARCHAR)
What is the average age for all person?,SELECT AVG(age) FROM Person,CREATE TABLE Person (age INTEGER)
How many different cities are they from?,SELECT COUNT(DISTINCT city) FROM Person,CREATE TABLE Person (city VARCHAR)
How many type of jobs do they have?,SELECT COUNT(DISTINCT job) FROM Person,CREATE TABLE Person (job VARCHAR)
Who is the oldest person?,SELECT name FROM Person WHERE age = (SELECT MAX(age) FROM person),"CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE person (name VARCHAR, age INTEGER)"
Who is the oldest person whose job is student?,SELECT name FROM Person WHERE job = 'student' AND age = (SELECT MAX(age) FROM person WHERE job = 'student'),"CREATE TABLE person (name VARCHAR, job VARCHAR, age INTEGER); CREATE TABLE Person (name VARCHAR, job VARCHAR, age INTEGER)"
Who is the youngest male?,SELECT name FROM Person WHERE gender = 'male' AND age = (SELECT MIN(age) FROM person WHERE gender = 'male'),"CREATE TABLE Person (name VARCHAR, gender VARCHAR, age INTEGER); CREATE TABLE person (name VARCHAR, gender VARCHAR, age INTEGER)"
How old is the doctor named Zach?,SELECT age FROM Person WHERE job = 'doctor' AND name = 'Zach',"CREATE TABLE Person (age VARCHAR, job VARCHAR, name VARCHAR)"
Who is the person whose age is below 30?,SELECT name FROM Person WHERE age < 30,"CREATE TABLE Person (name VARCHAR, age INTEGER)"
How many people whose age is greater 30 and job is engineer?,SELECT COUNT(*) FROM Person WHERE age > 30 AND job = 'engineer',"CREATE TABLE Person (age VARCHAR, job VARCHAR)"
What is the average age for each gender?,"SELECT AVG(age), gender FROM Person GROUP BY gender","CREATE TABLE Person (gender VARCHAR, age INTEGER)"
What is average age for different job title?,"SELECT AVG(age), job FROM Person GROUP BY job","CREATE TABLE Person (job VARCHAR, age INTEGER)"
What is average age of male for different job title?,"SELECT AVG(age), job FROM Person WHERE gender = 'male' GROUP BY job","CREATE TABLE Person (job VARCHAR, age INTEGER, gender VARCHAR)"
What is minimum age for different job title?,"SELECT MIN(age), job FROM Person GROUP BY job","CREATE TABLE Person (job VARCHAR, age INTEGER)"
Find the number of people who is under 40 for each gender.,"SELECT COUNT(*), gender FROM Person WHERE age < 40 GROUP BY gender","CREATE TABLE Person (gender VARCHAR, age INTEGER)"
Find the name of people whose age is greater than any engineer sorted by their age.,SELECT name FROM Person WHERE age > (SELECT MIN(age) FROM person WHERE job = 'engineer') ORDER BY age,"CREATE TABLE Person (name VARCHAR, age INTEGER, job VARCHAR); CREATE TABLE person (name VARCHAR, age INTEGER, job VARCHAR)"
Find the number of people whose age is greater than all engineers.,SELECT COUNT(*) FROM Person WHERE age > (SELECT MAX(age) FROM person WHERE job = 'engineer'),"CREATE TABLE Person (age INTEGER, job VARCHAR); CREATE TABLE person (age INTEGER, job VARCHAR)"
"list the name, job title of all people ordered by their names.","SELECT name, job FROM Person ORDER BY name","CREATE TABLE Person (name VARCHAR, job VARCHAR)"
Find the names of all person sorted in the descending order using age.,SELECT name FROM Person ORDER BY age DESC,"CREATE TABLE Person (name VARCHAR, age VARCHAR)"
Find the name and age of all males in order of their age.,SELECT name FROM Person WHERE gender = 'male' ORDER BY age,"CREATE TABLE Person (name VARCHAR, gender VARCHAR, age VARCHAR)"
Find the name and age of the person who is a friend of both Dan and Alice.,"SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' INTERSECT SELECT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice'","CREATE TABLE Person (name VARCHAR, age VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)"
Find the name and age of the person who is a friend of Dan or Alice.,"SELECT DISTINCT T1.name, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Dan' OR T2.friend = 'Alice'","CREATE TABLE Person (name VARCHAR, age VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)"
Find the name of the person who has friends with age above 40 and under age 30?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30),"CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)"
Find the name of the person who has friends with age above 40 but not under age 30?,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age > 40) EXCEPT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age < 30),"CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)"
Find the name of the person who has no student friends.,SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.job = 'student',"CREATE TABLE Person (name VARCHAR, job VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE person (name VARCHAR)"
Find the person who has exactly one friend.,SELECT name FROM PersonFriend GROUP BY name HAVING COUNT(*) = 1,CREATE TABLE PersonFriend (name VARCHAR)
Who are the friends of Bob?,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = 'Bob',"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR)"
Find the name of persons who are friends with Bob.,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Bob',"CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)"
Find the names of females who are friends with Zach,SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Zach' AND T1.gender = 'female',"CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR, gender VARCHAR)"
Find the female friends of Alice.,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'female',"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR, gender VARCHAR)"
Find the male friend of Alice whose job is a doctor?,SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Alice' AND T1.gender = 'male' AND T1.job = 'doctor',"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR); CREATE TABLE Person (name VARCHAR, job VARCHAR, gender VARCHAR)"
Who has a friend that is from new york city?,SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.city = 'new york city',"CREATE TABLE Person (name VARCHAR, city VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)"
Who has friends that are younger than the average age?,SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age < (SELECT AVG(age) FROM person),"CREATE TABLE person (age INTEGER); CREATE TABLE Person (name VARCHAR, age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR)"
Who has friends that are older than the average age? Print their friends and their ages as well,"SELECT DISTINCT T2.name, T2.friend, T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT AVG(age) FROM person)","CREATE TABLE person (age INTEGER); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (age INTEGER, name VARCHAR)"
Who is the friend of Zach with longest year relationship?,SELECT friend FROM PersonFriend WHERE name = 'Zach' AND YEAR = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach'),"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR, YEAR INTEGER)"
What is the age of the friend of Zach with longest year relationship?,SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T2.name = 'Zach' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE name = 'Zach'),"CREATE TABLE PersonFriend (friend VARCHAR, name VARCHAR, year VARCHAR); CREATE TABLE PersonFriend (YEAR INTEGER, name VARCHAR); CREATE TABLE Person (age VARCHAR, name VARCHAR)"
Find the name of persons who are friends with Alice for the shortest years.,SELECT name FROM PersonFriend WHERE friend = 'Alice' AND YEAR = (SELECT MIN(YEAR) FROM PersonFriend WHERE friend = 'Alice'),"CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, YEAR INTEGER)"
"Find the name, age, and job title of persons who are friends with Alice for the longest years.","SELECT T1.name, T1.age, T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = 'Alice' AND T2.year = (SELECT MAX(YEAR) FROM PersonFriend WHERE friend = 'Alice')","CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, year VARCHAR); CREATE TABLE Person (name VARCHAR, age VARCHAR, job VARCHAR); CREATE TABLE PersonFriend (YEAR INTEGER, friend VARCHAR)"
Who is the person that has no friend?,SELECT name FROM person EXCEPT SELECT name FROM PersonFriend,CREATE TABLE PersonFriend (name VARCHAR); CREATE TABLE person (name VARCHAR)
Which person whose friends have the oldest average age?,"SELECT T2.name, AVG(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend GROUP BY T2.name ORDER BY AVG(T1.age) DESC LIMIT 1","CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (age INTEGER, name VARCHAR)"
What is the total number of people who has no friend living in the city of Austin.,SELECT COUNT(DISTINCT name) FROM PersonFriend WHERE NOT friend IN (SELECT name FROM person WHERE city = 'Austin'),"CREATE TABLE person (name VARCHAR, friend VARCHAR, city VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR, city VARCHAR)"
Find Alice's friends of friends.,SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name = T2.name JOIN PersonFriend AS T3 ON T1.friend = T3.name JOIN PersonFriend AS T4 ON T3.friend = T4.name WHERE T2.name = 'Alice' AND T4.name <> 'Alice',"CREATE TABLE PersonFriend (name VARCHAR); CREATE TABLE PersonFriend (name VARCHAR, friend VARCHAR); CREATE TABLE Person (name VARCHAR)"
How many members are there?,SELECT COUNT(*) FROM member,CREATE TABLE member (Id VARCHAR)
List the names of members in ascending alphabetical order.,SELECT Name FROM member ORDER BY Name,CREATE TABLE member (Name VARCHAR)
What are the names and countries of members?,"SELECT Name, Country FROM member","CREATE TABLE member (Name VARCHAR, Country VARCHAR)"
"Show the names of members whose country is ""United States"" or ""Canada"".","SELECT Name FROM member WHERE Country = ""United States"" OR Country = ""Canada""","CREATE TABLE member (Name VARCHAR, Country VARCHAR)"
Show the different countries and the number of members from each.,"SELECT Country, COUNT(*) FROM member GROUP BY Country",CREATE TABLE member (Country VARCHAR)
Show the most common country across members.,SELECT Country FROM member GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE member (Country VARCHAR)
Which countries have more than two members?,SELECT Country FROM member GROUP BY Country HAVING COUNT(*) > 2,CREATE TABLE member (Country VARCHAR)
Show the leader names and locations of colleges.,"SELECT Leader_Name, College_Location FROM college","CREATE TABLE college (Leader_Name VARCHAR, College_Location VARCHAR)"
Show the names of members and names of colleges they go to.,"SELECT T2.Name, T1.Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID","CREATE TABLE member (Name VARCHAR, College_ID VARCHAR); CREATE TABLE college (Name VARCHAR, College_ID VARCHAR)"
Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.,"SELECT T2.Name, T1.College_Location FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID ORDER BY T2.Name","CREATE TABLE member (Name VARCHAR, College_ID VARCHAR); CREATE TABLE college (College_Location VARCHAR, College_ID VARCHAR)"
"Show the distinct leader names of colleges associated with members from country ""Canada"".","SELECT DISTINCT T1.Leader_Name FROM college AS T1 JOIN member AS T2 ON T1.College_ID = T2.College_ID WHERE T2.Country = ""Canada""","CREATE TABLE college (Leader_Name VARCHAR, College_ID VARCHAR); CREATE TABLE member (College_ID VARCHAR, Country VARCHAR)"
Show the names of members and the decoration themes they have.,"SELECT T1.Name, T2.Decoration_Theme FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID","CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Decoration_Theme VARCHAR, Member_ID VARCHAR)"
Show the names of members that have a rank in round higher than 3.,SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID WHERE T2.Rank_in_Round > 3,"CREATE TABLE round (Member_ID VARCHAR, Rank_in_Round INTEGER); CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR)"
Show the names of members in ascending order of their rank in rounds.,SELECT T1.Name FROM member AS T1 JOIN round AS T2 ON T1.Member_ID = T2.Member_ID ORDER BY Rank_in_Round,"CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Member_ID VARCHAR)"
List the names of members who did not participate in any round.,SELECT Name FROM member WHERE NOT Member_ID IN (SELECT Member_ID FROM round),"CREATE TABLE member (Name VARCHAR, Member_ID VARCHAR); CREATE TABLE round (Name VARCHAR, Member_ID VARCHAR)"
"Find the name and access counts of all documents, in alphabetic order of the document name.","SELECT document_name, access_count FROM documents ORDER BY document_name","CREATE TABLE documents (document_name VARCHAR, access_count VARCHAR)"
"Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?","SELECT document_name, access_count FROM documents ORDER BY access_count DESC LIMIT 1","CREATE TABLE documents (document_name VARCHAR, access_count VARCHAR)"
Find the types of documents with more than 4 documents.,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 4,CREATE TABLE documents (document_type_code VARCHAR)
Find the total access count of all documents in the most popular document type.,SELECT SUM(access_count) FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE documents (access_count INTEGER, document_type_code VARCHAR)"
What is the average access count of documents?,SELECT AVG(access_count) FROM documents,CREATE TABLE documents (access_count INTEGER)
What is the structure of the document with the least number of accesses?,SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code = t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE document_structures (document_structure_description VARCHAR, document_structure_code VARCHAR); CREATE TABLE documents (document_structure_code VARCHAR)"
"What is the type of the document named ""David CV""?","SELECT document_type_code FROM documents WHERE document_name = ""David CV""","CREATE TABLE documents (document_type_code VARCHAR, document_name VARCHAR)"
Find the list of documents that are both in the most three popular type and have the most three popular structure.,SELECT document_name FROM documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) DESC LIMIT 3,"CREATE TABLE documents (document_name VARCHAR, document_type_code VARCHAR, document_structure_code VARCHAR)"
What document types do have more than 10000 total access number.,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING SUM(access_count) > 10000,"CREATE TABLE documents (document_type_code VARCHAR, access_count INTEGER)"
"What are all the section titles of the document named ""David CV""?","SELECT t2.section_title FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code WHERE t1.document_name = ""David CV""","CREATE TABLE documents (document_code VARCHAR, document_name VARCHAR); CREATE TABLE document_sections (section_title VARCHAR, document_code VARCHAR)"
Find all the name of documents without any sections.,SELECT document_name FROM documents WHERE NOT document_code IN (SELECT document_code FROM document_sections),"CREATE TABLE document_sections (document_name VARCHAR, document_code VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR)"
List all the username and passwords of users with the most popular role.,"SELECT user_name, password FROM users GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE users (user_name VARCHAR, password VARCHAR, role_code VARCHAR)"
"Find the average access counts of documents with functional area ""Acknowledgement"".","SELECT AVG(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code = t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code = t3.functional_area_code WHERE t3.functional_area_description = ""Acknowledgement""","CREATE TABLE document_functional_areas (document_code VARCHAR, functional_area_code VARCHAR); CREATE TABLE documents (access_count INTEGER, document_code VARCHAR); CREATE TABLE functional_areas (functional_area_code VARCHAR, functional_area_description VARCHAR)"
Find names of the document without any images.,SELECT document_name FROM documents EXCEPT SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code JOIN document_sections_images AS t3 ON t2.section_id = t3.section_id,"CREATE TABLE document_sections_images (section_id VARCHAR); CREATE TABLE documents (document_name VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR); CREATE TABLE document_sections (document_code VARCHAR, section_id VARCHAR)"
What is the name of the document with the most number of sections?,SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code = t2.document_code GROUP BY t1.document_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE document_sections (document_code VARCHAR); CREATE TABLE documents (document_name VARCHAR, document_code VARCHAR)"
"List all the document names which contains ""CV"".","SELECT document_name FROM documents WHERE document_name LIKE ""%CV%""",CREATE TABLE documents (document_name VARCHAR)
How many users are logged in?,SELECT COUNT(*) FROM users WHERE user_login = 1,CREATE TABLE users (user_login VARCHAR)
Find the description of the most popular role among the users that have logged in.,SELECT role_description FROM ROLES WHERE role_code = (SELECT role_code FROM users WHERE user_login = 1 GROUP BY role_code ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE users (role_description VARCHAR, role_code VARCHAR, user_login VARCHAR); CREATE TABLE ROLES (role_description VARCHAR, role_code VARCHAR, user_login VARCHAR)"
Find the average access count of documents with the least popular structure.,SELECT AVG(access_count) FROM documents GROUP BY document_structure_code ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE documents (access_count INTEGER, document_structure_code VARCHAR)"
List all the image name and URLs in the order of their names.,"SELECT image_name, image_url FROM images ORDER BY image_name","CREATE TABLE images (image_name VARCHAR, image_url VARCHAR)"
Find the number of users in each role.,"SELECT COUNT(*), role_code FROM users GROUP BY role_code",CREATE TABLE users (role_code VARCHAR)
What document types have more than 2 corresponding documents?,SELECT document_type_code FROM documents GROUP BY document_type_code HAVING COUNT(*) > 2,CREATE TABLE documents (document_type_code VARCHAR)
How many companies are there?,SELECT COUNT(*) FROM Companies,CREATE TABLE Companies (Id VARCHAR)
List the names of companies in descending order of market value.,SELECT name FROM Companies ORDER BY Market_Value_billion DESC,"CREATE TABLE Companies (name VARCHAR, Market_Value_billion VARCHAR)"
"What are the names of companies whose headquarters are not ""USA""?",SELECT name FROM Companies WHERE Headquarters <> 'USA',"CREATE TABLE Companies (name VARCHAR, Headquarters VARCHAR)"
"What are the name and assets of each company, sorted in ascending order of company name?","SELECT name, Assets_billion FROM Companies ORDER BY name","CREATE TABLE Companies (name VARCHAR, Assets_billion VARCHAR)"
What are the average profits of companies?,SELECT AVG(Profits_billion) FROM Companies,CREATE TABLE Companies (Profits_billion INTEGER)
"What are the maximum and minimum sales of the companies whose industries are not ""Banking"".","SELECT MAX(Sales_billion), MIN(Sales_billion) FROM Companies WHERE Industry <> ""Banking""","CREATE TABLE Companies (Sales_billion INTEGER, Industry VARCHAR)"
How many different industries are the companies in?,SELECT COUNT(DISTINCT Industry) FROM Companies,CREATE TABLE Companies (Industry VARCHAR)
List the names of buildings in descending order of building height.,SELECT name FROM buildings ORDER BY Height DESC,"CREATE TABLE buildings (name VARCHAR, Height VARCHAR)"
Find the stories of the building with the largest height.,SELECT Stories FROM buildings ORDER BY Height DESC LIMIT 1,"CREATE TABLE buildings (Stories VARCHAR, Height VARCHAR)"
List the name of a building along with the name of a company whose office is in the building.,"SELECT T3.name, T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id","CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR); CREATE TABLE Companies (name VARCHAR, id VARCHAR)"
Show the names of the buildings that have more than one company offices.,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id HAVING COUNT(*) > 1,"CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Companies (id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR)"
Show the name of the building that has the most company offices.,SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id = T2.id JOIN Companies AS T3 ON T1.company_id = T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE buildings (name VARCHAR, id VARCHAR); CREATE TABLE Companies (id VARCHAR); CREATE TABLE Office_locations (building_id VARCHAR, company_id VARCHAR)"
"Please show the names of the buildings whose status is ""on-hold"", in ascending order of stories.","SELECT name FROM buildings WHERE Status = ""on-hold"" ORDER BY Stories","CREATE TABLE buildings (name VARCHAR, Status VARCHAR, Stories VARCHAR)"
Please show each industry and the corresponding number of companies in that industry.,"SELECT Industry, COUNT(*) FROM Companies GROUP BY Industry",CREATE TABLE Companies (Industry VARCHAR)
Please show the industries of companies in descending order of the number of companies.,SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC,CREATE TABLE Companies (Industry VARCHAR)
List the industry shared by the most companies.,SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Companies (Industry VARCHAR)
List the names of buildings that have no company office.,SELECT name FROM buildings WHERE NOT id IN (SELECT building_id FROM Office_locations),"CREATE TABLE buildings (name VARCHAR, id VARCHAR, building_id VARCHAR); CREATE TABLE Office_locations (name VARCHAR, id VARCHAR, building_id VARCHAR)"
"Show the industries shared by companies whose headquarters are ""USA"" and companies whose headquarters are ""China"".","SELECT Industry FROM Companies WHERE Headquarters = ""USA"" INTERSECT SELECT Industry FROM Companies WHERE Headquarters = ""China""","CREATE TABLE Companies (Industry VARCHAR, Headquarters VARCHAR)"
"Find the number of companies whose industry is ""Banking"" or ""Conglomerate"",","SELECT COUNT(*) FROM Companies WHERE Industry = ""Banking"" OR Industry = ""Conglomerate""",CREATE TABLE Companies (Industry VARCHAR)
Show the headquarters shared by more than two companies.,SELECT Headquarters FROM Companies GROUP BY Headquarters HAVING COUNT(*) > 2,CREATE TABLE Companies (Headquarters VARCHAR)
How many products are there?,SELECT COUNT(*) FROM Products,CREATE TABLE Products (Id VARCHAR)
List the name of products in ascending order of price.,SELECT Product_Name FROM Products ORDER BY Product_Price,"CREATE TABLE Products (Product_Name VARCHAR, Product_Price VARCHAR)"
What are the names and type codes of products?,"SELECT Product_Name, Product_Type_Code FROM Products","CREATE TABLE Products (Product_Name VARCHAR, Product_Type_Code VARCHAR)"
"Show the prices of the products named ""Dining"" or ""Trading Policy"".","SELECT Product_Price FROM Products WHERE Product_Name = ""Dining"" OR Product_Name = ""Trading Policy""","CREATE TABLE Products (Product_Price VARCHAR, Product_Name VARCHAR)"
What is the average price for products?,SELECT AVG(Product_Price) FROM Products,CREATE TABLE Products (Product_Price INTEGER)
What is the name of the product with the highest price?,SELECT Product_Name FROM Products ORDER BY Product_Price DESC LIMIT 1,"CREATE TABLE Products (Product_Name VARCHAR, Product_Price VARCHAR)"
Show different type codes of products and the number of products with each type code.,"SELECT Product_Type_Code, COUNT(*) FROM Products GROUP BY Product_Type_Code",CREATE TABLE Products (Product_Type_Code VARCHAR)
Show the most common type code across products.,SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Products (Product_Type_Code VARCHAR)
Show the product type codes that have at least two products.,SELECT Product_Type_Code FROM Products GROUP BY Product_Type_Code HAVING COUNT(*) >= 2,CREATE TABLE Products (Product_Type_Code VARCHAR)
Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.,SELECT Product_Type_Code FROM Products WHERE Product_Price > 4500 INTERSECT SELECT Product_Type_Code FROM Products WHERE Product_Price < 3000,"CREATE TABLE Products (Product_Type_Code VARCHAR, Product_Price INTEGER)"
Show the names of products and the number of events they are in.,"SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name","CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)"
"Show the names of products and the number of events they are in, sorted by the number of events in descending order.","SELECT T1.Product_Name, COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC","CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)"
Show the names of products that are in at least two events.,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2,"CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)"
Show the names of products that are in at least two events in ascending alphabetical order of product name.,SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID = T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*) >= 2 ORDER BY T1.Product_Name,"CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_ID VARCHAR)"
List the names of products that are not in any event.,SELECT Product_Name FROM Products WHERE NOT Product_ID IN (SELECT Product_ID FROM Products_in_Events),"CREATE TABLE Products (Product_Name VARCHAR, Product_ID VARCHAR); CREATE TABLE Products_in_Events (Product_Name VARCHAR, Product_ID VARCHAR)"
How many artworks are there?,SELECT COUNT(*) FROM artwork,CREATE TABLE artwork (Id VARCHAR)
List the name of artworks in ascending alphabetical order.,SELECT Name FROM artwork ORDER BY Name,CREATE TABLE artwork (Name VARCHAR)
"List the name of artworks whose type is not ""Program Talent Show"".","SELECT Name FROM artwork WHERE TYPE <> ""Program Talent Show""","CREATE TABLE artwork (Name VARCHAR, TYPE VARCHAR)"
What are the names and locations of festivals?,"SELECT Festival_Name, LOCATION FROM festival_detail","CREATE TABLE festival_detail (Festival_Name VARCHAR, LOCATION VARCHAR)"
"What are the names of the chairs of festivals, sorted in ascending order of the year held?",SELECT Chair_Name FROM festival_detail ORDER BY YEAR,"CREATE TABLE festival_detail (Chair_Name VARCHAR, YEAR VARCHAR)"
What is the location of the festival with the largest number of audience?,SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1,"CREATE TABLE festival_detail (LOCATION VARCHAR, Num_of_Audience VARCHAR)"
What are the names of festivals held in year 2007?,SELECT Festival_Name FROM festival_detail WHERE YEAR = 2007,"CREATE TABLE festival_detail (Festival_Name VARCHAR, YEAR VARCHAR)"
What is the average number of audience for festivals?,SELECT AVG(Num_of_Audience) FROM festival_detail,CREATE TABLE festival_detail (Num_of_Audience INTEGER)
Show the names of the three most recent festivals.,SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3,"CREATE TABLE festival_detail (Festival_Name VARCHAR, YEAR VARCHAR)"
"For each nomination, show the name of the artwork and name of the festival where it is nominated.","SELECT T2.Name, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID","CREATE TABLE artwork (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR)"
Show distinct types of artworks that are nominated in festivals in 2007.,SELECT DISTINCT T2.Type FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T3.Year = 2007,"CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_ID VARCHAR, Year VARCHAR); CREATE TABLE artwork (Type VARCHAR, Artwork_ID VARCHAR)"
Show the names of artworks in ascending order of the year they are nominated in.,SELECT T2.Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID ORDER BY T3.Year,"CREATE TABLE artwork (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE festival_detail (Festival_ID VARCHAR, Year VARCHAR)"
"Show the names of festivals that have nominated artworks of type ""Program Talent Show"".","SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID WHERE T2.Type = ""Program Talent Show""","CREATE TABLE nomination (Artwork_ID VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR, Type VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR)"
Show the ids and names of festivals that have at least two nominations for artworks.,"SELECT T1.Festival_ID, T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*) >= 2","CREATE TABLE nomination (Festival_ID VARCHAR, Artwork_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR)"
"Show the id, name of each festival and the number of artworks it has nominated.","SELECT T1.Festival_ID, T3.Festival_Name, COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID = T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID = T3.Festival_ID GROUP BY T1.Festival_ID","CREATE TABLE nomination (Festival_ID VARCHAR, Artwork_ID VARCHAR); CREATE TABLE festival_detail (Festival_Name VARCHAR, Festival_ID VARCHAR); CREATE TABLE artwork (Artwork_ID VARCHAR)"
Please show different types of artworks with the corresponding number of artworks of each type.,"SELECT TYPE, COUNT(*) FROM artwork GROUP BY TYPE",CREATE TABLE artwork (TYPE VARCHAR)
List the most common type of artworks.,SELECT TYPE FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE artwork (TYPE VARCHAR)
List the year in which there are more than one festivals.,SELECT YEAR FROM festival_detail GROUP BY YEAR HAVING COUNT(*) > 1,CREATE TABLE festival_detail (YEAR VARCHAR)
List the name of artworks that are not nominated.,SELECT Name FROM Artwork WHERE NOT Artwork_ID IN (SELECT Artwork_ID FROM nomination),"CREATE TABLE nomination (Name VARCHAR, Artwork_ID VARCHAR); CREATE TABLE Artwork (Name VARCHAR, Artwork_ID VARCHAR)"
Show the number of audience in year 2008 or 2010.,SELECT Num_of_Audience FROM festival_detail WHERE YEAR = 2008 OR YEAR = 2010,"CREATE TABLE festival_detail (Num_of_Audience VARCHAR, YEAR VARCHAR)"
What are the total number of the audiences who visited any of the festivals?,SELECT SUM(Num_of_Audience) FROM festival_detail,CREATE TABLE festival_detail (Num_of_Audience INTEGER)
In which year are there festivals both inside the 'United States' and outside the 'United States'?,SELECT YEAR FROM festival_detail WHERE LOCATION = 'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION <> 'United States',"CREATE TABLE festival_detail (YEAR VARCHAR, LOCATION VARCHAR)"
How many premises are there?,SELECT COUNT(*) FROM premises,CREATE TABLE premises (Id VARCHAR)
What are all the distinct premise types?,SELECT DISTINCT premises_type FROM premises,CREATE TABLE premises (premises_type VARCHAR)
Find the types and details for all premises and order by the premise type.,"SELECT premises_type, premise_details FROM premises ORDER BY premises_type","CREATE TABLE premises (premises_type VARCHAR, premise_details VARCHAR)"
Show each premise type and the number of premises in that type.,"SELECT premises_type, COUNT(*) FROM premises GROUP BY premises_type",CREATE TABLE premises (premises_type VARCHAR)
Show all distinct product categories along with the number of mailshots in each category.,"SELECT product_category, COUNT(*) FROM mailshot_campaigns GROUP BY product_category",CREATE TABLE mailshot_campaigns (product_category VARCHAR)
Show the name and phone of the customer without any mailshot.,"SELECT customer_name, customer_phone FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM mailshot_customers)","CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR)"
Show the name and phone for customers with a mailshot with outcome code 'No Response'.,"SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.outcome_code = 'No Response'","CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR, outcome_code VARCHAR)"
Show the outcome code of mailshots along with the number of mailshots in each outcome code.,"SELECT outcome_code, COUNT(*) FROM mailshot_customers GROUP BY outcome_code",CREATE TABLE mailshot_customers (outcome_code VARCHAR)
Show the names of customers who have at least 2 mailshots with outcome code 'Order'.,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE outcome_code = 'Order' GROUP BY T1.customer_id HAVING COUNT(*) >= 2,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR)"
Show the names of customers who have the most mailshots.,SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR)"
What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.,"SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'Order' INTERSECT SELECT T2.customer_name, T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.outcome_code = 'No Response'","CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR, customer_id VARCHAR); CREATE TABLE mailshot_customers (customer_id VARCHAR, outcome_code VARCHAR)"
Show the premise type and address type code for all customer addresses.,"SELECT T2.premises_type, T1.address_type_code FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id","CREATE TABLE premises (premises_type VARCHAR, premise_id VARCHAR); CREATE TABLE customer_addresses (address_type_code VARCHAR, premise_id VARCHAR)"
What are the distinct address type codes for all customer addresses?,SELECT DISTINCT address_type_code FROM customer_addresses,CREATE TABLE customer_addresses (address_type_code VARCHAR)
Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.,"SELECT order_shipping_charges, customer_id FROM customer_orders WHERE order_status_code = 'Cancelled' OR order_status_code = 'Paid'","CREATE TABLE customer_orders (order_shipping_charges VARCHAR, customer_id VARCHAR, order_status_code VARCHAR)"
Show the names of customers having an order with shipping method FedEx and order status Paid.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE shipping_method_code = 'FedEx' AND order_status_code = 'Paid',"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)"
How many courses are there in total?,SELECT COUNT(*) FROM COURSE,CREATE TABLE COURSE (Id VARCHAR)
How many courses have more than 2 credits?,SELECT COUNT(*) FROM COURSE WHERE Credits > 2,CREATE TABLE COURSE (Credits INTEGER)
List all names of courses with 1 credit?,SELECT CName FROM COURSE WHERE Credits = 1,"CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR)"
Which courses are taught on days MTW?,"SELECT CName FROM COURSE WHERE Days = ""MTW""","CREATE TABLE COURSE (CName VARCHAR, Days VARCHAR)"
"What is the number of departments in Division ""AS""?","SELECT COUNT(*) FROM DEPARTMENT WHERE Division = ""AS""",CREATE TABLE DEPARTMENT (Division VARCHAR)
What are the phones of departments in Room 268?,SELECT DPhone FROM DEPARTMENT WHERE Room = 268,"CREATE TABLE DEPARTMENT (DPhone VARCHAR, Room VARCHAR)"
"Find the number of students that have at least one grade ""B"".","SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade = ""B""","CREATE TABLE ENROLLED_IN (StuID VARCHAR, Grade VARCHAR)"
Find the max and min grade point for all letter grade.,"SELECT MAX(gradepoint), MIN(gradepoint) FROM GRADECONVERSION",CREATE TABLE GRADECONVERSION (gradepoint INTEGER)
"Find the first names of students whose first names contain letter ""a"".",SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%',CREATE TABLE STUDENT (Fname VARCHAR)
Find the first names and last names of male (sex is M) faculties who live in building NEB.,"SELECT Fname, Lname FROM FACULTY WHERE sex = ""M"" AND Building = ""NEB""","CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, sex VARCHAR, Building VARCHAR)"
Find the rooms of faculties with rank professor who live in building NEB.,"SELECT Room FROM FACULTY WHERE Rank = ""Professor"" AND Building = ""NEB""","CREATE TABLE FACULTY (Room VARCHAR, Rank VARCHAR, Building VARCHAR)"
"Find the department name that is in Building ""Mergenthaler"".","SELECT DName FROM DEPARTMENT WHERE Building = ""Mergenthaler""","CREATE TABLE DEPARTMENT (DName VARCHAR, Building VARCHAR)"
List all information about courses sorted by credits in the ascending order.,SELECT * FROM COURSE ORDER BY Credits,CREATE TABLE COURSE (Credits VARCHAR)
List the course name of courses sorted by credits.,SELECT CName FROM COURSE ORDER BY Credits,"CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR)"
Find the first name of students in the descending order of age.,SELECT Fname FROM STUDENT ORDER BY Age DESC,"CREATE TABLE STUDENT (Fname VARCHAR, Age VARCHAR)"
Find the last name of female (sex is F) students in the descending order of age.,"SELECT LName FROM STUDENT WHERE Sex = ""F"" ORDER BY Age DESC","CREATE TABLE STUDENT (LName VARCHAR, Sex VARCHAR, Age VARCHAR)"
Find the last names of faculties in building Barton in alphabetic order.,"SELECT Lname FROM FACULTY WHERE Building = ""Barton"" ORDER BY Lname","CREATE TABLE FACULTY (Lname VARCHAR, Building VARCHAR)"
Find the first names of faculties of rank Professor in alphabetic order.,"SELECT Fname FROM FACULTY WHERE Rank = ""Professor"" ORDER BY Fname","CREATE TABLE FACULTY (Fname VARCHAR, Rank VARCHAR)"
Find the name of the department that has the biggest number of students minored in?,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR); CREATE TABLE MINOR_IN (DNO VARCHAR)"
Find the name of the department that has no students minored in?,SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO = T2.DNO,"CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR); CREATE TABLE MINOR_IN (DNO VARCHAR); CREATE TABLE DEPARTMENT (DName VARCHAR)"
Find the name of the department that has the fewest members.,SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MEMBER_OF AS T2 ON T1.DNO = T2.DNO GROUP BY T2.DNO ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE MEMBER_OF (DNO VARCHAR); CREATE TABLE DEPARTMENT (DName VARCHAR, DNO VARCHAR)"
Find the rank of the faculty that the fewest faculties belong to.,SELECT Rank FROM FACULTY GROUP BY Rank ORDER BY COUNT(*) LIMIT 1,CREATE TABLE FACULTY (Rank VARCHAR)
What are the first and last names of the instructors who teach the top 3 number of courses?,"SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE COURSE (Instructor VARCHAR); CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR)"
Which building does the instructor who teaches the most number of courses live in?,SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID GROUP BY T1.Instructor ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE COURSE (Instructor VARCHAR); CREATE TABLE FACULTY (Building VARCHAR, FacID VARCHAR)"
What are the name of courses that have at least five enrollments?,SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID = T2.CID GROUP BY T2.CID HAVING COUNT(*) >= 5,"CREATE TABLE ENROLLED_IN (CID VARCHAR); CREATE TABLE COURSE (CName VARCHAR, CID VARCHAR)"
Find the first name and last name of the instructor of course that has course name,"SELECT T2.Fname, T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor = T2.FacID WHERE T1.CName = ""COMPUTER LITERACY""","CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR); CREATE TABLE COURSE (Instructor VARCHAR, CName VARCHAR)"
Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.,"SELECT T2.Dname, T2.Room FROM COURSE AS T1 JOIN DEPARTMENT AS T2 ON T1.DNO = T2.DNO WHERE T1.CName = ""INTRODUCTION TO COMPUTER SCIENCE""","CREATE TABLE COURSE (DNO VARCHAR, CName VARCHAR); CREATE TABLE DEPARTMENT (Dname VARCHAR, Room VARCHAR, DNO VARCHAR)"
Find the student first and last names and grade points of all enrollments.,"SELECT T3.Fname, T3.LName, T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID","CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint VARCHAR, lettergrade VARCHAR)"
Find the distinct student first names of all students that have grade point at least 3.8 in one course.,SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T2.gradepoint >= 3.8,"CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint VARCHAR, lettergrade VARCHAR)"
Find the full names of faculties who are members of department with department number 520.,"SELECT T1.Fname, T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID = T2.FacID WHERE T2.DNO = 520","CREATE TABLE FACULTY (Fname VARCHAR, Lname VARCHAR, FacID VARCHAR); CREATE TABLE MEMBER_OF (FacID VARCHAR, DNO VARCHAR)"
What are the first names and last names of the students that minor in the department with DNO 140.,"SELECT T2.Fname, T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID = T2.StuID WHERE T1.DNO = 140","CREATE TABLE STUDENT (Fname VARCHAR, Lname VARCHAR, StuID VARCHAR); CREATE TABLE MINOR_IN (StuID VARCHAR, DNO VARCHAR)"
Find the last names of faculties who are members of computer science department.,"SELECT T2.Lname FROM DEPARTMENT AS T1 JOIN FACULTY AS T2 ON T1.DNO = T3.DNO JOIN MEMBER_OF AS T3 ON T2.FacID = T3.FacID WHERE T1.DName = ""Computer Science""","CREATE TABLE DEPARTMENT (DNO VARCHAR, DName VARCHAR); CREATE TABLE MEMBER_OF (DNO VARCHAR, FacID VARCHAR); CREATE TABLE FACULTY (Lname VARCHAR, FacID VARCHAR)"
Find the average grade point of student whose last name is Smith.,"SELECT AVG(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.LName = ""Smith""","CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)"
What is the maximum and minimum grade point of students who live in NYC?,"SELECT MAX(T2.gradepoint), MIN(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade = T2.lettergrade AND T1.StuID = T3.StuID WHERE T3.city_code = ""NYC""","CREATE TABLE ENROLLED_IN (Grade VARCHAR, StuID VARCHAR); CREATE TABLE STUDENT (city_code VARCHAR, StuID VARCHAR); CREATE TABLE GRADECONVERSION (gradepoint INTEGER, lettergrade VARCHAR)"
Find the names of courses that have either 3 credits or 1 credit but 4 hours.,SELECT CName FROM COURSE WHERE Credits = 3 UNION SELECT CName FROM COURSE WHERE Credits = 1 AND Hours = 4,"CREATE TABLE COURSE (CName VARCHAR, Credits VARCHAR, Hours VARCHAR)"
Find the names of departments that are either in division AS or in division EN and in Building NEB.,"SELECT DName FROM DEPARTMENT WHERE Division = ""AS"" UNION SELECT DName FROM DEPARTMENT WHERE Division = ""EN"" AND Building = ""NEB""","CREATE TABLE DEPARTMENT (DName VARCHAR, Division VARCHAR, Building VARCHAR)"
Find the first name of students not enrolled in any course.,SELECT Fname FROM STUDENT WHERE NOT StuID IN (SELECT StuID FROM ENROLLED_IN),"CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE ENROLLED_IN (Fname VARCHAR, StuID VARCHAR)"
What are the ids of the top three products that were purchased in the largest amount?,SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3,"CREATE TABLE product_suppliers (product_id VARCHAR, total_amount_purchased VARCHAR)"
What are the product id and product type of the cheapest product?,"SELECT product_id, product_type_code FROM products ORDER BY product_price LIMIT 1","CREATE TABLE products (product_id VARCHAR, product_type_code VARCHAR, product_price VARCHAR)"
Find the number of different product types.,SELECT COUNT(DISTINCT product_type_code) FROM products,CREATE TABLE products (product_type_code VARCHAR)
Return the address of customer 10.,SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.customer_id = 10,"CREATE TABLE customer_addresses (address_id VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_details VARCHAR, address_id VARCHAR)"
What are the staff ids and genders of all staffs whose job title is Department Manager?,"SELECT T1.staff_id, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = ""Department Manager""","CREATE TABLE staff_department_assignments (staff_id VARCHAR, job_title_code VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_gender VARCHAR)"
"For each payment method, return how many customers use it.","SELECT payment_method_code, COUNT(*) FROM customers GROUP BY payment_method_code",CREATE TABLE customers (payment_method_code VARCHAR)
What is the id of the product that was ordered the most often?,SELECT product_id FROM order_items GROUP BY product_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE order_items (product_id VARCHAR)
"What are the name, phone number and email address of the customer who made the largest number of orders?","SELECT T1.customer_name, T1.customer_phone, T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_email VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)"
What is the average price for each type of product?,"SELECT product_type_code, AVG(product_price) FROM products GROUP BY product_type_code","CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)"
How many department stores does the store chain South have?,"SELECT COUNT(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id WHERE T2.dept_store_chain_name = ""South""","CREATE TABLE department_stores (dept_store_chain_id VARCHAR); CREATE TABLE department_store_chain (dept_store_chain_id VARCHAR, dept_store_chain_name VARCHAR)"
What is the name and job title of the staff who was assigned the latest?,"SELECT T1.staff_name, T2.job_title_code FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY T2.date_assigned_to DESC LIMIT 1","CREATE TABLE staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (job_title_code VARCHAR, staff_id VARCHAR, date_assigned_to VARCHAR)"
"Give me the product type, name and price for all the products supplied by supplier id 3.","SELECT T2.product_type_code, T2.product_name, T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3","CREATE TABLE products (product_type_code VARCHAR, product_name VARCHAR, product_price VARCHAR, product_id VARCHAR); CREATE TABLE product_suppliers (product_id VARCHAR, supplier_id VARCHAR)"
"Return the distinct name of customers whose order status is Pending, in the order of customer id.","SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = ""Pending"" ORDER BY T2.customer_id","CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)"
Find the name and address of the customers who have both New and Pending orders.,"SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = ""New"" INTERSECT SELECT T1.customer_name, T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = ""Pending""","CREATE TABLE customers (customer_name VARCHAR, customer_address VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)"
Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.,SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 2 AND T2.product_price > (SELECT AVG(product_price) FROM products),"CREATE TABLE products (product_id VARCHAR, product_price INTEGER); CREATE TABLE product_suppliers (product_id VARCHAR, supplier_id VARCHAR); CREATE TABLE products (product_price INTEGER)"
What is the id and name of the department store that has both marketing and managing department?,"SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = ""marketing"" INTERSECT SELECT T2.dept_store_id, T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id = T2.dept_store_id WHERE T1.department_name = ""managing""","CREATE TABLE department_stores (dept_store_id VARCHAR, store_name VARCHAR); CREATE TABLE departments (dept_store_id VARCHAR, department_name VARCHAR)"
What are the ids of the two department store chains with the largest number of department stores?,SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY COUNT(*) DESC LIMIT 2,CREATE TABLE department_stores (dept_store_chain_id VARCHAR)
What is the id of the department with the least number of staff?,SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY COUNT(*) LIMIT 1,CREATE TABLE staff_department_assignments (department_id VARCHAR)
"For each product type, return the maximum and minimum price.","SELECT product_type_code, MAX(product_price), MIN(product_price) FROM products GROUP BY product_type_code","CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)"
Find the product type whose average price is higher than the average price of all products.,SELECT product_type_code FROM products GROUP BY product_type_code HAVING AVG(product_price) > (SELECT AVG(product_price) FROM products),"CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)"
Find the id and name of the staff who has been assigned for the shortest period.,"SELECT T1.staff_id, T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1","CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_name VARCHAR)"
Return the names and ids of all products whose price is between 600 and 700.,"SELECT product_name, product_id FROM products WHERE product_price BETWEEN 600 AND 700","CREATE TABLE products (product_name VARCHAR, product_id VARCHAR, product_price INTEGER)"
Find the ids of all distinct customers who made order after some orders that were Cancelled.,"SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date > (SELECT MIN(order_date) FROM Customer_Orders WHERE order_status_code = ""Cancelled"")","CREATE TABLE Customer_Orders (customer_id VARCHAR, order_date INTEGER, order_status_code VARCHAR)"
What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?,SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < (SELECT MAX(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code = 'Clerical Staff'),"CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR, date_assigned_to INTEGER, job_title_code VARCHAR)"
What are the names and ids of customers whose address contains TN?,"SELECT customer_name, customer_id FROM customers WHERE customer_address LIKE ""%TN%""","CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR, customer_address VARCHAR)"
Return the name and gender of the staff who was assigned in 2016.,"SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.date_assigned_from LIKE ""2016%""","CREATE TABLE staff (staff_name VARCHAR, staff_gender VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (staff_id VARCHAR, date_assigned_from VARCHAR)"
List the name of staff who has been assigned multiple jobs.,SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id HAVING COUNT(*) > 1,"CREATE TABLE staff (staff_name VARCHAR, staff_id VARCHAR); CREATE TABLE staff_department_assignments (staff_id VARCHAR)"
List the name and phone number of all suppliers in the alphabetical order of their addresses.,"SELECT T1.supplier_name, T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id = T2.supplier_id JOIN addresses AS T3 ON T2.address_id = T3.address_id ORDER BY T3.address_details","CREATE TABLE addresses (address_id VARCHAR, address_details VARCHAR); CREATE TABLE supplier_addresses (supplier_id VARCHAR, address_id VARCHAR); CREATE TABLE Suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR)"
What are the phone numbers of all customers and suppliers.,SELECT customer_phone FROM customers UNION SELECT supplier_phone FROM suppliers,"CREATE TABLE suppliers (customer_phone VARCHAR, supplier_phone VARCHAR); CREATE TABLE customers (customer_phone VARCHAR, supplier_phone VARCHAR)"
Return the ids of all products that were ordered more than three times or supplied more than 80000.,SELECT product_id FROM Order_Items GROUP BY product_id HAVING COUNT(*) > 3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING SUM(total_amount_purchased) > 80000,"CREATE TABLE Order_Items (product_id VARCHAR, total_amount_purchased INTEGER); CREATE TABLE Product_Suppliers (product_id VARCHAR, total_amount_purchased INTEGER)"
What are id and name of the products whose price is lower than 600 or higher than 900?,"SELECT product_id, product_name FROM products WHERE product_price < 600 OR product_price > 900","CREATE TABLE products (product_id VARCHAR, product_name VARCHAR, product_price VARCHAR)"
Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.,SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING AVG(total_amount_purchased) > 50000 OR AVG(total_amount_purchased) < 30000,"CREATE TABLE Product_Suppliers (supplier_id VARCHAR, total_amount_purchased INTEGER)"
What are the average amount purchased and value purchased for the supplier who supplies the most products.,"SELECT AVG(total_amount_purchased), AVG(total_value_purchased) FROM Product_Suppliers WHERE supplier_id = (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY COUNT(*) DESC LIMIT 1)","CREATE TABLE Product_Suppliers (total_amount_purchased INTEGER, total_value_purchased INTEGER, supplier_id VARCHAR)"
What is the largest and smallest customer codes?,"SELECT MAX(customer_code), MIN(customer_code) FROM Customers",CREATE TABLE Customers (customer_code INTEGER)
List the names of all the distinct customers who bought a keyboard.,"SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id JOIN products AS T4 ON T3.product_id = T4.product_id WHERE T4.product_name = ""keyboard""","CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
List the names and phone numbers of all the distinct suppliers who supply red jeans.,"SELECT DISTINCT T1.supplier_name, T1.supplier_phone FROM suppliers AS T1 JOIN product_suppliers AS T2 ON T1.supplier_id = T2.supplier_id JOIN products AS T3 ON T2.product_id = T3.product_id WHERE T3.product_name = ""red jeans""","CREATE TABLE product_suppliers (supplier_id VARCHAR, product_id VARCHAR); CREATE TABLE suppliers (supplier_name VARCHAR, supplier_phone VARCHAR, supplier_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR)"
"What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?","SELECT MAX(product_price), MIN(product_price), product_type_code FROM products GROUP BY product_type_code ORDER BY product_type_code","CREATE TABLE products (product_type_code VARCHAR, product_price INTEGER)"
"List the order id, customer id for orders in Cancelled status, ordered by their order dates.","SELECT order_id, customer_id FROM customer_orders WHERE order_status_code = ""Cancelled"" ORDER BY order_date","CREATE TABLE customer_orders (order_id VARCHAR, customer_id VARCHAR, order_status_code VARCHAR, order_date VARCHAR)"
Find the names of products that were bought by at least two distinct customers.,SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id JOIN products AS T3 ON T2.product_id = T3.product_id GROUP BY T3.product_id HAVING COUNT(DISTINCT T1.customer_id) >= 2,"CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE customer_orders (order_id VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR)"
Find the names of customers who have bought by at least three distinct products.,SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T2.order_id = T3.order_id GROUP BY T1.customer_id HAVING COUNT(DISTINCT T3.product_id) >= 3,"CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.,"SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = ""Sales Person"" EXCEPT SELECT T1.staff_name, T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code = ""Clerical Staff""","CREATE TABLE staff (staff_name VARCHAR, staff_gender VARCHAR, staff_id VARCHAR); CREATE TABLE Staff_Department_Assignments (staff_id VARCHAR, job_title_code VARCHAR)"
Find the id and name of customers whose address contains WY state and do not use credit card for payment.,"SELECT customer_id, customer_name FROM customers WHERE customer_address LIKE ""%WY%"" AND payment_method_code <> ""Credit Card""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR, customer_address VARCHAR, payment_method_code VARCHAR)"
Find the average price of all product clothes.,SELECT AVG(product_price) FROM products WHERE product_type_code = 'Clothes',"CREATE TABLE products (product_price INTEGER, product_type_code VARCHAR)"
Find the name of the most expensive hardware product.,SELECT product_name FROM products WHERE product_type_code = 'Hardware' ORDER BY product_price DESC LIMIT 1,"CREATE TABLE products (product_name VARCHAR, product_type_code VARCHAR, product_price VARCHAR)"
How many aircrafts are there?,SELECT COUNT(*) FROM aircraft,CREATE TABLE aircraft (Id VARCHAR)
List the description of all aircrafts.,SELECT Description FROM aircraft,CREATE TABLE aircraft (Description VARCHAR)
What is the average number of international passengers of all airports?,SELECT AVG(International_Passengers) FROM airport,CREATE TABLE airport (International_Passengers INTEGER)
"What are the number of international and domestic passengers of the airport named London ""Heathrow""?","SELECT International_Passengers, Domestic_Passengers FROM airport WHERE Airport_Name = ""London Heathrow""","CREATE TABLE airport (International_Passengers VARCHAR, Domestic_Passengers VARCHAR, Airport_Name VARCHAR)"
"What are the total number of Domestic Passengers of airports that contain the word ""London"".","SELECT SUM(Domestic_Passengers) FROM airport WHERE Airport_Name LIKE ""%London%""","CREATE TABLE airport (Domestic_Passengers INTEGER, Airport_Name VARCHAR)"
What are the maximum and minimum number of transit passengers of all aiports.,"SELECT MAX(Transit_Passengers), MIN(Transit_Passengers) FROM airport",CREATE TABLE airport (Transit_Passengers INTEGER)
What are the name of pilots aged 25 or older?,SELECT Name FROM pilot WHERE Age >= 25,"CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)"
List all pilot names in ascending alphabetical order.,SELECT Name FROM pilot ORDER BY Name,CREATE TABLE pilot (Name VARCHAR)
List names of all pilot aged 30 or younger in descending alphabetical order.,SELECT Name FROM pilot WHERE Age <= 30 ORDER BY Name DESC,"CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)"
"Please show the names of aircrafts associated with airport with name ""London Gatwick"".","SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = ""London Gatwick""","CREATE TABLE airport (Airport_ID VARCHAR, Airport_Name VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)"
Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.,"SELECT T1.Aircraft, T1.Description FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Total_Passengers > 10000000","CREATE TABLE airport (Airport_ID VARCHAR, Total_Passengers INTEGER); CREATE TABLE aircraft (Aircraft VARCHAR, Description VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)"
"What is the average total number of passengers of airports that are associated with aircraft ""Robinson R-22""?","SELECT AVG(T3.Total_Passengers) FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T1.Aircraft = ""Robinson R-22""","CREATE TABLE airport (Total_Passengers INTEGER, Airport_ID VARCHAR); CREATE TABLE aircraft (Aircraft_ID VARCHAR, Aircraft VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)"
Please list the location and the winning aircraft name.,"SELECT T2.Location, T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft","CREATE TABLE MATCH (Location VARCHAR, Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)"
List the name of the aircraft that has been named winning aircraft the most number of times.,SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)"
List the names of aircrafts and the number of times it won matches.,"SELECT T1.Aircraft, COUNT(*) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft","CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)"
List names of all pilot in descending order of age.,SELECT Name FROM pilot ORDER BY Age DESC,"CREATE TABLE pilot (Name VARCHAR, Age VARCHAR)"
List the names of aircrafts and that won matches at least twice.,SELECT T1.Aircraft FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY T2.Winning_Aircraft HAVING COUNT(*) >= 2,"CREATE TABLE MATCH (Winning_Aircraft VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR)"
List the names of aircrafts and that did not win any match.,SELECT Aircraft FROM aircraft WHERE NOT Aircraft_ID IN (SELECT Winning_Aircraft FROM MATCH),"CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR, Winning_Aircraft VARCHAR); CREATE TABLE MATCH (Aircraft VARCHAR, Aircraft_ID VARCHAR, Winning_Aircraft VARCHAR)"
"Show the names of aircrafts that are associated with both an airport named ""London Heathrow"" and an airport named ""London Gatwick""","SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = ""London Heathrow"" INTERSECT SELECT T1.Aircraft FROM aircraft AS T1 JOIN airport_aircraft AS T2 ON T1.Aircraft_ID = T2.Aircraft_ID JOIN airport AS T3 ON T2.Airport_ID = T3.Airport_ID WHERE T3.Airport_Name = ""London Gatwick""","CREATE TABLE airport (Airport_ID VARCHAR, Airport_Name VARCHAR); CREATE TABLE aircraft (Aircraft VARCHAR, Aircraft_ID VARCHAR); CREATE TABLE airport_aircraft (Aircraft_ID VARCHAR, Airport_ID VARCHAR)"
Show all information on the airport that has the largest number of international passengers.,SELECT * FROM airport ORDER BY International_Passengers DESC LIMIT 1,CREATE TABLE airport (International_Passengers VARCHAR)
find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.,"SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot WHERE t1.age < 30 GROUP BY t2.winning_pilot ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE MATCH (winning_pilot VARCHAR); CREATE TABLE pilot (name VARCHAR, age INTEGER, pilot_id VARCHAR)"
what is the name and age of the youngest winning pilot?,"SELECT t1.name, t1.age FROM pilot AS t1 JOIN MATCH AS t2 ON t1.pilot_id = t2.winning_pilot ORDER BY t1.age LIMIT 1","CREATE TABLE pilot (name VARCHAR, age VARCHAR, pilot_id VARCHAR); CREATE TABLE MATCH (winning_pilot VARCHAR)"
find the name of pilots who did not win the matches held in the country of Australia.,SELECT name FROM pilot WHERE NOT pilot_id IN (SELECT Winning_Pilot FROM MATCH WHERE country = 'Australia'),"CREATE TABLE MATCH (name VARCHAR, pilot_id VARCHAR, Winning_Pilot VARCHAR, country VARCHAR); CREATE TABLE pilot (name VARCHAR, pilot_id VARCHAR, Winning_Pilot VARCHAR, country VARCHAR)"
How many residents does each property have? List property id and resident count.,"SELECT T1.property_id, COUNT(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id = T2.property_id GROUP BY T1.property_id",CREATE TABLE properties (property_id VARCHAR); CREATE TABLE residents (property_id VARCHAR)
What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?,SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id = T2.organization_id WHERE T2.organization_details = 'Denesik and Sons Party',"CREATE TABLE services (service_type_code VARCHAR, organization_id VARCHAR); CREATE TABLE organizations (organization_id VARCHAR, organization_details VARCHAR)"
"How many services has each resident requested? List the resident id, details, and the count in descending order of the count.","SELECT T1.resident_id, T1.other_details, COUNT(*) FROM Residents AS T1 JOIN Residents_Services AS T2 ON T1.resident_id = T2.resident_id GROUP BY T1.resident_id ORDER BY COUNT(*) DESC","CREATE TABLE Residents_Services (resident_id VARCHAR); CREATE TABLE Residents (resident_id VARCHAR, other_details VARCHAR)"
"What is the maximum number that a certain service is provided? List the service id, details and number.","SELECT T1.service_id, T1.service_details, COUNT(*) FROM Services AS T1 JOIN Residents_Services AS T2 ON T1.service_id = T2.service_id GROUP BY T1.service_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Services (service_id VARCHAR, service_details VARCHAR); CREATE TABLE Residents_Services (service_id VARCHAR)"
"List the id and type of each thing, and the details of the organization that owns it.","SELECT T1.thing_id, T1.type_of_Thing_Code, T2.organization_details FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id","CREATE TABLE Organizations (organization_details VARCHAR, organization_id VARCHAR); CREATE TABLE Things (thing_id VARCHAR, type_of_Thing_Code VARCHAR, organization_id VARCHAR)"
What are the id and details of the customers who have at least 3 events?,"SELECT T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) >= 3","CREATE TABLE Customers (customer_id VARCHAR, customer_details VARCHAR); CREATE TABLE Customer_Events (customer_id VARCHAR)"
"What is each customer's move in date, and the corresponding customer id and details?","SELECT T2.date_moved_in, T1.customer_id, T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id","CREATE TABLE Customer_Events (date_moved_in VARCHAR, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, customer_details VARCHAR)"
Which events have the number of notes between one and three? List the event id and the property id.,"SELECT T1.Customer_Event_ID, T1.property_id FROM Customer_Events AS T1 JOIN Customer_Event_Notes AS T2 ON T1.Customer_Event_ID = T2.Customer_Event_ID GROUP BY T1.customer_event_id HAVING COUNT(*) BETWEEN 1 AND 3","CREATE TABLE Customer_Events (Customer_Event_ID VARCHAR, property_id VARCHAR, customer_event_id VARCHAR); CREATE TABLE Customer_Event_Notes (Customer_Event_ID VARCHAR)"
What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21',"SELECT DISTINCT T2.thing_id, T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.Status_of_Thing_Code = 'Close' OR T1.Date_and_Date < '2017-06-19 02:59:21'","CREATE TABLE Timed_Status_of_Things (thing_id VARCHAR, Status_of_Thing_Code VARCHAR, Date_and_Date VARCHAR); CREATE TABLE Things (thing_id VARCHAR, Type_of_Thing_Code VARCHAR)"
How many distinct locations have the things with service detail 'Unsatisfied' been located in?,SELECT COUNT(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T1.service_details = 'Unsatisfied',"CREATE TABLE Timed_Locations_of_Things (Location_Code VARCHAR, thing_id VARCHAR); CREATE TABLE Things (thing_id VARCHAR, service_details VARCHAR)"
How many different status codes of things are there?,SELECT COUNT(DISTINCT Status_of_Thing_Code) FROM Timed_Status_of_Things,CREATE TABLE Timed_Status_of_Things (Status_of_Thing_Code VARCHAR)
Which organizations are not a parent organization of others? List the organization id.,SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations,"CREATE TABLE organizations (organization_id VARCHAR, parent_organization_id VARCHAR)"
When is the last day any resident moved in?,SELECT MAX(date_moved_in) FROM Residents,CREATE TABLE Residents (date_moved_in INTEGER)
What are the resident details containing the substring 'Miss'?,SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%',CREATE TABLE Residents (other_details VARCHAR)
List the customer event id and the corresponding move in date and property id.,"SELECT customer_event_id, date_moved_in, property_id FROM customer_events","CREATE TABLE customer_events (customer_event_id VARCHAR, date_moved_in VARCHAR, property_id VARCHAR)"
How many customers did not have any event?,SELECT COUNT(*) FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM customer_events),CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE customer_events (customer_id VARCHAR)
What are the distinct move in dates of the residents?,SELECT DISTINCT date_moved_in FROM residents,CREATE TABLE residents (date_moved_in VARCHAR)
List the locations of schools in ascending order of enrollment.,SELECT LOCATION FROM school ORDER BY Enrollment,"CREATE TABLE school (LOCATION VARCHAR, Enrollment VARCHAR)"
List the locations of schools in descending order of founded year.,SELECT LOCATION FROM school ORDER BY Founded DESC,"CREATE TABLE school (LOCATION VARCHAR, Founded VARCHAR)"
"What are the enrollments of schools whose denomination is not ""Catholic""?","SELECT Enrollment FROM school WHERE Denomination <> ""Catholic""","CREATE TABLE school (Enrollment VARCHAR, Denomination VARCHAR)"
What is the average enrollment of schools?,SELECT AVG(Enrollment) FROM school,CREATE TABLE school (Enrollment INTEGER)
"What are the teams of the players, sorted in ascending alphabetical order?",SELECT Team FROM player ORDER BY Team,CREATE TABLE player (Team VARCHAR)
Find the team of the player of the highest age.,SELECT Team FROM player ORDER BY Age DESC LIMIT 1,"CREATE TABLE player (Team VARCHAR, Age VARCHAR)"
List the teams of the players with the top 5 largest ages.,SELECT Team FROM player ORDER BY Age DESC LIMIT 5,"CREATE TABLE player (Team VARCHAR, Age VARCHAR)"
"For each player, show the team and the location of school they belong to.","SELECT T1.Team, T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID","CREATE TABLE school (Location VARCHAR, School_ID VARCHAR); CREATE TABLE player (Team VARCHAR, School_ID VARCHAR)"
Show the locations of schools that have more than 1 player.,SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*) > 1,"CREATE TABLE player (School_ID VARCHAR); CREATE TABLE school (Location VARCHAR, School_ID VARCHAR)"
Show the denomination of the school that has the most players.,SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE player (School_ID VARCHAR); CREATE TABLE school (Denomination VARCHAR, School_ID VARCHAR)"
Show locations and nicknames of schools.,"SELECT T1.Location, T2.Nickname FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID","CREATE TABLE school (Location VARCHAR, School_ID VARCHAR); CREATE TABLE school_details (Nickname VARCHAR, School_ID VARCHAR)"
Please show different denominations and the corresponding number of schools.,"SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination",CREATE TABLE school (Denomination VARCHAR)
Please show different denominations and the corresponding number of schools in descending order.,"SELECT Denomination, COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",CREATE TABLE school (Denomination VARCHAR)
List the school color of the school that has the largest enrollment.,SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1,"CREATE TABLE school (School_Colors VARCHAR, Enrollment VARCHAR)"
List the locations of schools that do not have any player.,SELECT LOCATION FROM school WHERE NOT School_ID IN (SELECT School_ID FROM Player),"CREATE TABLE school (LOCATION VARCHAR, School_ID VARCHAR); CREATE TABLE Player (LOCATION VARCHAR, School_ID VARCHAR)"
Show the denomination shared by schools founded before 1890 and schools founded after 1900,SELECT Denomination FROM school WHERE Founded < 1890 INTERSECT SELECT Denomination FROM school WHERE Founded > 1900,"CREATE TABLE school (Denomination VARCHAR, Founded INTEGER)"
Show the nicknames of schools that are not in division 1.,"SELECT Nickname FROM school_details WHERE Division <> ""Division 1""","CREATE TABLE school_details (Nickname VARCHAR, Division VARCHAR)"
Show the denomination shared by more than one school.,SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*) > 1,CREATE TABLE school (Denomination VARCHAR)
Find all the distinct district names ordered by city area in descending.,SELECT DISTINCT District_name FROM district ORDER BY city_area DESC,"CREATE TABLE district (District_name VARCHAR, city_area VARCHAR)"
Find the list of page size which have more than 3 product listed,SELECT max_page_size FROM product GROUP BY max_page_size HAVING COUNT(*) > 3,CREATE TABLE product (max_page_size VARCHAR)
Find the name and population of district with population between 200000 and 2000000,"SELECT District_name, City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000","CREATE TABLE district (District_name VARCHAR, City_Population INTEGER)"
Find the name all districts with city area greater than 10 or population larger than 100000,SELECT district_name FROM district WHERE city_area > 10 OR City_Population > 100000,"CREATE TABLE district (district_name VARCHAR, city_area VARCHAR, City_Population VARCHAR)"
Which district has the largest population?,SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1,"CREATE TABLE district (district_name VARCHAR, city_population VARCHAR)"
Which district has the least area?,SELECT district_name FROM district ORDER BY city_area LIMIT 1,"CREATE TABLE district (district_name VARCHAR, city_area VARCHAR)"
Find the total population of the top 3 districts with the largest area.,SELECT SUM(city_population) FROM district ORDER BY city_area DESC LIMIT 3,"CREATE TABLE district (city_population INTEGER, city_area VARCHAR)"
Find all types of store and number of them.,"SELECT TYPE, COUNT(*) FROM store GROUP BY TYPE",CREATE TABLE store (TYPE VARCHAR)
Find the names of all stores in Khanewal District.,"SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t3.district_name = ""Khanewal District""","CREATE TABLE district (district_id VARCHAR, district_name VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_name VARCHAR, store_id VARCHAR)"
Find all the stores in the district with the most population.,SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id WHERE district_id = (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1),"CREATE TABLE store_district (store_id VARCHAR); CREATE TABLE district (district_id VARCHAR, city_population VARCHAR); CREATE TABLE store (store_name VARCHAR, store_id VARCHAR)"
"Which city is the headquarter of the store named ""Blackville"" in?","SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.store_name = ""Blackville""","CREATE TABLE store (store_id VARCHAR, store_name VARCHAR); CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR)"
Find the number of stores in each city.,"SELECT t3.headquartered_city, COUNT(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city","CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR)"
Find the city with the most number of stores.,SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id GROUP BY t3.headquartered_city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE district (headquartered_city VARCHAR, district_id VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR)"
What is the average pages per minute color?,SELECT AVG(pages_per_minute_color) FROM product,CREATE TABLE product (pages_per_minute_color INTEGER)
"What products are available at store named ""Miramichi""?","SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id = t2.product_id JOIN store AS t3 ON t2.store_id = t3.store_id WHERE t3.store_name = ""Miramichi""","CREATE TABLE store_product (product_id VARCHAR, store_id VARCHAR); CREATE TABLE store (store_id VARCHAR, store_name VARCHAR); CREATE TABLE product (product VARCHAR, product_id VARCHAR)"
"Find products with max page size as ""A4"" and pages per minute color smaller than 5.","SELECT product FROM product WHERE max_page_size = ""A4"" AND pages_per_minute_color < 5","CREATE TABLE product (product VARCHAR, max_page_size VARCHAR, pages_per_minute_color VARCHAR)"
"Find products with max page size as ""A4"" or pages per minute color smaller than 5.","SELECT product FROM product WHERE max_page_size = ""A4"" OR pages_per_minute_color < 5","CREATE TABLE product (product VARCHAR, max_page_size VARCHAR, pages_per_minute_color VARCHAR)"
"Find all the product whose name contains the word ""Scanner"".","SELECT product FROM product WHERE product LIKE ""%Scanner%""",CREATE TABLE product (product VARCHAR)
Find the most prominent max page size among all the products.,SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE product (max_page_size VARCHAR)
Find the name of the products that are not using the most frequently-used max page size.,SELECT product FROM product WHERE product <> (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE product (product VARCHAR, max_page_size VARCHAR)"
Find the total population of the districts where the area is bigger than the average city area.,SELECT SUM(city_population) FROM district WHERE city_area > (SELECT AVG(city_area) FROM district),"CREATE TABLE district (city_population INTEGER, city_area INTEGER)"
Find the names of districts where have both city mall and village store type stores.,"SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = ""City Mall"" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id = t2.store_id JOIN district AS t3 ON t2.district_id = t3.district_id WHERE t1.Type = ""Village Store""","CREATE TABLE district (District_name VARCHAR, district_id VARCHAR); CREATE TABLE store (store_id VARCHAR, Type VARCHAR); CREATE TABLE store_district (store_id VARCHAR, district_id VARCHAR)"
What is the total enrollment number of all colleges?,SELECT SUM(enr) FROM College,CREATE TABLE College (enr INTEGER)
What is the average enrollment number?,SELECT AVG(enr) FROM College,CREATE TABLE College (enr INTEGER)
How many colleges in total?,SELECT COUNT(*) FROM College,CREATE TABLE College (Id VARCHAR)
How many players have more than 1000 hours of training?,SELECT COUNT(*) FROM Player WHERE HS > 1000,CREATE TABLE Player (HS INTEGER)
How many colleges has more than 15000 students?,SELECT COUNT(*) FROM College WHERE enr > 15000,CREATE TABLE College (enr INTEGER)
What is the average training hours of all players?,SELECT AVG(HS) FROM Player,CREATE TABLE Player (HS INTEGER)
Find the name and training hours of players whose hours are below 1500.,"SELECT pName, HS FROM Player WHERE HS < 1500","CREATE TABLE Player (pName VARCHAR, HS INTEGER)"
How many different colleges do attend the tryout test?,SELECT COUNT(DISTINCT cName) FROM tryout,CREATE TABLE tryout (cName VARCHAR)
What are the unique types of player positions in the tryout?,SELECT COUNT(DISTINCT pPos) FROM tryout,CREATE TABLE tryout (pPos VARCHAR)
How many students got accepted after the tryout?,SELECT COUNT(*) FROM tryout WHERE decision = 'yes',CREATE TABLE tryout (decision VARCHAR)
How many students whose are playing the role of goalie?,SELECT COUNT(*) FROM tryout WHERE pPos = 'goalie',CREATE TABLE tryout (pPos VARCHAR)
"Find the max, average and min training hours of all players.","SELECT AVG(HS), MAX(HS), MIN(HS) FROM Player",CREATE TABLE Player (HS INTEGER)
What is average enrollment of colleges in the state FL?,SELECT AVG(enr) FROM College WHERE state = 'FL',"CREATE TABLE College (enr INTEGER, state VARCHAR)"
What are the names of players whose training hours is between 500 and 1500?,SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500,"CREATE TABLE Player (pName VARCHAR, HS INTEGER)"
Find the players whose names contain letter 'a'.,SELECT DISTINCT pName FROM Player WHERE pName LIKE '%a%',CREATE TABLE Player (pName VARCHAR)
"Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.","SELECT cName, enr FROM College WHERE enr > 10000 AND state = ""LA""","CREATE TABLE College (cName VARCHAR, enr VARCHAR, state VARCHAR)"
List all information about college sorted by enrollment number in the ascending order.,SELECT * FROM College ORDER BY enr,CREATE TABLE College (enr VARCHAR)
List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.,SELECT cName FROM College WHERE enr > 18000 ORDER BY cName,"CREATE TABLE College (cName VARCHAR, enr INTEGER)"
Find the name of players whose card is yes in the descending order of training hours.,SELECT pName FROM Player WHERE yCard = 'yes' ORDER BY HS DESC,"CREATE TABLE Player (pName VARCHAR, yCard VARCHAR, HS VARCHAR)"
Find the name of different colleges involved in the tryout in alphabetical order.,SELECT DISTINCT cName FROM tryout ORDER BY cName,CREATE TABLE tryout (cName VARCHAR)
Which position is most popular among players in the tryout?,SELECT pPos FROM tryout GROUP BY pPos ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE tryout (pPos VARCHAR)
Find the number of students who participate in the tryout for each college ordered by descending count.,"SELECT COUNT(*), cName FROM tryout GROUP BY cName ORDER BY COUNT(*) DESC",CREATE TABLE tryout (cName VARCHAR)
What is minimum hours of the students playing in different position?,"SELECT MIN(T2.HS), T1.pPos FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID GROUP BY T1.pPos","CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pPos VARCHAR, pID VARCHAR)"
What are the names of schools with the top 3 largest size?,SELECT cName FROM college ORDER BY enr DESC LIMIT 3,"CREATE TABLE college (cName VARCHAR, enr VARCHAR)"
What is the name of school that has the smallest enrollment in each state?,"SELECT cName, state, MIN(enr) FROM college GROUP BY state","CREATE TABLE college (cName VARCHAR, state VARCHAR, enr INTEGER)"
Find the states where have some college students in tryout.,SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName,CREATE TABLE college (cName VARCHAR); CREATE TABLE tryout (cName VARCHAR)
Find the states where have some college students in tryout and their decisions are yes.,SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes',"CREATE TABLE tryout (cName VARCHAR, decision VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
Find the name and college of students whose decisions are yes in the tryout.,"SELECT T1.pName, T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'","CREATE TABLE tryout (cName VARCHAR, pID VARCHAR, decision VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)"
Find the name of all students who were in the tryout sorted in alphabetic order.,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID ORDER BY T1.pName,"CREATE TABLE tryout (pID VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)"
Find the name and hours of the students whose tryout decision is yes.,"SELECT T1.pName, T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'","CREATE TABLE player (pName VARCHAR, HS VARCHAR, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)"
Find the states of the colleges that have students in the tryout who played in striker position.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'striker',"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
Find the names of the students who are in the position of striker and got a yes tryout decision.,SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes' AND T2.pPos = 'striker',"CREATE TABLE tryout (pID VARCHAR, decision VARCHAR, pPos VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)"
Find the state of the college which player Charles is attending.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName JOIN player AS T3 ON T2.pID = T3.pID WHERE T3.pName = 'Charles',"CREATE TABLE tryout (cName VARCHAR, pID VARCHAR); CREATE TABLE player (pID VARCHAR, pName VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
Find the average and maximum hours for the students whose tryout decision is yes.,"SELECT AVG(T1.HS), MAX(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'yes'","CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)"
Find the average hours for the students whose tryout decision is no.,SELECT AVG(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T2.decision = 'no',"CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pID VARCHAR, decision VARCHAR)"
What is the maximum training hours for the students whose training hours is greater than 1000 in different positions?,"SELECT MAX(T1.HS), pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS > 1000 GROUP BY T2.pPos","CREATE TABLE player (HS INTEGER, pID VARCHAR); CREATE TABLE tryout (pPos VARCHAR, pID VARCHAR)"
Which colleges do the tryout players whose name starts with letter D go to?,SELECT T1.cName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T2.pName LIKE 'D%',"CREATE TABLE tryout (cName VARCHAR, pID VARCHAR); CREATE TABLE player (pID VARCHAR, pName VARCHAR)"
Which college has any student who is a goalie and succeeded in the tryout.,SELECT cName FROM tryout WHERE decision = 'yes' AND pPos = 'goalie',"CREATE TABLE tryout (cName VARCHAR, decision VARCHAR, pPos VARCHAR)"
Find the name of the tryout players who are from the college with largest size.,SELECT T2.pName FROM tryout AS T1 JOIN player AS T2 ON T1.pID = T2.pID WHERE T1.cName = (SELECT cName FROM college ORDER BY enr DESC LIMIT 1),"CREATE TABLE college (cName VARCHAR, enr VARCHAR); CREATE TABLE tryout (pID VARCHAR, cName VARCHAR); CREATE TABLE player (pName VARCHAR, pID VARCHAR)"
What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.,"SELECT DISTINCT T1.state, T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.decision = 'yes'","CREATE TABLE tryout (cName VARCHAR, decision VARCHAR); CREATE TABLE college (state VARCHAR, enr VARCHAR, cName VARCHAR)"
Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.,"SELECT cName FROM College WHERE enr < 13000 AND state = ""AZ"" UNION SELECT cName FROM College WHERE enr > 15000 AND state = ""LA""","CREATE TABLE College (cName VARCHAR, enr VARCHAR, state VARCHAR)"
Find the names of schools that have some students playing in goalie and mid positions.,SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid',"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)"
Find the names of states that have some college students playing in goalie and mid positions.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid',"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
How many schools have some students playing in goalie and mid positions.,SELECT COUNT(*) FROM (SELECT cName FROM tryout WHERE pPos = 'goalie' INTERSECT SELECT cName FROM tryout WHERE pPos = 'mid'),"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)"
Find the names of schools that have some players in the mid position but not in the goalie position.,SELECT cName FROM tryout WHERE pPos = 'mid' EXCEPT SELECT cName FROM tryout WHERE pPos = 'goalie',"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR)"
Find the names of states that have some college students playing in the mid position but not in the goalie position.,SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie',"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
How many states that have some college students playing in the mid position but not in the goalie position.,SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = 'goalie'),"CREATE TABLE tryout (cName VARCHAR, pPos VARCHAR); CREATE TABLE college (state VARCHAR, cName VARCHAR)"
Find the states where have the colleges whose enrollments are less than the largest size.,SELECT DISTINCT state FROM college WHERE enr < (SELECT MAX(enr) FROM college),"CREATE TABLE college (state VARCHAR, enr INTEGER)"
Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.,SELECT DISTINCT cName FROM college WHERE enr > (SELECT MIN(enr) FROM college WHERE state = 'FL'),"CREATE TABLE college (cName VARCHAR, enr INTEGER, state VARCHAR)"
Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.,SELECT cName FROM college WHERE enr > (SELECT MAX(enr) FROM college WHERE state = 'FL'),"CREATE TABLE college (cName VARCHAR, enr INTEGER, state VARCHAR)"
What is the total number of enrollment of schools that do not have any goalie player?,"SELECT SUM(enr) FROM college WHERE NOT cName IN (SELECT cName FROM tryout WHERE pPos = ""goalie"")","CREATE TABLE college (enr INTEGER, cName VARCHAR, pPos VARCHAR); CREATE TABLE tryout (enr INTEGER, cName VARCHAR, pPos VARCHAR)"
What is the number of states that has some college whose enrollment is larger than the average enrollment?,SELECT COUNT(DISTINCT state) FROM college WHERE enr > (SELECT AVG(enr) FROM college),"CREATE TABLE college (state VARCHAR, enr INTEGER)"
What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?,SELECT COUNT(DISTINCT state) FROM college WHERE enr < (SELECT AVG(enr) FROM college),"CREATE TABLE college (state VARCHAR, enr INTEGER)"
How many devices are there?,SELECT COUNT(*) FROM device,CREATE TABLE device (Id VARCHAR)
List the carriers of devices in ascending alphabetical order.,SELECT Carrier FROM device ORDER BY Carrier,CREATE TABLE device (Carrier VARCHAR)
"What are the carriers of devices whose software platforms are not ""Android""?",SELECT Carrier FROM device WHERE Software_Platform <> 'Android',"CREATE TABLE device (Carrier VARCHAR, Software_Platform VARCHAR)"
What are the names of shops in ascending order of open year?,SELECT Shop_Name FROM shop ORDER BY Open_Year,"CREATE TABLE shop (Shop_Name VARCHAR, Open_Year VARCHAR)"
What is the average quantity of stocks?,SELECT AVG(Quantity) FROM stock,CREATE TABLE stock (Quantity INTEGER)
What are the names and location of the shops in ascending alphabetical order of name.,"SELECT Shop_Name, LOCATION FROM shop ORDER BY Shop_Name","CREATE TABLE shop (Shop_Name VARCHAR, LOCATION VARCHAR)"
How many different software platforms are there for devices?,SELECT COUNT(DISTINCT Software_Platform) FROM device,CREATE TABLE device (Software_Platform VARCHAR)
"List the open date of open year of the shop named ""Apple"".","SELECT Open_Date, Open_Year FROM shop WHERE Shop_Name = ""Apple""","CREATE TABLE shop (Open_Date VARCHAR, Open_Year VARCHAR, Shop_Name VARCHAR)"
List the name of the shop with the latest open year.,SELECT Shop_Name FROM shop ORDER BY Open_Year DESC LIMIT 1,"CREATE TABLE shop (Shop_Name VARCHAR, Open_Year VARCHAR)"
Show names of shops and the carriers of devices they have in stock.,"SELECT T3.Shop_Name, T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID JOIN shop AS T3 ON T1.Shop_ID = T3.Shop_ID","CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Device_ID VARCHAR, Shop_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)"
Show names of shops that have more than one kind of device in stock.,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID HAVING COUNT(*) > 1,"CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_ID VARCHAR)"
Show the name of the shop that has the most kind of devices in stock.,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_ID VARCHAR)"
Show the name of the shop that have the largest quantity of devices in stock.,SELECT T2.Shop_Name FROM stock AS T1 JOIN shop AS T2 ON T1.Shop_ID = T2.Shop_ID GROUP BY T1.Shop_ID ORDER BY SUM(T1.quantity) DESC LIMIT 1,"CREATE TABLE stock (Shop_ID VARCHAR, quantity INTEGER); CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR)"
Please show different software platforms and the corresponding number of devices using each.,"SELECT Software_Platform, COUNT(*) FROM device GROUP BY Software_Platform",CREATE TABLE device (Software_Platform VARCHAR)
Please show the software platforms of devices in descending order of the count.,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC,CREATE TABLE device (Software_Platform VARCHAR)
List the software platform shared by the greatest number of devices.,SELECT Software_Platform FROM device GROUP BY Software_Platform ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE device (Software_Platform VARCHAR)
List the names of shops that have no devices in stock.,SELECT Shop_Name FROM shop WHERE NOT Shop_ID IN (SELECT Shop_ID FROM stock),"CREATE TABLE shop (Shop_Name VARCHAR, Shop_ID VARCHAR); CREATE TABLE stock (Shop_Name VARCHAR, Shop_ID VARCHAR)"
Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.,SELECT LOCATION FROM shop WHERE Open_Year > 2012 INTERSECT SELECT LOCATION FROM shop WHERE Open_Year < 2008,"CREATE TABLE shop (LOCATION VARCHAR, Open_Year INTEGER)"
List the carriers of devices that have no devices in stock.,SELECT Carrier FROM device WHERE NOT Device_ID IN (SELECT Device_ID FROM stock),"CREATE TABLE stock (Carrier VARCHAR, Device_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)"
Show the carriers of devices in stock at more than one shop.,SELECT T2.Carrier FROM stock AS T1 JOIN device AS T2 ON T1.Device_ID = T2.Device_ID GROUP BY T1.Device_ID HAVING COUNT(*) > 1,"CREATE TABLE stock (Device_ID VARCHAR); CREATE TABLE device (Carrier VARCHAR, Device_ID VARCHAR)"
How many bookings do we have?,SELECT COUNT(*) FROM BOOKINGS,CREATE TABLE BOOKINGS (Id VARCHAR)
List the order dates of all the bookings.,SELECT Order_Date FROM BOOKINGS,CREATE TABLE BOOKINGS (Order_Date VARCHAR)
Show all the planned delivery dates and actual delivery dates of bookings.,"SELECT Planned_Delivery_Date, Actual_Delivery_Date FROM BOOKINGS","CREATE TABLE BOOKINGS (Planned_Delivery_Date VARCHAR, Actual_Delivery_Date VARCHAR)"
How many customers do we have?,SELECT COUNT(*) FROM CUSTOMERS,CREATE TABLE CUSTOMERS (Id VARCHAR)
What are the phone and email for customer Harold?,"SELECT Customer_Phone, Customer_Email_Address FROM CUSTOMERS WHERE Customer_Name = ""Harold""","CREATE TABLE CUSTOMERS (Customer_Phone VARCHAR, Customer_Email_Address VARCHAR, Customer_Name VARCHAR)"
Show all the Store_Name of drama workshop groups.,SELECT Store_Name FROM Drama_Workshop_Groups,CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR)
"Show the minimum, average, maximum order quantity of all invoices.","SELECT MIN(Order_Quantity), AVG(Order_Quantity), MAX(Order_Quantity) FROM INVOICES",CREATE TABLE INVOICES (Order_Quantity INTEGER)
What are the distinct payment method codes in all the invoices?,SELECT DISTINCT payment_method_code FROM INVOICES,CREATE TABLE INVOICES (payment_method_code VARCHAR)
What is the description of the marketing region China?,"SELECT Marketing_Region_Descriptrion FROM Marketing_Regions WHERE Marketing_Region_Name = ""China""","CREATE TABLE Marketing_Regions (Marketing_Region_Descriptrion VARCHAR, Marketing_Region_Name VARCHAR)"
Show all the distinct product names with price higher than the average.,SELECT DISTINCT Product_Name FROM PRODUCTS WHERE Product_Price > (SELECT AVG(Product_Price) FROM PRODUCTS),"CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)"
What is the name of the most expensive product?,SELECT Product_Name FROM PRODUCTS ORDER BY Product_Price DESC LIMIT 1,"CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price VARCHAR)"
What is the phone number of the performer Ashley?,"SELECT Customer_Phone FROM PERFORMERS WHERE Customer_Name = ""Ashley""","CREATE TABLE PERFORMERS (Customer_Phone VARCHAR, Customer_Name VARCHAR)"
Show all payment method codes and the number of orders for each code.,"SELECT payment_method_code, COUNT(*) FROM INVOICES GROUP BY payment_method_code",CREATE TABLE INVOICES (payment_method_code VARCHAR)
What is the payment method code used by the most orders?,SELECT payment_method_code FROM INVOICES GROUP BY payment_method_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE INVOICES (payment_method_code VARCHAR)
"Which city is the address of the store named ""FJA Filming"" located in?","SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Store_Name = ""FJA Filming""","CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Stores (Address_ID VARCHAR, Store_Name VARCHAR)"
"What are the states or counties of the address of the stores with marketing region code ""CA""?","SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = ""CA""","CREATE TABLE Addresses (State_County VARCHAR, Address_ID VARCHAR); CREATE TABLE Stores (Address_ID VARCHAR, Marketing_Region_Code VARCHAR)"
What is the name of the marketing region that the store Rob Dinning belongs to?,"SELECT T1.Marketing_Region_Name FROM Marketing_Regions AS T1 JOIN Stores AS T2 ON T1.Marketing_Region_Code = T2.Marketing_Region_Code WHERE T2.Store_Name = ""Rob Dinning""","CREATE TABLE Marketing_Regions (Marketing_Region_Name VARCHAR, Marketing_Region_Code VARCHAR); CREATE TABLE Stores (Marketing_Region_Code VARCHAR, Store_Name VARCHAR)"
What are the descriptions of the service types with product price above 100?,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Price > 100,"CREATE TABLE Services (Service_Type_Code VARCHAR, Product_Price INTEGER); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)"
"What is the description, code and the corresponding count of each service type?","SELECT T1.Service_Type_Description, T2.Service_Type_Code, COUNT(*) FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T2.Service_Type_Code","CREATE TABLE Services (Service_Type_Code VARCHAR); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)"
What is the description and code of the type of service that is performed the most often?,"SELECT T1.Service_Type_Description, T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Services (Service_Type_Code VARCHAR); CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR)"
What are the phones and emails of workshop groups in which services are performed?,"SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID","CREATE TABLE Services (Workshop_Group_ID VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Phone VARCHAR, Store_Email_Address VARCHAR, Workshop_Group_ID VARCHAR)"
"What are the names of workshop groups in which services with product name ""film"" are performed?","SELECT T1.Store_Phone, T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T2.Product_Name = ""film""","CREATE TABLE Services (Workshop_Group_ID VARCHAR, Product_Name VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Phone VARCHAR, Store_Email_Address VARCHAR, Workshop_Group_ID VARCHAR)"
What are the different product names? What is the average product price for each of them?,"SELECT Product_Name, AVG(Product_Price) FROM PRODUCTS GROUP BY Product_Name","CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)"
What are the product names with average product price smaller than 1000000?,SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING AVG(Product_Price) < 1000000,"CREATE TABLE PRODUCTS (Product_Name VARCHAR, Product_Price INTEGER)"
What are the total order quantities of photo products?,"SELECT SUM(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_Name = ""photo""","CREATE TABLE ORDER_ITEMS (Order_Quantity INTEGER, Product_ID VARCHAR); CREATE TABLE Products (Product_ID VARCHAR, Product_Name VARCHAR)"
What are the order details of the products with price higher than 2000?,SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID = T2.Product_ID WHERE T2.Product_price > 2000,"CREATE TABLE Products (Product_ID VARCHAR, Product_price INTEGER); CREATE TABLE ORDER_ITEMS (Other_Item_Details VARCHAR, Product_ID VARCHAR)"
What are the actual delivery dates of orders with quantity 1?,SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = 1,"CREATE TABLE Customer_Orders (Actual_Delivery_Date VARCHAR, Order_ID VARCHAR); CREATE TABLE ORDER_ITEMS (Order_ID VARCHAR, Order_Quantity VARCHAR)"
What are the order dates of orders with price higher than 1000?,SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID = T2.Order_ID JOIN Products AS T3 ON T2.Product_ID = T3.Product_ID WHERE T3.Product_price > 1000,"CREATE TABLE Products (Product_ID VARCHAR, Product_price INTEGER); CREATE TABLE ORDER_ITEMS (Order_ID VARCHAR, Product_ID VARCHAR); CREATE TABLE Customer_Orders (Order_Date VARCHAR, Order_ID VARCHAR)"
How many distinct currency codes are there for all drama workshop groups?,SELECT COUNT(DISTINCT Currency_Code) FROM Drama_Workshop_Groups,CREATE TABLE Drama_Workshop_Groups (Currency_Code VARCHAR)
What are the names of the drama workshop groups with address in Feliciaberg city?,"SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = ""Feliciaberg""","CREATE TABLE Addresses (Address_ID VARCHAR, City_Town VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR, Address_ID VARCHAR)"
What are the email addresses of the drama workshop groups with address in Alaska state?,"SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = ""Alaska""","CREATE TABLE Drama_Workshop_Groups (Store_Email_Address VARCHAR, Address_ID VARCHAR); CREATE TABLE Addresses (Address_ID VARCHAR, State_County VARCHAR)"
Show all cities along with the number of drama workshop groups in each city.,"SELECT T1.City_Town, COUNT(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T1.City_Town","CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Drama_Workshop_Groups (Address_ID VARCHAR)"
What is the marketing region code that has the most drama workshop groups?,SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Drama_Workshop_Groups (Marketing_Region_Code VARCHAR)
Show all cities where at least one customer lives in but no performer lives in.,SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID = T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID,"CREATE TABLE Customers (Address_ID VARCHAR); CREATE TABLE Addresses (City_Town VARCHAR, Address_ID VARCHAR); CREATE TABLE Performers (Address_ID VARCHAR)"
What is the most frequent status of bookings?,SELECT Status_Code FROM BOOKINGS GROUP BY Status_Code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE BOOKINGS (Status_Code VARCHAR)
"What are the names of the workshop groups that have bookings with status code ""stop""?","SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Status_Code = ""stop""","CREATE TABLE Bookings (Workshop_Group_ID VARCHAR, Status_Code VARCHAR); CREATE TABLE Drama_Workshop_Groups (Store_Name VARCHAR, Workshop_Group_ID VARCHAR)"
Show the names of all the clients with no booking.,SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID = T2.Client_ID,"CREATE TABLE Clients (Customer_Name VARCHAR, Client_ID VARCHAR); CREATE TABLE Bookings (Customer_ID VARCHAR); CREATE TABLE Clients (Customer_Name VARCHAR)"
"What is the average quantities ordered with payment method code ""MasterCard"" on invoices?","SELECT AVG(Order_Quantity) FROM Invoices WHERE payment_method_code = ""MasterCard""","CREATE TABLE Invoices (Order_Quantity INTEGER, payment_method_code VARCHAR)"
What is the product ID of the most frequently ordered item on invoices?,SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE INVOICES (Product_ID VARCHAR)
What is the description of the service type which offers both the photo product and the film product?,SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'photo' INTERSECT SELECT T1.Service_Type_Description FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code = T2.Service_Type_Code WHERE T2.Product_Name = 'film',"CREATE TABLE Ref_Service_Types (Service_Type_Description VARCHAR, Service_Type_Code VARCHAR); CREATE TABLE Services (Service_Type_Code VARCHAR, Product_Name VARCHAR)"
How many bands are there?,SELECT COUNT(*) FROM Band,CREATE TABLE Band (Id VARCHAR)
What are all the labels?,SELECT DISTINCT label FROM Albums,CREATE TABLE Albums (label VARCHAR)
Find all the albums in 2012.,SELECT * FROM Albums WHERE YEAR = 2012,CREATE TABLE Albums (YEAR VARCHAR)
"Find all the stage positions of the musicians with first name ""Solveig""","SELECT DISTINCT T1.stageposition FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE Firstname = ""Solveig""","CREATE TABLE Band (id VARCHAR); CREATE TABLE Performance (stageposition VARCHAR, bandmate VARCHAR)"
How many songs are there?,SELECT COUNT(*) FROM Songs,CREATE TABLE Songs (Id VARCHAR)
"Find all the songs performed by artist with last name ""Heilo""","SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.Lastname = ""Heilo""","CREATE TABLE Songs (Title VARCHAR, SongId VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, Lastname VARCHAR)"
"Hom many musicians performed in the song ""Flash""?","SELECT COUNT(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate = T2.id JOIN songs AS T3 ON T3.songid = T1.songid WHERE T3.Title = ""Flash""","CREATE TABLE performance (bandmate VARCHAR, songid VARCHAR); CREATE TABLE songs (songid VARCHAR, Title VARCHAR); CREATE TABLE band (id VARCHAR)"
"Find all the songs produced by artists with first name ""Marianne"".","SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T2.firstname = ""Marianne""","CREATE TABLE Songs (Title VARCHAR, SongId VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, firstname VARCHAR)"
"Who performed the song named ""Badlands""? Show the first name and the last name.","SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = ""Badlands""","CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)"
"Who is performing in the back stage position for the song ""Badlands""? Show the first name and the last name.","SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = ""Badlands"" AND T1.StagePosition = ""back""","CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR, StagePosition VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)"
How many unique labels are there for albums?,SELECT COUNT(DISTINCT label) FROM albums,CREATE TABLE albums (label VARCHAR)
What is the label that has the most albums?,SELECT label FROM albums GROUP BY label ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE albums (label VARCHAR)
What is the last name of the musician that have produced the most number of songs?,SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Songs (SongId VARCHAR); CREATE TABLE Band (lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR)"
What is the last name of the musician that has been at the back position the most?,"SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id WHERE stageposition = ""back"" GROUP BY lastname ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Band (lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR)"
"Find all the songs whose name contains the word ""the"".",SELECT title FROM songs WHERE title LIKE '% the %',CREATE TABLE songs (title VARCHAR)
What are all the instruments used?,SELECT DISTINCT instrument FROM Instruments,CREATE TABLE Instruments (instrument VARCHAR)
"What instrument did the musician with last name ""Heilo"" use in the song ""Le Pop""?","SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = ""Heilo"" AND T3.title = ""Le Pop""","CREATE TABLE Songs (SongId VARCHAR, songid VARCHAR, title VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR); CREATE TABLE Instruments (instrument VARCHAR, songid VARCHAR, bandmateid VARCHAR)"
What is the most used instrument?,SELECT instrument FROM instruments GROUP BY instrument ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE instruments (instrument VARCHAR)
"How many songs have used the instrument ""drums""?","SELECT COUNT(*) FROM instruments WHERE instrument = ""drums""",CREATE TABLE instruments (instrument VARCHAR)
"What instruments does the the song ""Le Pop"" use?","SELECT instrument FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Le Pop""",CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"How many instruments does the song ""Le Pop"" use?","SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Le Pop""",CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"How many instrument does the musician with last name ""Heilo"" use?","SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = ""Heilo""","CREATE TABLE instruments (bandmateid VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR)"
"Find all the instruments ever used by the musician with last name ""Heilo""?","SELECT instrument FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid = T2.id WHERE T2.lastname = ""Heilo""","CREATE TABLE instruments (bandmateid VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR)"
Which song has the most vocals?,SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid GROUP BY T1.songid ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
Which vocal type is the most frequently appearring type?,SELECT TYPE FROM vocals GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE vocals (TYPE VARCHAR)
"Which vocal type has the band mate with last name ""Heilo"" played the most?","SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE lastname = ""Heilo"" GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)
"What are the vocal types used in song ""Le Pop""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Le Pop""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"Find the number of vocal types used in song ""Demon Kitty Rag""?","SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Demon Kitty Rag""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
How many songs have a lead vocal?,"SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = ""lead""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"Which vocal type did the musician with first name ""Solveig"" played in the song with title ""A Bar in Amsterdam""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.firstname = ""Solveig"" AND T2.title = ""A Bar In Amsterdam""","CREATE TABLE vocals (songid VARCHAR, bandmate VARCHAR); CREATE TABLE band (id VARCHAR, firstname VARCHAR); CREATE TABLE songs (songid VARCHAR, title VARCHAR)"
Find all the songs that do not have a lead vocal.,"SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = ""lead""","CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE vocals (songid VARCHAR)"
Find all the vocal types.,SELECT DISTINCT TYPE FROM vocals,CREATE TABLE vocals (TYPE VARCHAR)
What are the albums produced in year 2010?,SELECT * FROM Albums WHERE YEAR = 2010,CREATE TABLE Albums (YEAR VARCHAR)
"Who performed the song named ""Le Pop""?","SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = ""Le Pop""","CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)"
"What instrument did the musician with last name ""Heilo"" use in the song ""Badlands""?","SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId JOIN Instruments AS T4 ON T4.songid = T3.songid AND T4.bandmateid = T2.id WHERE T2.lastname = ""Heilo"" AND T3.title = ""Badlands""","CREATE TABLE Songs (SongId VARCHAR, songid VARCHAR, title VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR); CREATE TABLE Band (id VARCHAR, lastname VARCHAR); CREATE TABLE Instruments (instrument VARCHAR, songid VARCHAR, bandmateid VARCHAR)"
"How many instruments does the song ""Badlands"" use?","SELECT COUNT(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Badlands""",CREATE TABLE instruments (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"What are the vocal types used in song ""Badlands""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Badlands""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
"Find the number of vocal types used in song ""Le Pop""","SELECT COUNT(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE title = ""Le Pop""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
How many songs have a shared vocal?,"SELECT COUNT(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid WHERE TYPE = ""shared""",CREATE TABLE vocals (songid VARCHAR); CREATE TABLE songs (songid VARCHAR)
Find all the songs that do not have a back vocal.,"SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid = t2.songid WHERE TYPE = ""back""","CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE vocals (songid VARCHAR)"
"Which vocal type has the band mate with first name ""Solveig"" played the most?","SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = ""Solveig"" GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)
"Which vocal type did the musician with last name ""Heilo"" played in the song with title ""Der Kapitan""?","SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid = T2.songid JOIN band AS T3 ON T1.bandmate = T3.id WHERE T3.lastname = ""Heilo"" AND T2.title = ""Der Kapitan""","CREATE TABLE band (id VARCHAR, lastname VARCHAR); CREATE TABLE vocals (songid VARCHAR, bandmate VARCHAR); CREATE TABLE songs (songid VARCHAR, title VARCHAR)"
Find the first name of the band mate that has performed in most songs.,SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate = t2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId GROUP BY firstname ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Songs (SongId VARCHAR); CREATE TABLE Band (firstname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR)"
"Which vocal type has the band mate with first name ""Marianne"" played the most?","SELECT TYPE FROM vocals AS T1 JOIN band AS T2 ON T1.bandmate = T2.id WHERE firstname = ""Marianne"" GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE vocals (bandmate VARCHAR); CREATE TABLE band (id VARCHAR)
"Who is performing in the back stage position for the song ""Der Kapitan""? Show the first name and last name.","SELECT T2.firstname, T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate = T2.id JOIN Songs AS T3 ON T3.SongId = T1.SongId WHERE T3.Title = ""Der Kapitan"" AND T1.StagePosition = ""back""","CREATE TABLE Band (firstname VARCHAR, lastname VARCHAR, id VARCHAR); CREATE TABLE Performance (bandmate VARCHAR, SongId VARCHAR, StagePosition VARCHAR); CREATE TABLE Songs (SongId VARCHAR, Title VARCHAR)"
"What are the songs in album ""A Kiss Before You Go: Live in Hamburg""?","SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE T1.title = ""A Kiss Before You Go: Live in Hamburg""","CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR, title VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)"
"What are all the songs in albums under label ""Universal Music Group""?","SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.label = ""Universal Music Group""","CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)"
Find the number of songs in all the studio albums.,"SELECT COUNT(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid = T2.albumid JOIN songs AS T3 ON T2.songid = T3.songid WHERE t1.type = ""Studio""","CREATE TABLE songs (title VARCHAR, songid VARCHAR); CREATE TABLE albums (aid VARCHAR); CREATE TABLE tracklists (albumid VARCHAR, songid VARCHAR)"
Who is the founder of Sony?,SELECT founder FROM manufacturers WHERE name = 'Sony',"CREATE TABLE manufacturers (founder VARCHAR, name VARCHAR)"
Where is the headquarter of the company founded by James?,SELECT headquarter FROM manufacturers WHERE founder = 'James',"CREATE TABLE manufacturers (headquarter VARCHAR, founder VARCHAR)"
"Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.","SELECT name, headquarter FROM manufacturers ORDER BY revenue DESC","CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, revenue VARCHAR)"
"What are the average, maximum and total revenues of all companies?","SELECT AVG(revenue), MAX(revenue), SUM(revenue) FROM manufacturers",CREATE TABLE manufacturers (revenue INTEGER)
How many companies were created by Andy?,SELECT COUNT(*) FROM manufacturers WHERE founder = 'Andy',CREATE TABLE manufacturers (founder VARCHAR)
Find the total revenue created by the companies whose headquarter is located at Austin.,SELECT SUM(revenue) FROM manufacturers WHERE headquarter = 'Austin',"CREATE TABLE manufacturers (revenue INTEGER, headquarter VARCHAR)"
What are the different cities listed?,SELECT DISTINCT headquarter FROM manufacturers,CREATE TABLE manufacturers (headquarter VARCHAR)
Find the number of manufactures that are based in Tokyo or Beijing.,SELECT COUNT(*) FROM manufacturers WHERE headquarter = 'Tokyo' OR headquarter = 'Beijing',CREATE TABLE manufacturers (headquarter VARCHAR)
Find the founder of the company whose name begins with the letter 'S'.,SELECT founder FROM manufacturers WHERE name LIKE 'S%',"CREATE TABLE manufacturers (founder VARCHAR, name VARCHAR)"
Find the name of companies whose revenue is between 100 and 150.,SELECT name FROM manufacturers WHERE revenue BETWEEN 100 AND 150,"CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)"
What is the total revenue of all companies whose main office is at Tokyo or Taiwan?,SELECT SUM(revenue) FROM manufacturers WHERE Headquarter = 'Tokyo' OR Headquarter = 'Taiwan',"CREATE TABLE manufacturers (revenue INTEGER, Headquarter VARCHAR)"
Find the name of product that is produced by both companies Creative Labs and Sony.,SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony',"CREATE TABLE manufacturers (code VARCHAR, name VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)"
"Find the name, headquarter and founder of the manufacturer that has the highest revenue.","SELECT name, headquarter, founder FROM manufacturers ORDER BY revenue DESC LIMIT 1","CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, founder VARCHAR, revenue VARCHAR)"
"Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.","SELECT name, headquarter, revenue FROM manufacturers ORDER BY revenue DESC","CREATE TABLE manufacturers (name VARCHAR, headquarter VARCHAR, revenue VARCHAR)"
Find the name of companies whose revenue is greater than the average revenue of all companies.,SELECT name FROM manufacturers WHERE revenue > (SELECT AVG(revenue) FROM manufacturers),"CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)"
Find the name of companies whose revenue is smaller than the revenue of all companies based in Austin.,SELECT name FROM manufacturers WHERE revenue < (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin'),"CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER, headquarter VARCHAR)"
Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.,SELECT SUM(revenue) FROM manufacturers WHERE revenue > (SELECT MIN(revenue) FROM manufacturers WHERE headquarter = 'Austin'),"CREATE TABLE manufacturers (revenue INTEGER, headquarter VARCHAR)"
Find the total revenue of companies of each founder.,"SELECT SUM(revenue), founder FROM manufacturers GROUP BY founder","CREATE TABLE manufacturers (founder VARCHAR, revenue INTEGER)"
Find the name and revenue of the company that earns the highest revenue in each city.,"SELECT name, MAX(revenue), Headquarter FROM manufacturers GROUP BY Headquarter","CREATE TABLE manufacturers (name VARCHAR, Headquarter VARCHAR, revenue INTEGER)"
Find the total revenue for each manufacturer.,"SELECT SUM(revenue), name FROM manufacturers GROUP BY name","CREATE TABLE manufacturers (name VARCHAR, revenue INTEGER)"
"Find the average prices of all products from each manufacture, and list each company's name.","SELECT AVG(T1.price), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name","CREATE TABLE products (price INTEGER, Manufacturer VARCHAR); CREATE TABLE manufacturers (name VARCHAR, code VARCHAR)"
Find the number of different products that are produced by companies at different headquarter cities.,"SELECT COUNT(DISTINCT T1.name), T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.Headquarter","CREATE TABLE manufacturers (Headquarter VARCHAR, code VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)"
Find number of products which Sony does not make.,SELECT COUNT(DISTINCT name) FROM products WHERE NOT name IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T2.name = 'Sony'),"CREATE TABLE manufacturers (code VARCHAR, name VARCHAR); CREATE TABLE products (name VARCHAR); CREATE TABLE products (name VARCHAR, Manufacturer VARCHAR)"
Find the name of companies that do not make DVD drive.,SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code WHERE T1.name = 'DVD drive',"CREATE TABLE manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Manufacturer VARCHAR, name VARCHAR); CREATE TABLE manufacturers (name VARCHAR)"
"Find the number of products for each manufacturer, showing the name of each company.","SELECT COUNT(*), T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name","CREATE TABLE products (Manufacturer VARCHAR); CREATE TABLE manufacturers (name VARCHAR, code VARCHAR)"
Select the names of all the products in the store.,SELECT Name FROM Products,CREATE TABLE Products (Name VARCHAR)
Select the names and the prices of all the products in the store.,"SELECT name, price FROM products","CREATE TABLE products (name VARCHAR, price VARCHAR)"
Select the name of the products with a price less than or equal to $200.,SELECT name FROM products WHERE price <= 200,"CREATE TABLE products (name VARCHAR, price VARCHAR)"
Find all information of all the products with a price between $60 and $120.,SELECT * FROM products WHERE price BETWEEN 60 AND 120,CREATE TABLE products (price INTEGER)
Compute the average price of all the products.,SELECT AVG(price) FROM products,CREATE TABLE products (price INTEGER)
Compute the average price of all products with manufacturer code equal to 2.,SELECT AVG(price) FROM products WHERE Manufacturer = 2,"CREATE TABLE products (price INTEGER, Manufacturer VARCHAR)"
Compute the number of products with a price larger than or equal to $180.,SELECT COUNT(*) FROM products WHERE price >= 180,CREATE TABLE products (price VARCHAR)
"Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).","SELECT name, price FROM products WHERE price >= 180 ORDER BY price DESC, name","CREATE TABLE products (name VARCHAR, price VARCHAR)"
Select all the data from the products and each product's manufacturer.,SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code,CREATE TABLE products (manufacturer VARCHAR); CREATE TABLE Manufacturers (code VARCHAR)
"Select the average price of each manufacturer's products, showing only the manufacturer's code.","SELECT AVG(Price), Manufacturer FROM Products GROUP BY Manufacturer","CREATE TABLE Products (Manufacturer VARCHAR, Price INTEGER)"
"Select the average price of each manufacturer's products, showing the manufacturer's name.","SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name","CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Price INTEGER, manufacturer VARCHAR)"
Select the names of manufacturer whose products have an average price higher than or equal to $150.,"SELECT AVG(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name HAVING AVG(T1.price) >= 150","CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Price INTEGER, manufacturer VARCHAR, price INTEGER)"
Select the name and price of the cheapest product.,"SELECT name, price FROM Products ORDER BY price LIMIT 1","CREATE TABLE Products (name VARCHAR, price VARCHAR)"
Select the name of each manufacturer along with the name and price of its most expensive product.,"SELECT T1.Name, MAX(T1.Price), T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.name","CREATE TABLE Manufacturers (name VARCHAR, code VARCHAR); CREATE TABLE products (Name VARCHAR, Price INTEGER, manufacturer VARCHAR)"
Select the code of the product that is cheapest in each product category.,"SELECT code, name, MIN(price) FROM products GROUP BY name","CREATE TABLE products (code VARCHAR, name VARCHAR, price INTEGER)"
What is the id of the problem log that is created most recently?,SELECT problem_log_id FROM problem_log ORDER BY log_entry_date DESC LIMIT 1,"CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_date VARCHAR)"
What is the oldest log id and its corresponding problem id?,"SELECT problem_log_id, problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1","CREATE TABLE problem_log (problem_log_id VARCHAR, problem_id VARCHAR, log_entry_date VARCHAR)"
Find all the ids and dates of the logs for the problem whose id is 10.,"SELECT problem_log_id, log_entry_date FROM problem_log WHERE problem_id = 10","CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_date VARCHAR, problem_id VARCHAR)"
List all the log ids and their descriptions from the problem logs.,"SELECT problem_log_id, log_entry_description FROM problem_log","CREATE TABLE problem_log (problem_log_id VARCHAR, log_entry_description VARCHAR)"
List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.,"SELECT DISTINCT staff_first_name, staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1","CREATE TABLE problem_log (assigned_to_staff_id VARCHAR, problem_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)"
List the problem id and log id which are assigned to the staff named Rylan Homenick.,"SELECT DISTINCT T2.problem_id, T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = ""Rylan"" AND T1.staff_last_name = ""Homenick""","CREATE TABLE problem_log (problem_id VARCHAR, problem_log_id VARCHAR, assigned_to_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR)"
How many problems are there for product voluptatem?,"SELECT COUNT(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = ""voluptatem""","CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_id VARCHAR, product_name VARCHAR)"
How many problems does the product with the most problems have? List the number of the problems and product name.,"SELECT COUNT(*), T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)"
Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.,"SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Christop""","CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR); CREATE TABLE problems (problem_description VARCHAR, reported_by_staff_id VARCHAR)"
Find the ids of the problems that are reported by the staff whose last name is Bosco.,"SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_last_name = ""Bosco""","CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_last_name VARCHAR)"
What are the ids of the problems which are reported after 1978-06-26?,"SELECT problem_id FROM problems WHERE date_problem_reported > ""1978-06-26""","CREATE TABLE problems (problem_id VARCHAR, date_problem_reported INTEGER)"
What are the ids of the problems which are reported before 1978-06-26?,"SELECT problem_id FROM problems WHERE date_problem_reported < ""1978-06-26""","CREATE TABLE problems (problem_id VARCHAR, date_problem_reported INTEGER)"
"For each product which has problems, what are the number of problems and the product id?","SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_id VARCHAR)
"For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?","SELECT COUNT(*), T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > ""1986-11-13"" GROUP BY T2.product_id","CREATE TABLE product (product_id VARCHAR); CREATE TABLE problems (product_id VARCHAR, date_problem_reported INTEGER)"
List the names of all the distinct product names in alphabetical order?,SELECT DISTINCT product_name FROM product ORDER BY product_name,CREATE TABLE product (product_name VARCHAR)
List all the distinct product names ordered by product id?,SELECT DISTINCT product_name FROM product ORDER BY product_id,"CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)"
What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Dameon"" AND T2.staff_last_name = ""Frami"" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Jolie"" AND T2.staff_last_name = ""Weber""","CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR)"
What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?,"SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Christop"" AND T2.staff_last_name = ""Berge"" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = ""Ashley"" AND T2.staff_last_name = ""Medhurst""","CREATE TABLE problems (reported_by_staff_id VARCHAR, closure_authorised_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR)"
What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?,"SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported < (SELECT MIN(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = ""Lysanne"" AND T4.staff_last_name = ""Turcotte"")","CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)"
What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?,"SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported > (SELECT MAX(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = ""Rylan"" AND T4.staff_last_name = ""Homenick"")","CREATE TABLE problems (problem_id VARCHAR, reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (reported_by_staff_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR)"
Find the top 3 products which have the largest number of problems?,SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY COUNT(*) DESC LIMIT 3,"CREATE TABLE problems (product_id VARCHAR); CREATE TABLE product (product_name VARCHAR, product_id VARCHAR)"
"List the ids of the problems from the product ""voluptatem"" that are reported after 1995?","SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = ""voluptatem"" AND T1.date_problem_reported > ""1995""","CREATE TABLE problems (problem_id VARCHAR, product_id VARCHAR, date_problem_reported VARCHAR); CREATE TABLE product (product_id VARCHAR, product_name VARCHAR)"
"Find the first and last name of the staff members who reported problems from the product ""rem"" but not ""aut""?","SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""rem"" EXCEPT SELECT T3.staff_first_name, T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = ""aut""","CREATE TABLE product (product_name VARCHAR, product_id VARCHAR); CREATE TABLE staff (staff_first_name VARCHAR, staff_last_name VARCHAR, staff_id VARCHAR); CREATE TABLE problems (product_id VARCHAR, reported_by_staff_id VARCHAR)"
Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?,"SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = ""Lacey"" AND T3.staff_last_name = ""Bosco"" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = ""Kenton"" AND T3.staff_last_name = ""Champlin""","CREATE TABLE product (product_name VARCHAR, product_id VARCHAR); CREATE TABLE staff (staff_id VARCHAR, staff_first_name VARCHAR, staff_last_name VARCHAR); CREATE TABLE problems (product_id VARCHAR, reported_by_staff_id VARCHAR)"
How many branches where have more than average number of memberships are there?,SELECT COUNT(*) FROM branch WHERE membership_amount > (SELECT AVG(membership_amount) FROM branch),CREATE TABLE branch (membership_amount INTEGER)
"Show name, address road, and city for all branches sorted by open year.","SELECT name, address_road, city FROM branch ORDER BY open_year","CREATE TABLE branch (name VARCHAR, address_road VARCHAR, city VARCHAR, open_year VARCHAR)"
What are names for top three branches with most number of membership?,SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3,"CREATE TABLE branch (name VARCHAR, membership_amount VARCHAR)"
Show all distinct city where branches with at least 100 memberships are located.,SELECT DISTINCT city FROM branch WHERE membership_amount >= 100,"CREATE TABLE branch (city VARCHAR, membership_amount VARCHAR)"
List all open years when at least two shops are opened.,SELECT open_year FROM branch GROUP BY open_year HAVING COUNT(*) >= 2,CREATE TABLE branch (open_year VARCHAR)
Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.,"SELECT MIN(membership_amount), MAX(membership_amount) FROM branch WHERE open_year = 2011 OR city = 'London'","CREATE TABLE branch (membership_amount INTEGER, open_year VARCHAR, city VARCHAR)"
Show the city and the number of branches opened before 2010 for each city.,"SELECT city, COUNT(*) FROM branch WHERE open_year < 2010 GROUP BY city","CREATE TABLE branch (city VARCHAR, open_year INTEGER)"
How many different levels do members have?,SELECT COUNT(DISTINCT LEVEL) FROM member,CREATE TABLE member (LEVEL VARCHAR)
"Show card number, name, and hometown for all members in a descending order of level.","SELECT card_number, name, hometown FROM member ORDER BY LEVEL DESC","CREATE TABLE member (card_number VARCHAR, name VARCHAR, hometown VARCHAR, LEVEL VARCHAR)"
Show the membership level with most number of members.,SELECT LEVEL FROM member GROUP BY LEVEL ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE member (LEVEL VARCHAR)
Show all member names and registered branch names sorted by register year.,"SELECT T3.name, T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id ORDER BY T1.register_year","CREATE TABLE member (name VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, member_id VARCHAR, register_year VARCHAR); CREATE TABLE branch (name VARCHAR, branch_id VARCHAR)"
Show all branch names with the number of members in each branch registered after 2015.,"SELECT T2.name, COUNT(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year > 2015 GROUP BY T2.branch_id","CREATE TABLE branch (name VARCHAR, branch_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, register_year INTEGER)"
Show member names without any registered branch.,SELECT name FROM member WHERE NOT member_id IN (SELECT member_id FROM membership_register_branch),"CREATE TABLE member (name VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (name VARCHAR, member_id VARCHAR)"
List the branch name and city without any registered members.,"SELECT name, city FROM branch WHERE NOT branch_id IN (SELECT branch_id FROM membership_register_branch)","CREATE TABLE membership_register_branch (name VARCHAR, city VARCHAR, branch_id VARCHAR); CREATE TABLE branch (name VARCHAR, city VARCHAR, branch_id VARCHAR)"
What is the name and open year for the branch with most number of memberships registered in 2016?,"SELECT T2.name, T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T1.register_year = 2016 GROUP BY T2.branch_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE membership_register_branch (branch_id VARCHAR, register_year VARCHAR); CREATE TABLE branch (name VARCHAR, open_year VARCHAR, branch_id VARCHAR)"
Show the member name and hometown who registered a branch in 2016.,"SELECT T2.name, T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T1.register_year = 2016","CREATE TABLE member (name VARCHAR, hometown VARCHAR, member_id VARCHAR); CREATE TABLE membership_register_branch (member_id VARCHAR, register_year VARCHAR)"
Show all city with a branch opened in 2001 and a branch with more than 100 membership.,SELECT city FROM branch WHERE open_year = 2001 AND membership_amount > 100,"CREATE TABLE branch (city VARCHAR, open_year VARCHAR, membership_amount VARCHAR)"
Show all cities without a branch having more than 100 memberships.,SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount > 100,"CREATE TABLE branch (city VARCHAR, membership_amount INTEGER)"
What is the sum of total pounds of purchase in year 2018 for all branches in London?,SELECT SUM(total_pounds) FROM purchase AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id WHERE T2.city = 'London' AND T1.year = 2018,"CREATE TABLE purchase (branch_id VARCHAR, year VARCHAR); CREATE TABLE branch (branch_id VARCHAR, city VARCHAR)"
What is the total number of purchases for members with level 6?,SELECT COUNT(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id = T2.member_id WHERE T2.level = 6,"CREATE TABLE member (member_id VARCHAR, level VARCHAR); CREATE TABLE purchase (member_id VARCHAR)"
"Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.","SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id = T2.branch_id JOIN member AS T3 ON T1.member_id = T3.member_id WHERE T3.Hometown = 'Hiram ,  Georgia'","CREATE TABLE member (member_id VARCHAR, Hometown VARCHAR); CREATE TABLE branch (name VARCHAR, branch_id VARCHAR); CREATE TABLE membership_register_branch (branch_id VARCHAR, member_id VARCHAR)"
"list the card number of all members whose hometown address includes word ""Kentucky"".","SELECT card_number FROM member WHERE Hometown LIKE ""%Kentucky%""","CREATE TABLE member (card_number VARCHAR, Hometown VARCHAR)"
Find the number of students in total.,SELECT COUNT(*) FROM STUDENT,CREATE TABLE STUDENT (Id VARCHAR)
Find the number of voting records in total.,SELECT COUNT(*) FROM VOTING_RECORD,CREATE TABLE VOTING_RECORD (Id VARCHAR)
Find the distinct number of president votes.,SELECT COUNT(DISTINCT President_Vote) FROM VOTING_RECORD,CREATE TABLE VOTING_RECORD (President_Vote VARCHAR)
Find the maximum age of all the students.,SELECT MAX(Age) FROM STUDENT,CREATE TABLE STUDENT (Age INTEGER)
Find the last names of students with major 50.,SELECT LName FROM STUDENT WHERE Major = 50,"CREATE TABLE STUDENT (LName VARCHAR, Major VARCHAR)"
Find the first names of students with age above 22.,SELECT Fname FROM STUDENT WHERE Age > 22,"CREATE TABLE STUDENT (Fname VARCHAR, Age INTEGER)"
What are the majors of male (sex is M) students?,"SELECT Major FROM STUDENT WHERE Sex = ""M""","CREATE TABLE STUDENT (Major VARCHAR, Sex VARCHAR)"
What is the average age of female (sex is F) students?,"SELECT AVG(Age) FROM STUDENT WHERE Sex = ""F""","CREATE TABLE STUDENT (Age INTEGER, Sex VARCHAR)"
What are the maximum and minimum age of students with major 600?,"SELECT MAX(Age), MIN(Age) FROM STUDENT WHERE Major = 600","CREATE TABLE STUDENT (Age INTEGER, Major VARCHAR)"
"Who are the advisors for students that live in a city with city code ""BAL""?","SELECT Advisor FROM STUDENT WHERE city_code = ""BAL""","CREATE TABLE STUDENT (Advisor VARCHAR, city_code VARCHAR)"
What are the distinct secretary votes in the fall election cycle?,"SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE = ""Fall""","CREATE TABLE VOTING_RECORD (Secretary_Vote VARCHAR, ELECTION_CYCLE VARCHAR)"
What are the distinct president votes on 08/30/2015?,"SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date = ""08/30/2015""","CREATE TABLE VOTING_RECORD (PRESIDENT_Vote VARCHAR, Registration_Date VARCHAR)"
Report the distinct registration date and the election cycle.,"SELECT DISTINCT Registration_Date, Election_Cycle FROM VOTING_RECORD","CREATE TABLE VOTING_RECORD (Registration_Date VARCHAR, Election_Cycle VARCHAR)"
Report the distinct president vote and the vice president vote.,"SELECT DISTINCT President_Vote, VICE_President_Vote FROM VOTING_RECORD","CREATE TABLE VOTING_RECORD (President_Vote VARCHAR, VICE_President_Vote VARCHAR)"
Find the distinct last names of the students who have class president votes.,SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_President_VOTE,"CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (CLASS_President_VOTE VARCHAR)"
Find the distinct first names of the students who have class senator votes.,SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.CLASS_Senator_VOTE,"CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (CLASS_Senator_VOTE VARCHAR)"
Find the distinct ages of students who have secretary votes in the fall election cycle.,"SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Secretary_Vote WHERE T2.Election_Cycle = ""Fall""","CREATE TABLE VOTING_RECORD (Secretary_Vote VARCHAR, Election_Cycle VARCHAR); CREATE TABLE STUDENT (Age VARCHAR, StuID VARCHAR)"
Find the distinct Advisor of students who have treasurer votes in the spring election cycle.,"SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote WHERE T2.Election_Cycle = ""Spring""","CREATE TABLE STUDENT (Advisor VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Treasurer_Vote VARCHAR, Election_Cycle VARCHAR)"
Find the distinct majors of students who have treasurer votes.,SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.Treasurer_Vote,"CREATE TABLE VOTING_RECORD (Treasurer_Vote VARCHAR); CREATE TABLE STUDENT (Major VARCHAR, StuID VARCHAR)"
Find the first and last names of all the female (sex is F) students who have president votes.,"SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.President_VOTE WHERE T1.sex = ""F""","CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR, sex VARCHAR); CREATE TABLE VOTING_RECORD (President_VOTE VARCHAR)"
Find the first and last name of all the students of age 18 who have vice president votes.,"SELECT DISTINCT T1.Fname, T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_President_VOTE WHERE T1.age = 18","CREATE TABLE STUDENT (Fname VARCHAR, LName VARCHAR, StuID VARCHAR, age VARCHAR); CREATE TABLE VOTING_RECORD (VICE_President_VOTE VARCHAR)"
How many male (sex is M) students have class senator votes in the fall election cycle?,"SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.Sex = ""M"" AND T2.Election_Cycle = ""Fall""","CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR); CREATE TABLE STUDENT (StuID VARCHAR, Sex VARCHAR)"
Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.,"SELECT COUNT(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = Class_Senator_Vote WHERE T1.city_code = ""NYC"" AND T2.Election_Cycle = ""Spring""","CREATE TABLE STUDENT (StuID VARCHAR, city_code VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)"
"Find the average age of students who live in the city with code ""NYC"" and have secretary votes in the spring election cycle.","SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.city_code = ""NYC"" AND T2.Election_Cycle = ""Spring""","CREATE TABLE STUDENT (Age INTEGER, StuID VARCHAR, city_code VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)"
Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.,"SELECT AVG(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = SECRETARY_Vote WHERE T1.Sex = ""F"" AND T2.Election_Cycle = ""Spring""","CREATE TABLE STUDENT (Age INTEGER, StuID VARCHAR, Sex VARCHAR); CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)"
Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.,"SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code = ""PIT""","CREATE TABLE STUDENT (Fname VARCHAR, city_code VARCHAR); CREATE TABLE STUDENT (Fname VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (VICE_PRESIDENT_Vote VARCHAR)"
Find the distinct last names of all the students who have president votes and whose advisor is not 2192.,"SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = ""2192""","CREATE TABLE STUDENT (LName VARCHAR, PRESIDENT_Vote VARCHAR, Advisor VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Id VARCHAR)"
Find the distinct last names of all the students who have president votes and whose advisor is 8741.,"SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID = PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor = ""8741""","CREATE TABLE STUDENT (LName VARCHAR, PRESIDENT_Vote VARCHAR, Advisor VARCHAR); CREATE TABLE STUDENT (LName VARCHAR, StuID VARCHAR); CREATE TABLE VOTING_RECORD (Id VARCHAR)"
"For each advisor, report the total number of students advised by him or her.","SELECT Advisor, COUNT(*) FROM STUDENT GROUP BY Advisor",CREATE TABLE STUDENT (Advisor VARCHAR)
Report all advisors that advise more than 2 students.,SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*) > 2,CREATE TABLE STUDENT (Advisor VARCHAR)
Report all majors that have less than 3 students.,SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*) < 3,CREATE TABLE STUDENT (Major VARCHAR)
"For each election cycle, report the number of voting records.","SELECT Election_Cycle, COUNT(*) FROM VOTING_RECORD GROUP BY Election_Cycle",CREATE TABLE VOTING_RECORD (Election_Cycle VARCHAR)
Which major has the most students?,SELECT Major FROM STUDENT GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE STUDENT (Major VARCHAR, major VARCHAR)"
What is the most common major among female (sex is F) students?,"SELECT Major FROM STUDENT WHERE Sex = ""F"" GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE STUDENT (Major VARCHAR, major VARCHAR, Sex VARCHAR)"
What is the city_code of the city that the most students live in?,SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE STUDENT (city_code VARCHAR)
How many products are there?,SELECT COUNT(*) FROM products,CREATE TABLE products (Id VARCHAR)
How many colors are there?,SELECT COUNT(*) FROM ref_colors,CREATE TABLE ref_colors (Id VARCHAR)
How many characteristics are there?,SELECT COUNT(*) FROM CHARACTERISTICS,CREATE TABLE CHARACTERISTICS (Id VARCHAR)
What are the names and buying prices of all the products?,"SELECT product_name, typical_buying_price FROM products","CREATE TABLE products (product_name VARCHAR, typical_buying_price VARCHAR)"
List the description of all the colors.,SELECT color_description FROM ref_colors,CREATE TABLE ref_colors (color_description VARCHAR)
Find the names of all the product characteristics.,SELECT DISTINCT characteristic_name FROM CHARACTERISTICS,CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR)
"What are the names of products with category ""Spices""?","SELECT product_name FROM products WHERE product_category_code = ""Spices""","CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR)"
"List the names, color descriptions and product descriptions of products with category ""Herbs"".","SELECT T1.product_name, T2.color_description, T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code = T2.color_code WHERE product_category_code = ""Herbs""","CREATE TABLE Ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (product_name VARCHAR, product_description VARCHAR, color_code VARCHAR)"
"How many products are there under the category ""Seeds""?","SELECT COUNT(*) FROM products WHERE product_category_code = ""Seeds""",CREATE TABLE products (product_category_code VARCHAR)
"Find the number of products with category ""Spices"" and typically sold above 1000.","SELECT COUNT(*) FROM products WHERE product_category_code = ""Spices"" AND typical_buying_price > 1000","CREATE TABLE products (product_category_code VARCHAR, typical_buying_price VARCHAR)"
"What is the category and typical buying price  of the product with name ""cumin""?","SELECT product_category_code, typical_buying_price FROM products WHERE product_name = ""cumin""","CREATE TABLE products (product_category_code VARCHAR, typical_buying_price VARCHAR, product_name VARCHAR)"
"Which category does the product named ""flax"" belong to?","SELECT product_category_code FROM products WHERE product_name = ""flax""","CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)"
What is the name of the product with the color description 'yellow'?,SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code = T2.color_code WHERE T2.color_description = 'yellow',"CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, color_code VARCHAR)"
Find the category descriptions of the products whose descriptions include letter 't'.,SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%',"CREATE TABLE ref_product_categories (product_category_description VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_description VARCHAR)"
"What is the color description of the product with name ""catnip""?","SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = ""catnip""","CREATE TABLE products (color_code VARCHAR, product_name VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR)"
"What is the color code and description of the product named ""chervil""?","SELECT t1.color_code, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t1.product_name = ""chervil""","CREATE TABLE products (color_code VARCHAR, product_name VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR)"
Find the id and color description of the products with at least 2 characteristics.,"SELECT t1.product_id, t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code JOIN product_characteristics AS t3 ON t1.product_id = t3.product_id GROUP BY t1.product_id HAVING COUNT(*) >= 2","CREATE TABLE product_characteristics (product_id VARCHAR); CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR)"
"List all the product names with the color description ""white"".","SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = ""white""","CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, color_code VARCHAR)"
"What are the name and typical buying and selling prices of the products that have color described as ""yellow""?","SELECT t1.product_name, t1.typical_buying_price, t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code WHERE t2.color_description = ""yellow""","CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_name VARCHAR, typical_buying_price VARCHAR, typical_selling_price VARCHAR, color_code VARCHAR)"
"How many characteristics does the product named ""sesame"" have?","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id WHERE t1.product_name = ""sesame""","CREATE TABLE product_characteristics (product_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR)"
"How many distinct characteristic names does the product ""cumin"" have?","SELECT COUNT(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""sesame""","CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"What are all the characteristic names of product ""sesame""?","SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""sesame""","CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"List all the characteristic names and data types of product ""cumin"".","SELECT t3.characteristic_name, t3.characteristic_data_type FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""cumin""","CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_data_type VARCHAR, characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"List all characteristics of product named ""sesame"" with type code ""Grade"".","SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""sesame"" AND t3.characteristic_type_code = ""Grade""","CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR, characteristic_type_code VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"How many characteristics does the product named ""laurel"" have?","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""laurel""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"Find the number of characteristics that the product ""flax"" has.","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t1.product_name = ""flax""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"Find the name of the products that have the color description ""red"" and have the characteristic name ""fast"".","SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = ""red"" AND t3.characteristic_name = ""fast""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"How many products have the characteristic named ""hot""?","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = ""hot""","CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
List the all the distinct names of the products with the characteristic name 'warm'.,"SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id WHERE t3.characteristic_name = ""warm""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"Find the number of the products that have their color described as ""red"" and have a characteristic named ""slow"".","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = ""red"" AND t3.characteristic_name = ""slow""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"Count the products that have the color description ""white"" or have the characteristic name ""hot"".","SELECT COUNT(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code = t4.color_code WHERE t4.color_description = ""white"" OR t3.characteristic_name = ""hot""","CREATE TABLE CHARACTERISTICS (characteristic_id VARCHAR, characteristic_name VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE products (product_id VARCHAR, color_code VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"What is the unit of measuerment of the product category code ""Herbs""?","SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code = ""Herbs""","CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR)"
"Find the product category description of the product category with code ""Spices"".","SELECT product_category_description FROM ref_product_categories WHERE product_category_code = ""Spices""","CREATE TABLE ref_product_categories (product_category_description VARCHAR, product_category_code VARCHAR)"
"What is the product category description and unit of measurement of category ""Herbs""?","SELECT product_category_description, unit_of_measure FROM ref_product_categories WHERE product_category_code = ""Herbs""","CREATE TABLE ref_product_categories (product_category_description VARCHAR, unit_of_measure VARCHAR, product_category_code VARCHAR)"
"What is the unit of measurement of product named ""cumin""?","SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = ""cumin""","CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)"
"Find the unit of measurement and product category code of product named ""chervil"".","SELECT t2.unit_of_measure, t2.product_category_code FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code WHERE t1.product_name = ""chervil""","CREATE TABLE ref_product_categories (unit_of_measure VARCHAR, product_category_code VARCHAR); CREATE TABLE products (product_category_code VARCHAR, product_name VARCHAR)"
"Find the product names that are colored 'white' but do not have unit of measurement ""Handful"".","SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code = t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code = t3.color_code WHERE t3.color_description = ""white"" AND t2.unit_of_measure <> ""Handful""","CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR, color_code VARCHAR); CREATE TABLE ref_colors (color_code VARCHAR, color_description VARCHAR); CREATE TABLE ref_product_categories (product_category_code VARCHAR, unit_of_measure VARCHAR)"
What is the description of the color for most products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (color_code VARCHAR)"
What is the description of the color used by least products?,SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code = t2.color_code GROUP BY t2.color_description ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE ref_colors (color_description VARCHAR, color_code VARCHAR); CREATE TABLE products (color_code VARCHAR)"
What is the characteristic name used by most number of the products?,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
"What are the names, details and data types of the characteristics which are never used by any product?","SELECT characteristic_name, other_characteristic_details, characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name, t1.other_characteristic_details, t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id = t2.characteristic_id","CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, other_characteristic_details VARCHAR, characteristic_data_type VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (characteristic_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, other_characteristic_details VARCHAR, characteristic_data_type VARCHAR)"
What are characteristic names used at least twice across all products?,SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id = t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id = t3.characteristic_id GROUP BY t3.characteristic_name HAVING COUNT(*) >= 2,"CREATE TABLE products (product_id VARCHAR); CREATE TABLE CHARACTERISTICS (characteristic_name VARCHAR, characteristic_id VARCHAR); CREATE TABLE product_characteristics (product_id VARCHAR, characteristic_id VARCHAR)"
How many colors are never used by any product?,SELECT COUNT(*) FROM Ref_colors WHERE NOT color_code IN (SELECT color_code FROM products),CREATE TABLE products (color_code VARCHAR); CREATE TABLE Ref_colors (color_code VARCHAR)
How many events are there?,SELECT COUNT(*) FROM event,CREATE TABLE event (Id VARCHAR)
List all the event names by year from the most recent to the oldest.,SELECT name FROM event ORDER BY YEAR DESC,"CREATE TABLE event (name VARCHAR, YEAR VARCHAR)"
What is the name of the event that happened in the most recent year?,SELECT name FROM event ORDER BY YEAR DESC LIMIT 1,"CREATE TABLE event (name VARCHAR, YEAR VARCHAR)"
How many stadiums are there?,SELECT COUNT(*) FROM stadium,CREATE TABLE stadium (Id VARCHAR)
Find the name of the stadium that has the maximum capacity.,SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1,"CREATE TABLE stadium (name VARCHAR, capacity VARCHAR)"
Find the names of stadiums whose capacity is smaller than the average capacity.,SELECT name FROM stadium WHERE capacity < (SELECT AVG(capacity) FROM stadium),"CREATE TABLE stadium (name VARCHAR, capacity INTEGER)"
Find the country that has the most stadiums.,SELECT country FROM stadium GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE stadium (country VARCHAR)
Which country has at most 3 stadiums listed?,SELECT country FROM stadium GROUP BY country HAVING COUNT(*) <= 3,CREATE TABLE stadium (country VARCHAR)
Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?,SELECT country FROM stadium WHERE capacity > 60000 INTERSECT SELECT country FROM stadium WHERE capacity < 50000,"CREATE TABLE stadium (country VARCHAR, capacity INTEGER)"
How many cities have a stadium that was opened before the year of 2006?,SELECT COUNT(DISTINCT city) FROM stadium WHERE opening_year < 2006,"CREATE TABLE stadium (city VARCHAR, opening_year INTEGER)"
How many stadiums does each country have?,"SELECT country, COUNT(*) FROM stadium GROUP BY country",CREATE TABLE stadium (country VARCHAR)
Which countries do not have a stadium that was opened after 2006?,SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year > 2006,"CREATE TABLE stadium (country VARCHAR, opening_year INTEGER)"
"How many stadiums are not in country ""Russia""?",SELECT COUNT(*) FROM stadium WHERE country <> 'Russia',CREATE TABLE stadium (country VARCHAR)
"Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",SELECT name FROM swimmer ORDER BY meter_100,"CREATE TABLE swimmer (name VARCHAR, meter_100 VARCHAR)"
How many different countries are all the swimmers from?,SELECT COUNT(DISTINCT nationality) FROM swimmer,CREATE TABLE swimmer (nationality VARCHAR)
List countries that have more than one swimmer.,"SELECT nationality, COUNT(*) FROM swimmer GROUP BY nationality HAVING COUNT(*) > 1",CREATE TABLE swimmer (nationality VARCHAR)
"Find all 200 meter and 300 meter results of swimmers with nationality ""Australia"".","SELECT meter_200, meter_300 FROM swimmer WHERE nationality = 'Australia'","CREATE TABLE swimmer (meter_200 VARCHAR, meter_300 VARCHAR, nationality VARCHAR)"
"Find the names of swimmers who has a result of ""win"".",SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win',"CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)"
What is the name of the stadium which held the most events?,SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (stadium_id VARCHAR)"
"Find the name and capacity of the stadium where the event named ""World Junior"" happened.","SELECT t1.name, t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id = t2.stadium_id WHERE t2.name = 'World Junior'","CREATE TABLE event (stadium_id VARCHAR, name VARCHAR); CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, id VARCHAR)"
Find the names of stadiums which have never had any event.,SELECT name FROM stadium WHERE NOT id IN (SELECT stadium_id FROM event),"CREATE TABLE stadium (name VARCHAR, id VARCHAR, stadium_id VARCHAR); CREATE TABLE event (name VARCHAR, id VARCHAR, stadium_id VARCHAR)"
Find the name of the swimmer who has the most records.,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)"
Find the name of the swimmer who has at least 2 records.,SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id GROUP BY t2.swimmer_id HAVING COUNT(*) >= 2,"CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)"
"Find the name and nationality of the swimmer who has won (i.e., has a result of ""win"") more than 1 time.","SELECT t1.name, t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY t2.swimmer_id HAVING COUNT(*) > 1","CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, nationality VARCHAR, id VARCHAR)"
Find the names of the swimmers who have no record.,SELECT name FROM swimmer WHERE NOT id IN (SELECT swimmer_id FROM record),"CREATE TABLE swimmer (name VARCHAR, id VARCHAR, swimmer_id VARCHAR); CREATE TABLE record (name VARCHAR, id VARCHAR, swimmer_id VARCHAR)"
"Find the names of the swimmers who have both ""win"" and ""loss"" results in the record.",SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Loss',"CREATE TABLE record (swimmer_id VARCHAR); CREATE TABLE swimmer (name VARCHAR, id VARCHAR)"
Find the names of stadiums that some Australian swimmers have been to.,SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia',"CREATE TABLE swimmer (id VARCHAR, nationality VARCHAR); CREATE TABLE record (swimmer_id VARCHAR, event_id VARCHAR); CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (id VARCHAR, stadium_id VARCHAR)"
Find the names of stadiums that the most swimmers have been to.,SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id = t2.id JOIN stadium AS t3 ON t3.id = t2.stadium_id GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE record (event_id VARCHAR); CREATE TABLE stadium (name VARCHAR, id VARCHAR); CREATE TABLE event (stadium_id VARCHAR, id VARCHAR)"
Find all details for each swimmer.,SELECT * FROM swimmer,CREATE TABLE swimmer (Id VARCHAR)
What is the average capacity of the stadiums that were opened in year 2005?,SELECT AVG(capacity) FROM stadium WHERE opening_year = 2005,"CREATE TABLE stadium (capacity INTEGER, opening_year VARCHAR)"
How many railways are there?,SELECT COUNT(*) FROM railway,CREATE TABLE railway (Id VARCHAR)
List the builders of railways in ascending alphabetical order.,SELECT Builder FROM railway ORDER BY Builder,CREATE TABLE railway (Builder VARCHAR)
List the wheels and locations of the railways.,"SELECT Wheels, LOCATION FROM railway","CREATE TABLE railway (Wheels VARCHAR, LOCATION VARCHAR)"
"What is the maximum level of managers in countries that are not ""Australia""?","SELECT MAX(LEVEL) FROM manager WHERE Country <> ""Australia	""","CREATE TABLE manager (LEVEL INTEGER, Country VARCHAR)"
What is the average age for all managers?,SELECT AVG(Age) FROM manager,CREATE TABLE manager (Age INTEGER)
What are the names of managers in ascending order of level?,SELECT Name FROM manager ORDER BY LEVEL,"CREATE TABLE manager (Name VARCHAR, LEVEL VARCHAR)"
What are the names and arrival times of trains?,"SELECT Name, Arrival FROM train","CREATE TABLE train (Name VARCHAR, Arrival VARCHAR)"
What is the name of the oldest manager?,SELECT Name FROM manager ORDER BY Age DESC LIMIT 1,"CREATE TABLE manager (Name VARCHAR, Age VARCHAR)"
Show the names of trains and locations of railways they are in.,"SELECT T2.Name, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID","CREATE TABLE railway (Location VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Name VARCHAR, Railway_ID VARCHAR)"
"Show the builder of railways associated with the trains named ""Andaman Exp"".","SELECT T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Name = ""Andaman Exp""","CREATE TABLE railway (Builder VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Railway_ID VARCHAR, Name VARCHAR)"
Show id and location of railways that are associated with more than one train.,"SELECT T2.Railway_ID, T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*) > 1","CREATE TABLE railway (Location VARCHAR, Railway_ID VARCHAR); CREATE TABLE train (Railway_ID VARCHAR)"
Show the id and builder of the railway that are associated with the most trains.,"SELECT T2.Railway_ID, T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE train (Railway_ID VARCHAR); CREATE TABLE railway (Builder VARCHAR, Railway_ID VARCHAR)"
"Show different builders of railways, along with the corresponding number of railways using each builder.","SELECT Builder, COUNT(*) FROM railway GROUP BY Builder",CREATE TABLE railway (Builder VARCHAR)
Show the most common builder of railways.,SELECT Builder FROM railway GROUP BY Builder ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE railway (Builder VARCHAR)
Show different locations of railways along with the corresponding number of railways at each location.,"SELECT LOCATION, COUNT(*) FROM railway GROUP BY LOCATION",CREATE TABLE railway (LOCATION VARCHAR)
Show the locations that have more than one railways.,SELECT LOCATION FROM railway GROUP BY LOCATION HAVING COUNT(*) > 1,CREATE TABLE railway (LOCATION VARCHAR)
List the object number of railways that do not have any trains.,SELECT ObjectNumber FROM railway WHERE NOT Railway_ID IN (SELECT Railway_ID FROM train),"CREATE TABLE train (ObjectNumber VARCHAR, Railway_ID VARCHAR); CREATE TABLE railway (ObjectNumber VARCHAR, Railway_ID VARCHAR)"
Show the countries that have both managers of age above 50 and managers of age below 46.,SELECT Country FROM manager WHERE Age > 50 INTERSECT SELECT Country FROM manager WHERE Age < 46,"CREATE TABLE manager (Country VARCHAR, Age INTEGER)"
Show the distinct countries of managers.,SELECT DISTINCT Country FROM manager,CREATE TABLE manager (Country VARCHAR)
Show the working years of managers in descending order of their level.,SELECT Working_year_starts FROM manager ORDER BY LEVEL DESC,"CREATE TABLE manager (Working_year_starts VARCHAR, LEVEL VARCHAR)"
Show the countries that have managers of age above 50 or below 46.,SELECT Country FROM manager WHERE Age > 50 OR Age < 46,"CREATE TABLE manager (Country VARCHAR, Age VARCHAR)"
How many addresses are there in country USA?,SELECT COUNT(*) FROM addresses WHERE country = 'USA',CREATE TABLE addresses (country VARCHAR)
Show all distinct cities in the address record.,SELECT DISTINCT city FROM addresses,CREATE TABLE addresses (city VARCHAR)
Show each state and the number of addresses in each state.,"SELECT state_province_county, COUNT(*) FROM addresses GROUP BY state_province_county",CREATE TABLE addresses (state_province_county VARCHAR)
Show names and phones of customers who do not have address information.,"SELECT customer_name, customer_phone FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM customer_address_history)","CREATE TABLE customer_address_history (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR)"
Show the name of the customer who has the most orders.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)"
Show the product type codes which have at least two products.,SELECT product_type_code FROM products GROUP BY product_type_code HAVING COUNT(*) >= 2,CREATE TABLE products (product_type_code VARCHAR)
Show the names of customers who have both an order in completed status and an order in part status.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Completed' INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = 'Part',"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_status_code VARCHAR)"
"Show the name, phone, and payment method code for all customers in descending order of customer number.","SELECT customer_name, customer_phone, payment_method_code FROM customers ORDER BY customer_number DESC","CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, payment_method_code VARCHAR, customer_number VARCHAR)"
Show the product name and total order quantity for each product.,"SELECT T1.product_name, SUM(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id","CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, product_id VARCHAR)"
"Show the minimum, maximum, average price for all products.","SELECT MIN(product_price), MAX(product_price), AVG(product_price) FROM products",CREATE TABLE products (product_price INTEGER)
How many products have a price higher than the average?,SELECT COUNT(*) FROM products WHERE product_price > (SELECT AVG(product_price) FROM products),CREATE TABLE products (product_price INTEGER)
"Show the customer name, customer address city, date from, and date to for each customer address history.","SELECT T2.customer_name, T3.city, T1.date_from, T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id JOIN addresses AS T3 ON T1.address_id = T3.address_id","CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_address_history (date_from VARCHAR, date_to VARCHAR, customer_id VARCHAR, address_id VARCHAR)"
Show the names of customers who use Credit Card payment method and have more than 2 orders.,SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.payment_method_code = 'Credit Card' GROUP BY T1.customer_id HAVING COUNT(*) > 2,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR, payment_method_code VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)"
What are the name and phone of the customer with the most ordered product quantity?,"SELECT T1.customer_name, T1.customer_phone FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id = T2.customer_id JOIN order_items AS T3 ON T3.order_id = T2.order_id GROUP BY T1.customer_id ORDER BY SUM(T3.order_quantity) DESC LIMIT 1","CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_phone VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
Show the product type and name for the products with price higher than 1000 or lower than 500.,"SELECT product_type_code, product_name FROM products WHERE product_price > 1000 OR product_price < 500","CREATE TABLE products (product_type_code VARCHAR, product_name VARCHAR, product_price VARCHAR)"
Find the name of dorms only for female (F gender).,SELECT dorm_name FROM dorm WHERE gender = 'F',"CREATE TABLE dorm (dorm_name VARCHAR, gender VARCHAR)"
Find the name of dorms that can accommodate more than 300 students.,SELECT dorm_name FROM dorm WHERE student_capacity > 300,"CREATE TABLE dorm (dorm_name VARCHAR, student_capacity INTEGER)"
How many female students (sex is F) whose age is below 25?,SELECT COUNT(*) FROM student WHERE sex = 'F' AND age < 25,"CREATE TABLE student (sex VARCHAR, age VARCHAR)"
Find the first name of students who is older than 20.,SELECT fname FROM student WHERE age > 20,"CREATE TABLE student (fname VARCHAR, age INTEGER)"
Find the first name of students living in city PHL whose age is between 20 and 25.,SELECT fname FROM student WHERE city_code = 'PHL' AND age BETWEEN 20 AND 25,"CREATE TABLE student (fname VARCHAR, city_code VARCHAR, age VARCHAR)"
How many dorms are there?,SELECT COUNT(*) FROM dorm,CREATE TABLE dorm (Id VARCHAR)
Find the number of distinct amenities.,SELECT COUNT(*) FROM dorm_amenity,CREATE TABLE dorm_amenity (Id VARCHAR)
Find the total capacity of all dorms.,SELECT SUM(student_capacity) FROM dorm,CREATE TABLE dorm (student_capacity INTEGER)
Find the average age of all students living in the each city.,"SELECT AVG(age), city_code FROM student GROUP BY city_code","CREATE TABLE student (city_code VARCHAR, age INTEGER)"
Find the average and total capacity of dorms for the students with gender X.,"SELECT AVG(student_capacity), SUM(student_capacity) FROM dorm WHERE gender = 'X'","CREATE TABLE dorm (student_capacity INTEGER, gender VARCHAR)"
Find the number of dorms that have some amenity.,SELECT COUNT(DISTINCT dormid) FROM has_amenity,CREATE TABLE has_amenity (dormid VARCHAR)
Find the name of dorms that do not have any amenity,SELECT dorm_name FROM dorm WHERE NOT dormid IN (SELECT dormid FROM has_amenity),"CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dorm_name VARCHAR, dormid VARCHAR)"
Find the number of distinct gender for dorms.,SELECT COUNT(DISTINCT gender) FROM dorm,CREATE TABLE dorm (gender VARCHAR)
Find the capacity and gender type of the dorm whose name has substring ‘Donor’.,"SELECT student_capacity, gender FROM dorm WHERE dorm_name LIKE '%Donor%'","CREATE TABLE dorm (student_capacity VARCHAR, gender VARCHAR, dorm_name VARCHAR)"
Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.,"SELECT dorm_name, gender FROM dorm WHERE student_capacity > 300 OR student_capacity < 100","CREATE TABLE dorm (dorm_name VARCHAR, gender VARCHAR, student_capacity VARCHAR)"
Find the numbers of different majors and cities.,"SELECT COUNT(DISTINCT major), COUNT(DISTINCT city_code) FROM student","CREATE TABLE student (major VARCHAR, city_code VARCHAR)"
Find the name of dorms which have both TV Lounge and Study Room as amenities.,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' INTERSECT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room',"CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)"
Find the name of dorms which have TV Lounge but no Study Room as amenity.,SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'Study Room',"CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)"
Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.,SELECT lname FROM student WHERE sex = 'F' AND city_code = 'BAL' UNION SELECT lname FROM student WHERE sex = 'M' AND age < 20,"CREATE TABLE student (lname VARCHAR, sex VARCHAR, city_code VARCHAR, age VARCHAR)"
Find the name of the dorm with the largest capacity.,SELECT dorm_name FROM dorm ORDER BY student_capacity DESC LIMIT 1,"CREATE TABLE dorm (dorm_name VARCHAR, student_capacity VARCHAR)"
List in alphabetic order all different amenities.,SELECT amenity_name FROM dorm_amenity ORDER BY amenity_name,CREATE TABLE dorm_amenity (amenity_name VARCHAR)
Find the code of city where most of students are living in.,SELECT city_code FROM student GROUP BY city_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE student (city_code VARCHAR)
Find the first and last name of students whose age is younger than the average age.,"SELECT fname, lname FROM student WHERE age < (SELECT AVG(age) FROM student)","CREATE TABLE student (fname VARCHAR, lname VARCHAR, age INTEGER)"
"List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.","SELECT fname, lname FROM student WHERE city_code <> 'HKG' ORDER BY age","CREATE TABLE student (fname VARCHAR, lname VARCHAR, city_code VARCHAR, age VARCHAR)"
"List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid = T1.amenid JOIN dorm AS T3 ON T2.dormid = T3.dormid WHERE T3.dorm_name = 'Anonymous Donor Hall' ORDER BY T1.amenity_name,"CREATE TABLE has_amenity (amenid VARCHAR, dormid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)"
Find the number of dorms and total capacity for each gender.,"SELECT COUNT(*), SUM(student_capacity), gender FROM dorm GROUP BY gender","CREATE TABLE dorm (gender VARCHAR, student_capacity INTEGER)"
Find the average and oldest age for students with different sex.,"SELECT AVG(age), MAX(age), sex FROM student GROUP BY sex","CREATE TABLE student (sex VARCHAR, age INTEGER)"
Find the number of students in each major.,"SELECT COUNT(*), major FROM student GROUP BY major",CREATE TABLE student (major VARCHAR)
Find the number and average age of students living in each city.,"SELECT COUNT(*), AVG(age), city_code FROM student GROUP BY city_code","CREATE TABLE student (city_code VARCHAR, age INTEGER)"
Find the average age and number of male students (with sex M) from each city.,"SELECT COUNT(*), AVG(age), city_code FROM student WHERE sex = 'M' GROUP BY city_code","CREATE TABLE student (city_code VARCHAR, age INTEGER, sex VARCHAR)"
Find the number of students for the cities where have more than one student.,"SELECT COUNT(*), city_code FROM student GROUP BY city_code HAVING COUNT(*) > 1",CREATE TABLE student (city_code VARCHAR)
Find the first and last name of students who are not in the largest major.,"SELECT fname, lname FROM student WHERE major <> (SELECT major FROM student GROUP BY major ORDER BY COUNT(*) DESC LIMIT 1)","CREATE TABLE student (fname VARCHAR, lname VARCHAR, major VARCHAR)"
Find the number of students whose age is older than the average age for each gender.,"SELECT COUNT(*), sex FROM student WHERE age > (SELECT AVG(age) FROM student) GROUP BY sex","CREATE TABLE student (sex VARCHAR, age INTEGER)"
Find the average age of students living in each dorm and the name of dorm.,"SELECT AVG(T1.age), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name","CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR)"
Find the number of amenities for each of the dorms that can accommodate more than 100 students.,"SELECT COUNT(*), T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid WHERE T1.student_capacity > 100 GROUP BY T1.dormid","CREATE TABLE dorm (dormid VARCHAR, student_capacity INTEGER); CREATE TABLE has_amenity (dormid VARCHAR)"
Find the number of students who is older than 20 in each dorm.,"SELECT COUNT(*), T3.dorm_name FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name","CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR, age INTEGER)"
Find the first name of students who are living in the Smith Hall.,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall',"CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)"
Find the average age of students who are living in the dorm with the largest capacity.,SELECT AVG(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.student_capacity = (SELECT MAX(student_capacity) FROM dorm),"CREATE TABLE dorm (student_capacity INTEGER); CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, student_capacity INTEGER)"
Find the total number of students living in the male dorm (with gender M).,SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.gender = 'M',"CREATE TABLE dorm (dormid VARCHAR, gender VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR)"
Find the number of female students (with F sex) living in Smith Hall,SELECT COUNT(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T3.dorm_name = 'Smith Hall' AND T1.sex = 'F',"CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (stuid VARCHAR, sex VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)"
Find the name of amenities Smith Hall dorm have.,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall',"CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)"
Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T1.dorm_name = 'Smith Hall' ORDER BY T3.amenity_name,"CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dormid VARCHAR, dorm_name VARCHAR)"
Find the name of amenity that is most common in all dorms.,SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid = T2.amenid GROUP BY T2.amenid ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR); CREATE TABLE has_amenity (amenid VARCHAR)"
Find the first name of students who are living in the dorm that has most number of amenities.,SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid = T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid = T5.amenid GROUP BY T3.dormid ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE dorm_amenity (amenid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm (dormid VARCHAR); CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR)"
Find the name and capacity of the dorm with least number of amenities.,"SELECT T1.dorm_name, T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid GROUP BY T2.dormid ORDER BY COUNT(*) LIMIT 1","CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR); CREATE TABLE dorm (dorm_name VARCHAR, student_capacity VARCHAR, dormid VARCHAR)"
Find the name of dorms that do not have amenity TV Lounge.,SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid WHERE T3.amenity_name = 'TV Lounge',"CREATE TABLE dorm (dorm_name VARCHAR, dormid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm (dorm_name VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)"
Find the first and last name of students who are living in the dorms that have amenity TV Lounge.,"SELECT T1.fname, T1.lname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')","CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE student (fname VARCHAR, lname VARCHAR, stuid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)"
Find the first name and age of students who are living in the dorms that do not have amenity TV Lounge.,"SELECT T1.fname, T1.age FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid WHERE NOT T2.dormid IN (SELECT T3.dormid FROM has_amenity AS T3 JOIN dorm_amenity AS T4 ON T3.amenid = T4.amenid WHERE T4.amenity_name = 'TV Lounge')","CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE lives_in (stuid VARCHAR, dormid VARCHAR); CREATE TABLE dorm_amenity (amenid VARCHAR, amenity_name VARCHAR)"
Find the name of amenities of the dorm where the student with last name Smith is living in.,SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid = T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid = T3.amenid JOIN lives_in AS T4 ON T4.dormid = T1.dormid JOIN student AS T5 ON T5.stuid = T4.stuid WHERE T5.lname = 'Smith',"CREATE TABLE student (stuid VARCHAR, lname VARCHAR); CREATE TABLE dorm (dormid VARCHAR); CREATE TABLE lives_in (dormid VARCHAR, stuid VARCHAR); CREATE TABLE has_amenity (dormid VARCHAR, amenid VARCHAR); CREATE TABLE dorm_amenity (amenity_name VARCHAR, amenid VARCHAR)"
"Find the emails and phone numbers of all the customers, ordered by email address and phone number.","SELECT email_address, phone_number FROM customers ORDER BY email_address, phone_number","CREATE TABLE customers (email_address VARCHAR, phone_number VARCHAR)"
"Which city has the least number of customers whose type code is ""Good Credit Rating""?","SELECT town_city FROM customers WHERE customer_type_code = ""Good Credit Rating"" GROUP BY town_city ORDER BY COUNT(*) LIMIT 1","CREATE TABLE customers (town_city VARCHAR, customer_type_code VARCHAR)"
List the name of all products along with the number of complaints that they have received.,"SELECT t1.product_name, COUNT(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_name","CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_id VARCHAR)"
Find the emails of customers who has filed a complaints of the product with the most complaints.,SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE customers (email_address VARCHAR, customer_id VARCHAR); CREATE TABLE complaints (customer_id VARCHAR)"
Which products has been complained by the customer who has filed least amount of complaints?,SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id = t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_id VARCHAR)"
What is the phone number of the customer who has filed the most recent complaint?,SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1,"CREATE TABLE customers (phone_number VARCHAR, customer_id VARCHAR); CREATE TABLE complaints (customer_id VARCHAR, date_complaint_raised VARCHAR)"
Find the email and phone number of the customers who have never filed a complaint before.,"SELECT email_address, phone_number FROM customers WHERE NOT customer_id IN (SELECT customer_id FROM complaints)","CREATE TABLE complaints (email_address VARCHAR, phone_number VARCHAR, customer_id VARCHAR); CREATE TABLE customers (email_address VARCHAR, phone_number VARCHAR, customer_id VARCHAR)"
Find the phone number of all the customers and staff.,SELECT phone_number FROM customers UNION SELECT phone_number FROM staff,CREATE TABLE staff (phone_number VARCHAR); CREATE TABLE customers (phone_number VARCHAR)
"What is the description of the product named ""Chocolate""?","SELECT product_description FROM products WHERE product_name = ""Chocolate""","CREATE TABLE products (product_description VARCHAR, product_name VARCHAR)"
Find the name and category of the most expensive product.,"SELECT product_name, product_category_code FROM products ORDER BY product_price DESC LIMIT 1","CREATE TABLE products (product_name VARCHAR, product_category_code VARCHAR, product_price VARCHAR)"
Find the prices of products which has never received a single complaint.,SELECT product_price FROM products WHERE NOT product_id IN (SELECT product_id FROM complaints),"CREATE TABLE products (product_price VARCHAR, product_id VARCHAR); CREATE TABLE complaints (product_price VARCHAR, product_id VARCHAR)"
What is the average price of the products for each category?,"SELECT AVG(product_price), product_category_code FROM products GROUP BY product_category_code","CREATE TABLE products (product_category_code VARCHAR, product_price INTEGER)"
Find the last name of the staff member who processed the complaint of the cheapest product.,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id JOIN products AS t3 ON t2.product_id = t3.product_id ORDER BY t3.product_price LIMIT 1,"CREATE TABLE products (product_id VARCHAR, product_price VARCHAR); CREATE TABLE complaints (staff_id VARCHAR, product_id VARCHAR); CREATE TABLE staff (last_name VARCHAR, staff_id VARCHAR)"
Which complaint status has more than 3 records on file?,SELECT complaint_status_code FROM complaints GROUP BY complaint_status_code HAVING COUNT(*) > 3,CREATE TABLE complaints (complaint_status_code VARCHAR)
"Find the last name of the staff whose email address contains ""wrau"".","SELECT last_name FROM staff WHERE email_address LIKE ""%wrau%""","CREATE TABLE staff (last_name VARCHAR, email_address VARCHAR)"
How many customers are there in the customer type with the most customers?,SELECT COUNT(*) FROM customers GROUP BY customer_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE customers (customer_type_code VARCHAR)
What is the last name of the staff who has handled the first ever complaint?,SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1,"CREATE TABLE staff (last_name VARCHAR, staff_id VARCHAR); CREATE TABLE complaints (staff_id VARCHAR, date_complaint_raised VARCHAR)"
How many distinct complaint type codes are there in the database?,SELECT COUNT(DISTINCT complaint_type_code) FROM complaints,CREATE TABLE complaints (complaint_type_code VARCHAR)
"Find the address line 1 and 2 of the customer with email ""vbogisich@example.org"".","SELECT address_line_1, address_line_2 FROM customers WHERE email_address = ""vbogisich@example.org""","CREATE TABLE customers (address_line_1 VARCHAR, address_line_2 VARCHAR, email_address VARCHAR)"
Find the number of complaints with Product Failure type for each complaint status.,"SELECT complaint_status_code, COUNT(*) FROM complaints WHERE complaint_type_code = ""Product Failure"" GROUP BY complaint_status_code","CREATE TABLE complaints (complaint_status_code VARCHAR, complaint_type_code VARCHAR)"
What is first names of the top 5 staff who have handled the greatest number of complaints?,SELECT t1.first_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id = t2.staff_id GROUP BY t2.staff_id ORDER BY COUNT(*) LIMIT 5,"CREATE TABLE complaints (staff_id VARCHAR); CREATE TABLE staff (first_name VARCHAR, staff_id VARCHAR)"
Which state has the most customers?,SELECT state FROM customers GROUP BY state ORDER BY COUNT(*) LIMIT 1,CREATE TABLE customers (state VARCHAR)
How many submissions are there?,SELECT COUNT(*) FROM submission,CREATE TABLE submission (Id VARCHAR)
List the authors of submissions in ascending order of scores.,SELECT Author FROM submission ORDER BY Scores,"CREATE TABLE submission (Author VARCHAR, Scores VARCHAR)"
What are the authors of submissions and their colleges?,"SELECT Author, College FROM submission","CREATE TABLE submission (Author VARCHAR, College VARCHAR)"
"Show the names of authors from college ""Florida"" or ""Temple""","SELECT Author FROM submission WHERE College = ""Florida"" OR College = ""Temple""","CREATE TABLE submission (Author VARCHAR, College VARCHAR)"
What is the average score of submissions?,SELECT AVG(Scores) FROM submission,CREATE TABLE submission (Scores INTEGER)
What is the author of the submission with the highest score?,SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1,"CREATE TABLE submission (Author VARCHAR, Scores VARCHAR)"
Show different colleges along with the number of authors of submission from each college.,"SELECT College, COUNT(*) FROM submission GROUP BY College",CREATE TABLE submission (College VARCHAR)
Show the most common college of authors of submissions.,SELECT College FROM submission GROUP BY College ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE submission (College VARCHAR)
Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.,SELECT College FROM submission WHERE Scores > 90 INTERSECT SELECT College FROM submission WHERE Scores < 80,"CREATE TABLE submission (College VARCHAR, Scores INTEGER)"
Show the authors of submissions and the acceptance results of their submissions.,"SELECT T2.Author, T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID","CREATE TABLE acceptance (Result VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR)"
Show the result of the submission with the highest score.,SELECT T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T2.Scores DESC LIMIT 1,"CREATE TABLE acceptance (Result VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Submission_ID VARCHAR, Scores VARCHAR)"
Show each author and the number of workshops they submitted to.,"SELECT T2.Author, COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author","CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE acceptance (workshop_id VARCHAR, Submission_ID VARCHAR)"
Show the authors who have submissions to more than one workshop.,SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id) > 1,"CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE acceptance (Submission_ID VARCHAR, workshop_id VARCHAR)"
Show the date and venue of each workshop in ascending alphabetical order of the venue.,"SELECT Date, Venue FROM workshop ORDER BY Venue","CREATE TABLE workshop (Date VARCHAR, Venue VARCHAR)"
List the authors who do not have submission to any workshop.,SELECT Author FROM submission WHERE NOT Submission_ID IN (SELECT Submission_ID FROM acceptance),"CREATE TABLE acceptance (Author VARCHAR, Submission_ID VARCHAR); CREATE TABLE submission (Author VARCHAR, Submission_ID VARCHAR)"
Find the number of investors in total.,SELECT COUNT(*) FROM INVESTORS,CREATE TABLE INVESTORS (Id VARCHAR)
Show all investor details.,SELECT Investor_details FROM INVESTORS,CREATE TABLE INVESTORS (Investor_details VARCHAR)
Show all distinct lot details.,SELECT DISTINCT lot_details FROM LOTS,CREATE TABLE LOTS (lot_details VARCHAR)
Show the maximum amount of transaction.,SELECT MAX(amount_of_transaction) FROM TRANSACTIONS,CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER)
Show all date and share count of transactions.,"SELECT date_of_transaction, share_count FROM TRANSACTIONS","CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR)"
What is the total share of transactions?,SELECT SUM(share_count) FROM TRANSACTIONS,CREATE TABLE TRANSACTIONS (share_count INTEGER)
Show all transaction ids with transaction code 'PUR'.,SELECT transaction_id FROM TRANSACTIONS WHERE transaction_type_code = 'PUR',"CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, transaction_type_code VARCHAR)"
"Show all dates of transactions whose type code is ""SALE"".","SELECT date_of_transaction FROM TRANSACTIONS WHERE transaction_type_code = ""SALE""","CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_type_code VARCHAR)"
"Show the average amount of transactions with type code ""SALE"".","SELECT AVG(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = ""SALE""","CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER, transaction_type_code VARCHAR)"
"Show the description of transaction type with code ""PUR"".","SELECT transaction_type_description FROM Ref_Transaction_Types WHERE transaction_type_code = ""PUR""","CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR)"
"Show the minimum amount of transactions whose type code is ""PUR"" and whose share count is bigger than 50.","SELECT MIN(amount_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = ""PUR"" AND share_count > 50","CREATE TABLE TRANSACTIONS (amount_of_transaction INTEGER, transaction_type_code VARCHAR, share_count VARCHAR)"
Show the maximum share count of transactions where the amount is smaller than 10000,SELECT MAX(share_count) FROM TRANSACTIONS WHERE amount_of_transaction < 10000,"CREATE TABLE TRANSACTIONS (share_count INTEGER, amount_of_transaction INTEGER)"
Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000,"CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR, amount_of_transaction VARCHAR)"
Show the transaction type descriptions and dates if the share count is smaller than 10.,"SELECT T1.transaction_type_description, T2.date_of_transaction FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code WHERE T2.share_count < 10","CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR); CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_type_code VARCHAR, share_count INTEGER)"
Show details of all investors if they make any transaction with share count greater than 100.,SELECT T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100,"CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)"
How many distinct transaction types are used in the transactions?,SELECT COUNT(DISTINCT transaction_type_code) FROM TRANSACTIONS,CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)
Return the lot details and investor ids.,"SELECT lot_details, investor_id FROM LOTS","CREATE TABLE LOTS (lot_details VARCHAR, investor_id VARCHAR)"
"Return the lot details of lots that belong to investors with details ""l""?","SELECT T2.lot_details FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = ""l""","CREATE TABLE LOTS (lot_details VARCHAR, investor_id VARCHAR); CREATE TABLE INVESTORS (investor_id VARCHAR, Investor_details VARCHAR)"
What are the purchase details of transactions with amount bigger than 10000?,SELECT T1.purchase_details FROM PURCHASES AS T1 JOIN TRANSACTIONS AS T2 ON T1.purchase_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction > 10000,"CREATE TABLE PURCHASES (purchase_details VARCHAR, purchase_transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, amount_of_transaction INTEGER)"
What are the sale details and dates of transactions with amount smaller than 3000?,"SELECT T1.sales_details, T2.date_of_transaction FROM SALES AS T1 JOIN TRANSACTIONS AS T2 ON T1.sales_transaction_id = T2.transaction_id WHERE T2.amount_of_transaction < 3000","CREATE TABLE SALES (sales_details VARCHAR, sales_transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, transaction_id VARCHAR, amount_of_transaction INTEGER)"
What are the lot details of lots associated with transactions with share count smaller than 50?,SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count < 50,"CREATE TABLE LOTS (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE TRANSACTIONS_LOTS (transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, share_count INTEGER)"
"What are the lot details of lots associated with transactions whose share count is bigger than 100 and whose type code is ""PUR""?","SELECT T1.lot_details FROM LOTS AS T1 JOIN TRANSACTIONS_LOTS AS T2 ON T1.lot_id = T2.transaction_id JOIN TRANSACTIONS AS T3 ON T2.transaction_id = T3.transaction_id WHERE T3.share_count > 100 AND T3.transaction_type_code = ""PUR""","CREATE TABLE LOTS (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE TRANSACTIONS_LOTS (transaction_id VARCHAR); CREATE TABLE TRANSACTIONS (transaction_id VARCHAR, share_count VARCHAR, transaction_type_code VARCHAR)"
Show the average transaction amount for different transaction types.,"SELECT transaction_type_code, AVG(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code","CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR, amount_of_transaction INTEGER)"
Show the maximum and minimum share count of different transaction types.,"SELECT transaction_type_code, MAX(share_count), MIN(share_count) FROM TRANSACTIONS GROUP BY transaction_type_code","CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR, share_count INTEGER)"
Show the average share count of transactions for different investors.,"SELECT investor_id, AVG(share_count) FROM TRANSACTIONS GROUP BY investor_id","CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER)"
"Show the average share count of transactions each each investor, ordered by average share count.","SELECT investor_id, AVG(share_count) FROM TRANSACTIONS GROUP BY investor_id ORDER BY AVG(share_count)","CREATE TABLE TRANSACTIONS (investor_id VARCHAR, share_count INTEGER)"
Show the average amount of transactions for different investors.,"SELECT investor_id, AVG(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id","CREATE TABLE TRANSACTIONS (investor_id VARCHAR, amount_of_transaction INTEGER)"
Show the average amount of transactions for different lots.,"SELECT T2.lot_id, AVG(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id","CREATE TABLE TRANSACTIONS (transaction_id VARCHAR); CREATE TABLE Transactions_Lots (lot_id VARCHAR, transaction_id VARCHAR)"
"Show the average amount of transactions for different lots, ordered by average amount of transactions.","SELECT T2.lot_id, AVG(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY AVG(amount_of_transaction)","CREATE TABLE TRANSACTIONS (transaction_id VARCHAR); CREATE TABLE Transactions_Lots (lot_id VARCHAR, transaction_id VARCHAR)"
"Show the number of transactions with transaction type code ""SALE"" for different investors if it is larger than 0.","SELECT investor_id, COUNT(*) FROM TRANSACTIONS WHERE transaction_type_code = ""SALE"" GROUP BY investor_id","CREATE TABLE TRANSACTIONS (investor_id VARCHAR, transaction_type_code VARCHAR)"
Show the number of transactions for different investors.,"SELECT investor_id, COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",CREATE TABLE TRANSACTIONS (investor_id VARCHAR)
Show the transaction type code that occurs the fewest times.,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) LIMIT 1,CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)
Show the transaction type code that occurs the most frequently.,SELECT transaction_type_code FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR)
Show the description of the transaction type that occurs most frequently.,SELECT T1.transaction_type_description FROM Ref_Transaction_Types AS T1 JOIN TRANSACTIONS AS T2 ON T1.transaction_type_code = T2.transaction_type_code GROUP BY T1.transaction_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE TRANSACTIONS (transaction_type_code VARCHAR); CREATE TABLE Ref_Transaction_Types (transaction_type_description VARCHAR, transaction_type_code VARCHAR)"
Show the id and details of the investor that has the largest number of transactions.,"SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)"
Show the id and details for the investors who have the top 3 number of transactions.,"SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)"
Show the ids of the investors who have at least two transactions.,SELECT T2.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id GROUP BY T2.investor_id HAVING COUNT(*) >= 2,CREATE TABLE TRANSACTIONS (investor_id VARCHAR); CREATE TABLE INVESTORS (investor_id VARCHAR)
"Show the ids and details of the investors who have at least two transactions with type code ""SALE"".","SELECT T2.investor_id, T1.Investor_details FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = ""SALE"" GROUP BY T2.investor_id HAVING COUNT(*) >= 2","CREATE TABLE TRANSACTIONS (investor_id VARCHAR, transaction_type_code VARCHAR); CREATE TABLE INVESTORS (Investor_details VARCHAR, investor_id VARCHAR)"
What are the dates of transactions with at least 100 share count or amount bigger than 100?,SELECT date_of_transaction FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100,"CREATE TABLE TRANSACTIONS (date_of_transaction VARCHAR, share_count VARCHAR, amount_of_transaction VARCHAR)"
What are the details of all sales and purchases?,SELECT sales_details FROM sales UNION SELECT purchase_details FROM purchases,"CREATE TABLE purchases (sales_details VARCHAR, purchase_details VARCHAR); CREATE TABLE sales (sales_details VARCHAR, purchase_details VARCHAR)"
What are the details of the lots which are not used in any transactions?,SELECT lot_details FROM Lots EXCEPT SELECT T1.lot_details FROM Lots AS T1 JOIN transactions_lots AS T2 ON T1.lot_id = T2.lot_id,"CREATE TABLE Lots (lot_details VARCHAR, lot_id VARCHAR); CREATE TABLE Lots (lot_details VARCHAR); CREATE TABLE transactions_lots (lot_id VARCHAR)"
How many available hotels are there in total?,SELECT COUNT(*) FROM HOTELS,CREATE TABLE HOTELS (Id VARCHAR)
What are the price ranges of hotels?,SELECT price_range FROM HOTELS,CREATE TABLE HOTELS (price_range VARCHAR)
Show all distinct location names.,SELECT DISTINCT Location_Name FROM LOCATIONS,CREATE TABLE LOCATIONS (Location_Name VARCHAR)
Show the names and details of all the staff members.,"SELECT Name, Other_Details FROM Staff","CREATE TABLE Staff (Name VARCHAR, Other_Details VARCHAR)"
Show details of all visitors.,SELECT Tourist_Details FROM VISITORS,CREATE TABLE VISITORS (Tourist_Details VARCHAR)
Show the price ranges of hotels with 5 star ratings.,"SELECT price_range FROM HOTELS WHERE star_rating_code = ""5""","CREATE TABLE HOTELS (price_range VARCHAR, star_rating_code VARCHAR)"
Show the average price range of hotels that have 5 star ratings and allow pets.,"SELECT AVG(price_range) FROM HOTELS WHERE star_rating_code = ""5"" AND pets_allowed_yn = 1","CREATE TABLE HOTELS (price_range INTEGER, star_rating_code VARCHAR, pets_allowed_yn VARCHAR)"
"What is the address of the location ""UK Gallery""?","SELECT Address FROM LOCATIONS WHERE Location_Name = ""UK Gallery""","CREATE TABLE LOCATIONS (Address VARCHAR, Location_Name VARCHAR)"
What is the detail of the location UK Gallery?,"SELECT Other_Details FROM LOCATIONS WHERE Location_Name = ""UK Gallery""","CREATE TABLE LOCATIONS (Other_Details VARCHAR, Location_Name VARCHAR)"
"Which location names contain the word ""film""?","SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE ""%film%""",CREATE TABLE LOCATIONS (Location_Name VARCHAR)
How many distinct names are associated with all the photos?,SELECT COUNT(DISTINCT Name) FROM PHOTOS,CREATE TABLE PHOTOS (Name VARCHAR)
What are the distinct visit dates?,SELECT DISTINCT Visit_Date FROM VISITS,CREATE TABLE VISITS (Visit_Date VARCHAR)
What are the names of the tourist attractions that can be accessed by bus?,"SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = ""bus""","CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, How_to_Get_There VARCHAR)"
What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?,"SELECT Name, Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There = ""bus"" OR How_to_Get_There = ""walk""","CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, Opening_Hours VARCHAR, How_to_Get_There VARCHAR)"
What are the star rating descriptions of the hotels with price above 10000?,SELECT T2.star_rating_description FROM HOTELS AS T1 JOIN Ref_Hotel_Star_Ratings AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.price_range > 10000,"CREATE TABLE HOTELS (star_rating_code VARCHAR, price_range INTEGER); CREATE TABLE Ref_Hotel_Star_Ratings (star_rating_description VARCHAR, star_rating_code VARCHAR)"
What are the details and opening hours of the museums?,"SELECT T1.Museum_Details, T2.Opening_Hours FROM MUSEUMS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Museum_ID = T2.Tourist_Attraction_ID","CREATE TABLE TOURIST_ATTRACTIONS (Opening_Hours VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE MUSEUMS (Museum_Details VARCHAR, Museum_ID VARCHAR)"
"What is the name of the tourist attraction that is associated with the photo ""game1""?","SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = ""game1""","CREATE TABLE TOURIST_ATTRACTIONS (Name VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE PHOTOS (Tourist_Attraction_ID VARCHAR, Name VARCHAR)"
"What are the names and descriptions of the photos taken at the tourist attraction ""film festival""?","SELECT T1.Name, T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = ""film festival""","CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, Name VARCHAR); CREATE TABLE PHOTOS (Name VARCHAR, Description VARCHAR, Tourist_Attraction_ID VARCHAR)"
What are the details and ways to get to tourist attractions related to royal family?,"SELECT T1.Royal_Family_Details, T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID = T2.Tourist_Attraction_ID","CREATE TABLE TOURIST_ATTRACTIONS (How_to_Get_There VARCHAR, Tourist_Attraction_ID VARCHAR); CREATE TABLE ROYAL_FAMILY (Royal_Family_Details VARCHAR, Royal_Family_ID VARCHAR)"
What are the details of the shops that can be accessed by walk?,"SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = ""walk""","CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE SHOPS (Shop_Details VARCHAR, Shop_ID VARCHAR)"
"What is the name of the staff that is in charge of the attraction named ""US museum""?","SELECT T1.Name FROM STAFF AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Name = ""US museum""","CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, Name VARCHAR); CREATE TABLE STAFF (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
What are the details of the markets that can be accessed by walk or bus?,"SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID = T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There = ""walk"" OR T2.How_to_Get_There = ""bus""","CREATE TABLE Street_Markets (Market_Details VARCHAR, Market_ID VARCHAR); CREATE TABLE TOURIST_ATTRACTIONS (Tourist_Attraction_ID VARCHAR, How_to_Get_There VARCHAR)"
What are the visit date and details of the visitor whose detail is 'Vincent'?,"SELECT T2.Visit_Date, T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID = T2.Tourist_ID WHERE T1.Tourist_Details = ""Vincent""","CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE VISITS (Visit_Date VARCHAR, Visit_Details VARCHAR, Tourist_ID VARCHAR)"
Which tourist attractions does the visitor with detail 'Vincent' visit?,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID = T3.Tourist_ID WHERE T3.Tourist_Details = ""Vincent""","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?,"SELECT T1.Name, T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = ""Vincent"" OR T2.Tourist_Details = ""Vivian""","CREATE TABLE VISITORS (Tourist_ID VARCHAR, Tourist_Details VARCHAR); CREATE TABLE VISITS (Visit_Date VARCHAR, Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
Show the average price of hotels for each star rating code.,"SELECT star_rating_code, AVG(price_range) FROM HOTELS GROUP BY star_rating_code","CREATE TABLE HOTELS (star_rating_code VARCHAR, price_range INTEGER)"
Show the average price of hotels for different pet policy.,"SELECT pets_allowed_yn, AVG(price_range) FROM HOTELS GROUP BY pets_allowed_yn","CREATE TABLE HOTELS (pets_allowed_yn VARCHAR, price_range INTEGER)"
"Show the id and star rating of each hotel, ordered by its price from low to high.","SELECT hotel_id, star_rating_code FROM HOTELS ORDER BY price_range","CREATE TABLE HOTELS (hotel_id VARCHAR, star_rating_code VARCHAR, price_range VARCHAR)"
Show the details of the top 3 most expensive hotels.,SELECT other_hotel_details FROM HOTELS ORDER BY price_range DESC LIMIT 3,"CREATE TABLE HOTELS (other_hotel_details VARCHAR, price_range VARCHAR)"
Show the details and star ratings of the 3 least expensive hotels.,"SELECT other_hotel_details, star_rating_code FROM HOTELS ORDER BY price_range LIMIT 3","CREATE TABLE HOTELS (other_hotel_details VARCHAR, star_rating_code VARCHAR, price_range VARCHAR)"
Show the transportation method most people choose to get to tourist attractions.,SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Tourist_Attractions (How_to_Get_There VARCHAR)
Show the description and code of the attraction type most tourist attractions belong to.,"SELECT T1.Attraction_Type_Description, T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code = T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Ref_Attraction_Types (Attraction_Type_Description VARCHAR, Attraction_Type_Code VARCHAR); CREATE TABLE Tourist_Attractions (Attraction_Type_Code VARCHAR)"
Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.,"SELECT How_to_Get_There, COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",CREATE TABLE Tourist_Attractions (How_to_Get_There VARCHAR)
"Show different tourist attractions' names, ids, and the corresponding number of visits.","SELECT T1.Name, T2.Tourist_Attraction_ID, COUNT(*) FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
Show the names and ids of tourist attractions that are visited at least two times.,"SELECT T1.Name, T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) >= 2","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
Show the names and ids of tourist attractions that are visited at most once.,"SELECT T1.Name, T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING COUNT(*) <= 1","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?,"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = ""660 Shea Crescent"" OR T2.How_to_Get_There = ""walk""","CREATE TABLE Tourist_Attractions (Name VARCHAR, Location_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE Locations (Location_ID VARCHAR, Address VARCHAR)"
What are the names of the tourist attractions that have parking or shopping as their feature details?,SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id = T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID = T3.Feature_ID WHERE T3.feature_Details = 'shopping',"CREATE TABLE Tourist_Attraction_Features (tourist_attraction_id VARCHAR, Feature_ID VARCHAR); CREATE TABLE Features (Feature_ID VARCHAR, feature_Details VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, tourist_attraction_id VARCHAR)"
What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?,"SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = ""254 Ottilie Junction"" OR T2.How_to_Get_There = ""bus""","CREATE TABLE Tourist_Attractions (Name VARCHAR, Location_ID VARCHAR, How_to_Get_There VARCHAR); CREATE TABLE Locations (Location_ID VARCHAR, Address VARCHAR)"
What are the names of the tourist attractions Vincent and Marcelle visit?,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = ""Vincent"" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = ""Marcelle""","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_Details VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
What are the names of tourist attraction that Alison visited but Rosalind did not visit?,"SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = ""Alison"" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID AND T2.Tourist_ID = T3.Tourist_ID WHERE T2.Tourist_Details = ""Rosalind""","CREATE TABLE VISITS (Tourist_Attraction_ID VARCHAR, Tourist_ID VARCHAR); CREATE TABLE VISITORS (Tourist_Details VARCHAR, Tourist_ID VARCHAR); CREATE TABLE Tourist_Attractions (Name VARCHAR, Tourist_Attraction_ID VARCHAR)"
How many tourists did not make any visit?,SELECT COUNT(*) FROM Visitors WHERE NOT Tourist_ID IN (SELECT Tourist_ID FROM Visits),CREATE TABLE Visitors (Tourist_ID VARCHAR); CREATE TABLE Visits (Tourist_ID VARCHAR)
How many video games exist?,SELECT COUNT(*) FROM Video_games,CREATE TABLE Video_games (Id VARCHAR)
How many video game types exist?,SELECT COUNT(DISTINCT gtype) FROM Video_games,CREATE TABLE Video_games (gtype VARCHAR)
Show all video game types.,SELECT DISTINCT gtype FROM Video_games,CREATE TABLE Video_games (gtype VARCHAR)
Show all video games and their types in the order of their names.,"SELECT gname, gtype FROM Video_games ORDER BY gname","CREATE TABLE Video_games (gname VARCHAR, gtype VARCHAR)"
Show all video games with type Collectible card game.,"SELECT gname FROM Video_games WHERE gtype = ""Collectible card game""","CREATE TABLE Video_games (gname VARCHAR, gtype VARCHAR)"
What is the type of video game Call of Destiny.,"SELECT gtype FROM Video_games WHERE gname = ""Call of Destiny""","CREATE TABLE Video_games (gtype VARCHAR, gname VARCHAR)"
How many video games have type Massively multiplayer online game?,"SELECT COUNT(*) FROM Video_games WHERE gtype = ""Massively multiplayer online game""",CREATE TABLE Video_games (gtype VARCHAR)
Show all video game types and the number of video games in each type.,"SELECT gtype, COUNT(*) FROM Video_games GROUP BY gtype",CREATE TABLE Video_games (gtype VARCHAR)
Which game type has most number of games?,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Video_games (gtype VARCHAR)
Which game type has least number of games?,SELECT gtype FROM Video_games GROUP BY gtype ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Video_games (gtype VARCHAR)
Show ids for all students who live in CHI.,"SELECT StuID FROM Student WHERE city_code = ""CHI""","CREATE TABLE Student (StuID VARCHAR, city_code VARCHAR)"
Show ids for all students who have advisor 1121.,SELECT StuID FROM Student WHERE Advisor = 1121,"CREATE TABLE Student (StuID VARCHAR, Advisor VARCHAR)"
Show first name for all students with major 600.,SELECT Fname FROM Student WHERE Major = 600,"CREATE TABLE Student (Fname VARCHAR, Major VARCHAR)"
"Show the average, minimum, and maximum age for different majors.","SELECT major, AVG(age), MIN(age), MAX(age) FROM Student GROUP BY major","CREATE TABLE Student (major VARCHAR, age INTEGER)"
Show all advisors who have at least two students.,SELECT advisor FROM Student GROUP BY advisor HAVING COUNT(*) >= 2,CREATE TABLE Student (advisor VARCHAR)
How many sports do we have?,SELECT COUNT(DISTINCT sportname) FROM Sportsinfo,CREATE TABLE Sportsinfo (sportname VARCHAR)
How many students play sports?,SELECT COUNT(DISTINCT StuID) FROM Sportsinfo,CREATE TABLE Sportsinfo (StuID VARCHAR)
List ids for all student who are on scholarship.,SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y',"CREATE TABLE Sportsinfo (StuID VARCHAR, onscholarship VARCHAR)"
Show last names for all student who are on scholarship.,SELECT T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.onscholarship = 'Y',"CREATE TABLE Student (Lname VARCHAR, StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR, onscholarship VARCHAR)"
How many games are played for all students?,SELECT SUM(gamesplayed) FROM Sportsinfo,CREATE TABLE Sportsinfo (gamesplayed INTEGER)
How many games are played for all football games by students on scholarship?,"SELECT SUM(gamesplayed) FROM Sportsinfo WHERE sportname = ""Football"" AND onscholarship = 'Y'","CREATE TABLE Sportsinfo (gamesplayed INTEGER, sportname VARCHAR, onscholarship VARCHAR)"
Show all sport name and the number of students.,"SELECT sportname, COUNT(*) FROM Sportsinfo GROUP BY sportname",CREATE TABLE Sportsinfo (sportname VARCHAR)
Show all student IDs with the number of sports and total number of games played,"SELECT StuID, COUNT(*), SUM(gamesplayed) FROM Sportsinfo GROUP BY StuID","CREATE TABLE Sportsinfo (StuID VARCHAR, gamesplayed INTEGER)"
Show all student IDs with more than total 10 hours per week on all sports played.,SELECT StuID FROM Sportsinfo GROUP BY StuID HAVING SUM(hoursperweek) > 10,"CREATE TABLE Sportsinfo (StuID VARCHAR, hoursperweek INTEGER)"
What is the first name and last name of the student who have most number of sports?,"SELECT T2.Fname, T2.Lname FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Student (Fname VARCHAR, Lname VARCHAR, StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)"
Which sport has most number of students on scholarship?,SELECT sportname FROM Sportsinfo WHERE onscholarship = 'Y' GROUP BY sportname ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Sportsinfo (sportname VARCHAR, onscholarship VARCHAR)"
Show student ids who don't have any sports.,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Sportsinfo,CREATE TABLE Sportsinfo (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)
Show student ids who are on scholarship and have major 600.,SELECT StuID FROM Student WHERE major = 600 INTERSECT SELECT StuID FROM Sportsinfo WHERE onscholarship = 'Y',"CREATE TABLE Sportsinfo (StuID VARCHAR, major VARCHAR, onscholarship VARCHAR); CREATE TABLE Student (StuID VARCHAR, major VARCHAR, onscholarship VARCHAR)"
Show student ids who are female and play football.,"SELECT StuID FROM Student WHERE sex = 'F' INTERSECT SELECT StuID FROM Sportsinfo WHERE sportname = ""Football""","CREATE TABLE Sportsinfo (StuID VARCHAR, sex VARCHAR, sportname VARCHAR); CREATE TABLE Student (StuID VARCHAR, sex VARCHAR, sportname VARCHAR)"
Show all male student ids who don't play football.,"SELECT StuID FROM Student WHERE sex = 'M' EXCEPT SELECT StuID FROM Sportsinfo WHERE sportname = ""Football""","CREATE TABLE Sportsinfo (StuID VARCHAR, sex VARCHAR, sportname VARCHAR); CREATE TABLE Student (StuID VARCHAR, sex VARCHAR, sportname VARCHAR)"
Show total hours per week and number of games played for student David Shieber.,"SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Fname = ""David"" AND T2.Lname = ""Shieber""","CREATE TABLE Student (StuID VARCHAR, Fname VARCHAR, Lname VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)"
Show total hours per week and number of games played for students under 20.,"SELECT SUM(hoursperweek), SUM(gamesplayed) FROM Sportsinfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.age < 20","CREATE TABLE Student (StuID VARCHAR, age INTEGER); CREATE TABLE Sportsinfo (StuID VARCHAR)"
How many students play video games?,SELECT COUNT(DISTINCT StuID) FROM Plays_games,CREATE TABLE Plays_games (StuID VARCHAR)
Show ids of students who don't play video game.,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Plays_games,CREATE TABLE Plays_games (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)
Show ids of students who play video game and play sports.,SELECT StuID FROM Sportsinfo INTERSECT SELECT StuID FROM Plays_games,CREATE TABLE Plays_games (StuID VARCHAR); CREATE TABLE Sportsinfo (StuID VARCHAR)
Show all game ids and the number of hours played.,"SELECT gameid, SUM(hours_played) FROM Plays_games GROUP BY gameid","CREATE TABLE Plays_games (gameid VARCHAR, hours_played INTEGER)"
Show all student ids and the number of hours played.,"SELECT Stuid, SUM(hours_played) FROM Plays_games GROUP BY Stuid","CREATE TABLE Plays_games (Stuid VARCHAR, hours_played INTEGER)"
Show the game name that has most number of hours played.,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid ORDER BY SUM(hours_played) DESC LIMIT 1,CREATE TABLE Plays_games (gameid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)
Show all game names played by at least 1000 hours.,SELECT gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid GROUP BY T1.gameid HAVING SUM(hours_played) >= 1000,CREATE TABLE Plays_games (gameid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)
Show all game names played by Linda Smith,"SELECT Gname FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.gameid = T2.gameid JOIN Student AS T3 ON T3.Stuid = T1.Stuid WHERE T3.Lname = ""Smith"" AND T3.Fname = ""Linda""","CREATE TABLE Student (Stuid VARCHAR, Lname VARCHAR, Fname VARCHAR); CREATE TABLE Plays_games (gameid VARCHAR, Stuid VARCHAR); CREATE TABLE Video_games (gameid VARCHAR)"
Find the last and first name of students who are playing Football or Lacrosse.,"SELECT T2.lname, T2.fname FROM SportsInfo AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T1.SportName = ""Football"" OR T1.SportName = ""Lacrosse""","CREATE TABLE SportsInfo (StuID VARCHAR, SportName VARCHAR); CREATE TABLE Student (lname VARCHAR, fname VARCHAR, StuID VARCHAR)"
Find the first name and age of the students who are playing both Football and Lacrosse.,"SELECT fname, age FROM Student WHERE StuID IN (SELECT StuID FROM Sportsinfo WHERE SportName = ""Football"" INTERSECT SELECT StuID FROM Sportsinfo WHERE SportName = ""Lacrosse"")","CREATE TABLE Student (fname VARCHAR, age VARCHAR, StuID VARCHAR, SportName VARCHAR); CREATE TABLE Sportsinfo (fname VARCHAR, age VARCHAR, StuID VARCHAR, SportName VARCHAR)"
Find the last name and gender of the students who are playing both Call of Destiny and Works of Widenius games.,"SELECT lname, sex FROM Student WHERE StuID IN (SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = ""Call of Destiny"" INTERSECT SELECT T1.StuID FROM Plays_games AS T1 JOIN Video_games AS T2 ON T1.GameID = T2.GameID WHERE T2.Gname = ""Works of Widenius"")","CREATE TABLE Plays_games (StuID VARCHAR, GameID VARCHAR); CREATE TABLE Student (lname VARCHAR, sex VARCHAR, StuID VARCHAR); CREATE TABLE Video_games (GameID VARCHAR, Gname VARCHAR)"
Find the name of all customers.,SELECT customer_name FROM customers,CREATE TABLE customers (customer_name VARCHAR)
What is the average amount of items ordered in each order?,SELECT AVG(order_quantity) FROM order_items,CREATE TABLE order_items (order_quantity INTEGER)
"What are the names of customers who use payment method ""Cash""?","SELECT customer_name FROM customers WHERE payment_method = ""Cash""","CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)"
"Find the ""date became customers"" of the customers whose ID is between 10 and 20.",SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20,"CREATE TABLE customers (date_became_customer VARCHAR, customer_id INTEGER)"
Which payment method is used by most customers?,SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE customers (payment_method VARCHAR)
What are the names of customers using the most popular payment method?,SELECT customer_name FROM customers WHERE payment_method = (SELECT payment_method FROM customers GROUP BY payment_method ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)"
What are all the payment methods?,SELECT DISTINCT payment_method FROM customers,CREATE TABLE customers (payment_method VARCHAR)
What are the details of all products?,SELECT DISTINCT product_details FROM products,CREATE TABLE products (product_details VARCHAR)
"Find the name of all customers whose name contains ""Alex"".","SELECT customer_name FROM customers WHERE customer_name LIKE ""%Alex%""",CREATE TABLE customers (customer_name VARCHAR)
"Find the detail of products whose detail contains the word ""Latte"" or the word ""Americano""","SELECT product_details FROM products WHERE product_details LIKE ""%Latte%"" OR product_details LIKE ""%Americano%""",CREATE TABLE products (product_details VARCHAR)
"What is the address content of the customer named ""Maudie Kertzmann""?","SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t1.customer_name = ""Maudie Kertzmann""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE addresses (address_content VARCHAR, address_id VARCHAR)"
"How many customers are living in city ""Lake Geovannyton""?","SELECT COUNT(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.city = ""Lake Geovannyton""","CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, city VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR)"
Find the name of customers who are living in Colorado?,"SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id WHERE t3.state_province_county = ""Colorado""","CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE addresses (address_id VARCHAR, state_province_county VARCHAR)"
Find the list of cities that no customer is living in.,SELECT city FROM addresses WHERE NOT city IN (SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id),"CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR); CREATE TABLE addresses (city VARCHAR)"
Which city has the most customers living in?,SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id = t2.customer_id JOIN addresses AS t3 ON t2.address_id = t3.address_id GROUP BY t3.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE addresses (city VARCHAR, address_id VARCHAR); CREATE TABLE customer_addresses (customer_id VARCHAR, address_id VARCHAR)"
Find the city with post code 255.,SELECT city FROM addresses WHERE zip_postcode = 255,"CREATE TABLE addresses (city VARCHAR, zip_postcode VARCHAR)"
Find the state and country of all cities with post code starting with 4.,"SELECT state_province_county, country FROM addresses WHERE zip_postcode LIKE ""4%""","CREATE TABLE addresses (state_province_county VARCHAR, country VARCHAR, zip_postcode VARCHAR)"
List the countries having more than 4 addresses listed.,SELECT country FROM addresses GROUP BY country HAVING COUNT(address_id) > 4,"CREATE TABLE addresses (country VARCHAR, address_id VARCHAR)"
List all the contact channel codes that were used less than 5 times.,SELECT channel_code FROM customer_contact_channels GROUP BY channel_code HAVING COUNT(customer_id) < 5,"CREATE TABLE customer_contact_channels (channel_code VARCHAR, customer_id VARCHAR)"
"Which contact channel has been used by the customer with name ""Tillman Ernser""?","SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = ""Tillman Ernser""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_contact_channels (customer_id VARCHAR)"
"What is the ""active to date"" of the latest contact channel used by ""Tillman Ernser""?","SELECT MAX(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name = ""Tillman Ernser""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE customer_contact_channels (active_to_date INTEGER, customer_id VARCHAR)"
What is the average time span of contact channels in the database?,SELECT AVG(active_to_date - active_from_date) FROM customer_contact_channels,"CREATE TABLE customer_contact_channels (active_to_date VARCHAR, active_from_date VARCHAR)"
What is the channel code and contact number of the customer contact channel that was active for the longest time?,"SELECT channel_code, contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date = (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)","CREATE TABLE customer_contact_channels (channel_code VARCHAR, contact_number VARCHAR, active_to_date VARCHAR, active_from_date VARCHAR)"
Find the name and active date of the customer that use email as the contact channel.,"SELECT t1.customer_name, t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'","CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_contact_channels (active_from_date VARCHAR, customer_id VARCHAR, channel_code VARCHAR)"
What is the name of the customer that made the order with the largest quantity?,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t3.order_quantity = (SELECT MAX(order_quantity) FROM order_items),"CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (order_quantity INTEGER); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
What is the name of the customer that has purchased the most items?,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) DESC LIMIT 1,"CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
What is the payment method of the customer that has purchased the least quantity of items?,SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id GROUP BY t1.customer_name ORDER BY SUM(t3.order_quantity) LIMIT 1,"CREATE TABLE order_items (order_id VARCHAR, order_quantity INTEGER); CREATE TABLE customers (payment_method VARCHAR, customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
How many types of products have Rodrick Heaney bought in total?,"SELECT COUNT(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = ""Rodrick Heaney""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
"What is the total quantity of products purchased by ""Rodrick Heaney""?","SELECT SUM(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id WHERE t1.customer_name = ""Rodrick Heaney""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
"How many customers have at least one order with status ""Cancelled""?","SELECT COUNT(DISTINCT customer_id) FROM customer_orders WHERE order_status = ""Cancelled""","CREATE TABLE customer_orders (customer_id VARCHAR, order_status VARCHAR)"
"How many orders have detail ""Second time""?","SELECT COUNT(*) FROM customer_orders WHERE order_details = ""Second time""",CREATE TABLE customer_orders (order_details VARCHAR)
"Find the customer name and date of the orders that have the status ""Delivered"".","SELECT t1.customer_name, t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = ""Delivered""","CREATE TABLE customer_orders (order_date VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
"What is the total number of products that are in orders with status ""Cancelled""?","SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_status = ""Cancelled""","CREATE TABLE customer_orders (order_id VARCHAR, order_status VARCHAR); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR)"
Find the total amount of products ordered before 2018-03-17 07:13:53.,"SELECT SUM(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id = t2.order_id WHERE t1.order_date < ""2018-03-17 07:13:53""","CREATE TABLE customer_orders (order_id VARCHAR, order_date INTEGER); CREATE TABLE order_items (order_quantity INTEGER, order_id VARCHAR)"
Who made the latest order?,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id ORDER BY t2.order_date DESC LIMIT 1,"CREATE TABLE customer_orders (customer_id VARCHAR, order_date VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
Which product has been ordered most number of times?,SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE products (product_details VARCHAR, product_id VARCHAR); CREATE TABLE order_items (product_id VARCHAR)"
Find the name and ID of the product whose total order quantity is the largest.,"SELECT t2.product_details, t2.product_id FROM order_items AS t1 JOIN products AS t2 ON t1.product_id = t2.product_id GROUP BY t1.product_id ORDER BY SUM(t1.order_quantity) LIMIT 1","CREATE TABLE order_items (product_id VARCHAR, order_quantity INTEGER); CREATE TABLE products (product_details VARCHAR, product_id VARCHAR)"
"Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.","SELECT address_content FROM addresses WHERE city = ""East Julianaside"" AND state_province_county = ""Texas"" UNION SELECT address_content FROM addresses WHERE city = ""Gleasonmouth"" AND state_province_county = ""Arizona""","CREATE TABLE addresses (address_content VARCHAR, city VARCHAR, state_province_county VARCHAR)"
Find the name of customers who did not pay with Cash.,SELECT customer_name FROM customers WHERE payment_method <> 'Cash',"CREATE TABLE customers (customer_name VARCHAR, payment_method VARCHAR)"
Find the names of customers who never ordered product Latte.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte',"CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_details VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
Find the names of customers who never placed an order.,SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id,"CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR)"
Find the names of customers who ordered both products Latte and Americano.,SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id JOIN order_items AS t3 ON t2.order_id = t3.order_id JOIN products AS t4 ON t3.product_id = t4.product_id WHERE t4.product_details = 'Americano',"CREATE TABLE products (product_id VARCHAR, product_details VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE customer_orders (customer_id VARCHAR, order_id VARCHAR)"
List the age of all music artists.,SELECT Age FROM artist,CREATE TABLE artist (Age VARCHAR)
What is the average age of all artists?,SELECT AVG(Age) FROM artist,CREATE TABLE artist (Age INTEGER)
"What are the famous titles of the artist ""Triumfall""?","SELECT Famous_Title FROM artist WHERE Artist = ""Triumfall""","CREATE TABLE artist (Famous_Title VARCHAR, Artist VARCHAR)"
What are the distinct Famous release dates?,SELECT DISTINCT (Famous_Release_date) FROM artist,CREATE TABLE artist (Famous_Release_date VARCHAR)
Return the dates of ceremony and the results of all music festivals,"SELECT Date_of_ceremony, RESULT FROM music_festival","CREATE TABLE music_festival (Date_of_ceremony VARCHAR, RESULT VARCHAR)"
"What are the category of music festivals with result ""Awarded""?","SELECT Category FROM music_festival WHERE RESULT = ""Awarded""","CREATE TABLE music_festival (Category VARCHAR, RESULT VARCHAR)"
What are the maximum and minimum week on top of all volumes?,"SELECT MAX(Weeks_on_Top), MIN(Weeks_on_Top) FROM volume",CREATE TABLE volume (Weeks_on_Top INTEGER)
What are the songs in volumes with more than 1 week on top?,SELECT Song FROM volume WHERE Weeks_on_Top > 1,"CREATE TABLE volume (Song VARCHAR, Weeks_on_Top INTEGER)"
Please list all songs in volumes in ascending alphabetical order.,SELECT Song FROM volume ORDER BY Song,CREATE TABLE volume (Song VARCHAR)
How many distinct artists do the volumes associate to?,SELECT COUNT(DISTINCT Artist_ID) FROM volume,CREATE TABLE volume (Artist_ID VARCHAR)
Please show the date of ceremony of the volumes that last more than 2 weeks on top.,SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T2.Weeks_on_Top > 2,"CREATE TABLE music_festival (Date_of_ceremony VARCHAR, Volume VARCHAR); CREATE TABLE volume (Volume_ID VARCHAR, Weeks_on_Top INTEGER)"
"Please show the songs that have result ""nominated"" at music festivals.","SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume = T2.Volume_ID WHERE T1.Result = ""Nominated""","CREATE TABLE volume (Song VARCHAR, Volume_ID VARCHAR); CREATE TABLE music_festival (Volume VARCHAR, Result VARCHAR)"
"What are the issue dates of volumes associated with the artist ""Gorgoroth""?","SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = ""Gorgoroth""","CREATE TABLE artist (Artist_ID VARCHAR, Artist VARCHAR); CREATE TABLE volume (Issue_Date VARCHAR, Artist_ID VARCHAR)"
What are the songs in volumes associated with the artist aged 32 or older?,SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age >= 32,"CREATE TABLE volume (Song VARCHAR, Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)"
What is the average weeks on top of volumes associated with the artist aged 25 or younger?,SELECT AVG(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 25,"CREATE TABLE volume (Weeks_on_Top INTEGER, Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)"
What are the famous title of the artists associated with volumes with more than 2 weeks on top?,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2,"CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE volume (Artist_ID VARCHAR, Weeks_on_Top INTEGER)"
Please list the age and famous title of artists in descending order of age.,"SELECT Famous_Title, Age FROM artist ORDER BY Age DESC","CREATE TABLE artist (Famous_Title VARCHAR, Age VARCHAR)"
What is the famous release date of the artist with the oldest age?,SELECT Famous_Release_date FROM artist ORDER BY Age DESC LIMIT 1,"CREATE TABLE artist (Famous_Release_date VARCHAR, Age VARCHAR)"
Please show the categories of the music festivals and the count.,"SELECT Category, COUNT(*) FROM music_festival GROUP BY Category",CREATE TABLE music_festival (Category VARCHAR)
What is the most common result of the music festival?,SELECT RESULT FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE music_festival (RESULT VARCHAR)
Please show the categories of the music festivals with count more than 1.,SELECT Category FROM music_festival GROUP BY Category HAVING COUNT(*) > 1,CREATE TABLE music_festival (Category VARCHAR)
What is the song in the volume with the maximum weeks on top?,SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1,"CREATE TABLE volume (Song VARCHAR, Weeks_on_Top VARCHAR)"
Find the famous titles of artists that do not have any volume.,SELECT Famous_Title FROM artist WHERE NOT Artist_ID IN (SELECT Artist_ID FROM volume),"CREATE TABLE volume (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR)"
Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.,SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top > 2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < 2,"CREATE TABLE artist (Famous_Title VARCHAR, Artist_ID VARCHAR); CREATE TABLE volume (Artist_ID VARCHAR, Weeks_on_Top INTEGER)"
"What are the date of ceremony of music festivals with category ""Best Song"" and result ""Awarded""?","SELECT Date_of_ceremony FROM music_festival WHERE Category = ""Best Song"" AND RESULT = ""Awarded""","CREATE TABLE music_festival (Date_of_ceremony VARCHAR, Category VARCHAR, RESULT VARCHAR)"
What is the issue date of the volume with the minimum weeks on top?,SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top LIMIT 1,"CREATE TABLE volume (Issue_Date VARCHAR, Weeks_on_Top VARCHAR)"
"Please show the results of music festivals and the number of music festivals that have had each, ordered by this count.","SELECT RESULT, COUNT(*) FROM music_festival GROUP BY RESULT ORDER BY COUNT(*) DESC",CREATE TABLE music_festival (RESULT VARCHAR)
What are the issue dates of volumes associated with the artist aged 23 or younger?,SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.age <= 23,"CREATE TABLE volume (Artist_ID VARCHAR); CREATE TABLE artist (Artist_ID VARCHAR, age VARCHAR)"
How many roller coasters are there?,SELECT COUNT(*) FROM roller_coaster,CREATE TABLE roller_coaster (Id VARCHAR)
List the names of roller coasters by ascending order of length.,SELECT Name FROM roller_coaster ORDER BY LENGTH,"CREATE TABLE roller_coaster (Name VARCHAR, LENGTH VARCHAR)"
What are the lengths and heights of roller coasters?,"SELECT LENGTH, Height FROM roller_coaster","CREATE TABLE roller_coaster (LENGTH VARCHAR, Height VARCHAR)"
"List the names of countries whose language is not ""German"".","SELECT Name FROM country WHERE Languages <> ""German""","CREATE TABLE country (Name VARCHAR, Languages VARCHAR)"
Show the statuses of roller coasters longer than 3300 or higher than 100.,SELECT Status FROM roller_coaster WHERE LENGTH > 3300 OR Height > 100,"CREATE TABLE roller_coaster (Status VARCHAR, LENGTH VARCHAR, Height VARCHAR)"
What are the speeds of the longest roller coaster?,SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1,"CREATE TABLE roller_coaster (Speed VARCHAR, LENGTH VARCHAR)"
What is the average speed of roller coasters?,SELECT AVG(Speed) FROM roller_coaster,CREATE TABLE roller_coaster (Speed INTEGER)
Show the different statuses and the numbers of roller coasters for each status.,"SELECT Status, COUNT(*) FROM roller_coaster GROUP BY Status",CREATE TABLE roller_coaster (Status VARCHAR)
Please show the most common status of roller coasters.,SELECT Status FROM roller_coaster GROUP BY Status ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE roller_coaster (Status VARCHAR)
List the status shared by more than two roller coaster.,SELECT Status FROM roller_coaster GROUP BY Status HAVING COUNT(*) > 2,CREATE TABLE roller_coaster (Status VARCHAR)
Show the park of the roller coaster with the highest speed.,SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1,"CREATE TABLE roller_coaster (Park VARCHAR, Speed VARCHAR)"
Show the names of roller coasters and names of country they are in.,"SELECT T2.Name, T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID","CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR); CREATE TABLE roller_coaster (Name VARCHAR, Country_ID VARCHAR)"
Show the names of countries that have more than one roller coaster.,SELECT T1.Name FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name HAVING COUNT(*) > 1,"CREATE TABLE roller_coaster (Country_ID VARCHAR); CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR)"
Show the name and population of the country that has the highest roller coaster.,"SELECT T1.Name, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID ORDER BY T2.Height DESC LIMIT 1","CREATE TABLE roller_coaster (Country_ID VARCHAR, Height VARCHAR); CREATE TABLE country (Name VARCHAR, population VARCHAR, Country_ID VARCHAR)"
Show the names of countries and the average speed of roller coasters from each country.,"SELECT T1.Name, AVG(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name","CREATE TABLE roller_coaster (Speed INTEGER, Country_ID VARCHAR); CREATE TABLE country (Name VARCHAR, Country_ID VARCHAR)"
How many countries do not have an roller coaster longer than 3000?,SELECT COUNT(*) FROM country WHERE NOT country_id IN (SELECT country_id FROM roller_coaster WHERE LENGTH > 3000),"CREATE TABLE country (country_id VARCHAR, LENGTH INTEGER); CREATE TABLE roller_coaster (country_id VARCHAR, LENGTH INTEGER)"
"What are the country names, area and population which has both roller coasters with speed higher","SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed > 60 INTERSECT SELECT T1.name, T1.area, T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID WHERE T2.speed < 55","CREATE TABLE country (name VARCHAR, area VARCHAR, population VARCHAR, Country_ID VARCHAR); CREATE TABLE roller_coaster (Country_ID VARCHAR, speed INTEGER)"
How many different captain ranks are there?,SELECT COUNT(DISTINCT rank) FROM captain,CREATE TABLE captain (rank VARCHAR)
How many captains are in each rank?,"SELECT COUNT(*), rank FROM captain GROUP BY rank",CREATE TABLE captain (rank VARCHAR)
How many captains with younger than 50 are in each rank?,"SELECT COUNT(*), rank FROM captain WHERE age < 50 GROUP BY rank","CREATE TABLE captain (rank VARCHAR, age INTEGER)"
Sort all captain names by their ages from old to young.,SELECT name FROM captain ORDER BY age DESC,"CREATE TABLE captain (name VARCHAR, age VARCHAR)"
"Find the name, class and rank of all captains.","SELECT name, CLASS, rank FROM captain","CREATE TABLE captain (name VARCHAR, CLASS VARCHAR, rank VARCHAR)"
Which rank is the most common among captains?,SELECT rank FROM captain GROUP BY rank ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE captain (rank VARCHAR)
Which classes have more than two captains?,SELECT CLASS FROM captain GROUP BY CLASS HAVING COUNT(*) > 2,CREATE TABLE captain (CLASS VARCHAR)
Find the name of captains whose rank are either Midshipman or Lieutenant.,SELECT name FROM captain WHERE rank = 'Midshipman' OR rank = 'Lieutenant',"CREATE TABLE captain (name VARCHAR, rank VARCHAR)"
What are the average and minimum age of captains in different class?,"SELECT AVG(age), MIN(age), CLASS FROM captain GROUP BY CLASS","CREATE TABLE captain (CLASS VARCHAR, age INTEGER)"
Find the captain rank that has some captains in both Cutter and Armed schooner classes.,SELECT rank FROM captain WHERE CLASS = 'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS = 'Armed schooner',"CREATE TABLE captain (rank VARCHAR, CLASS VARCHAR)"
Find the captain rank that has no captain in Third-rate ship of the line class.,SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS = 'Third-rate ship of the line',"CREATE TABLE captain (rank VARCHAR, CLASS VARCHAR)"
What is the name of the youngest captain?,SELECT name FROM captain ORDER BY age LIMIT 1,"CREATE TABLE captain (name VARCHAR, age VARCHAR)"
"Find the name, type, and flag of the ship that is built in the most recent year.","SELECT name, TYPE, flag FROM ship ORDER BY built_year DESC LIMIT 1","CREATE TABLE ship (name VARCHAR, TYPE VARCHAR, flag VARCHAR, built_year VARCHAR)"
"Group by ships by flag, and return number of ships that have each flag.","SELECT COUNT(*), flag FROM ship GROUP BY flag",CREATE TABLE ship (flag VARCHAR)
Which flag is most widely used among all ships?,SELECT flag FROM ship GROUP BY flag ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE ship (flag VARCHAR)
List all ship names in the order of built year and class.,"SELECT name FROM ship ORDER BY built_year, CLASS","CREATE TABLE ship (name VARCHAR, built_year VARCHAR, CLASS VARCHAR)"
Find the ship type that are used by both ships with Panama and Malta flags.,SELECT TYPE FROM ship WHERE flag = 'Panama' INTERSECT SELECT TYPE FROM ship WHERE flag = 'Malta',"CREATE TABLE ship (TYPE VARCHAR, flag VARCHAR)"
In which year were most of ships built?,SELECT built_year FROM ship GROUP BY built_year ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE ship (built_year VARCHAR)
Find the name of the ships that have more than one captain.,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id GROUP BY t2.ship_id HAVING COUNT(*) > 1,"CREATE TABLE captain (ship_id VARCHAR); CREATE TABLE ship (name VARCHAR, ship_id VARCHAR)"
what are the names and classes of the ships that do not have any captain yet?,"SELECT name, CLASS FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain)","CREATE TABLE ship (name VARCHAR, CLASS VARCHAR, ship_id VARCHAR); CREATE TABLE captain (name VARCHAR, CLASS VARCHAR, ship_id VARCHAR)"
Find the name of the ship that is steered by the youngest captain.,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id ORDER BY t2.age LIMIT 1,"CREATE TABLE ship (name VARCHAR, ship_id VARCHAR); CREATE TABLE captain (ship_id VARCHAR, age VARCHAR)"
Find the name and flag of ships that are not steered by any captain with Midshipman rank.,"SELECT name, flag FROM ship WHERE NOT ship_id IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman')","CREATE TABLE captain (name VARCHAR, flag VARCHAR, ship_id VARCHAR, rank VARCHAR); CREATE TABLE ship (name VARCHAR, flag VARCHAR, ship_id VARCHAR, rank VARCHAR)"
Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.,SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Midshipman' INTERSECT SELECT t1.name FROM ship AS t1 JOIN captain AS t2 ON t1.ship_id = t2.ship_id WHERE t2.rank = 'Lieutenant',"CREATE TABLE ship (name VARCHAR, ship_id VARCHAR); CREATE TABLE captain (ship_id VARCHAR, rank VARCHAR)"
What is id of the city that hosted events in the most recent year?,SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1,"CREATE TABLE hosting_city (host_city VARCHAR, YEAR VARCHAR)"
"Find the match ids of the cities that hosted competition ""1994 FIFA World Cup qualification""?","SELECT match_id FROM MATCH WHERE competition = ""1994 FIFA World Cup qualification""","CREATE TABLE MATCH (match_id VARCHAR, competition VARCHAR)"
Find the cities which were once a host city after 2010?,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year > 2010,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR, year INTEGER)"
Which city has hosted the most events?,SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY T2.host_city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR)"
"What is the venue of the competition ""1994 FIFA World Cup qualification"" hosted by ""Nanjing ( Jiangsu )""?","SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = ""Nanjing ( Jiangsu )"" AND T3.competition = ""1994 FIFA World Cup qualification""","CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE MATCH (venue VARCHAR, match_id VARCHAR, competition VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR, match_id VARCHAR)"
Give me the temperature of Shanghai in January.,"SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = ""Shanghai""","CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE temperature (Jan VARCHAR, city_id VARCHAR)"
"What is the host year of city ""Taizhou ( Zhejiang )""?","SELECT T2.year FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T1.city = ""Taizhou ( Zhejiang )""","CREATE TABLE city (city_id VARCHAR, city VARCHAR); CREATE TABLE hosting_city (year VARCHAR, host_city VARCHAR)"
Which three cities have the largest regional population?,SELECT city FROM city ORDER BY regional_population DESC LIMIT 3,"CREATE TABLE city (city VARCHAR, regional_population VARCHAR)"
Which city has the lowest GDP? Please list the city name and its GDP.,"SELECT city, GDP FROM city ORDER BY GDP LIMIT 1","CREATE TABLE city (city VARCHAR, GDP VARCHAR)"
Which city has the highest temperature in February?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id ORDER BY T2.Feb DESC LIMIT 1,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Feb VARCHAR)"
Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul OR T2.Mar > T2.Oct,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar VARCHAR, Jul VARCHAR, Oct VARCHAR)"
Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar INTEGER, Jul VARCHAR)"
Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Mar < T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Mar INTEGER, Dec VARCHAR)"
Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?,SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T2.Feb > T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id = T4.host_city,"CREATE TABLE city (city VARCHAR, city_id VARCHAR); CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE temperature (city_id VARCHAR, Feb INTEGER, Jun VARCHAR)"
Please give me a list of cities whose regional population is over 10000000.,SELECT city FROM city WHERE regional_population > 10000000,"CREATE TABLE city (city VARCHAR, regional_population INTEGER)"
Please give me a list of cities whose regional population is over 8000000 or under 5000000.,SELECT city FROM city WHERE regional_population > 10000000 UNION SELECT city FROM city WHERE regional_population < 5000000,"CREATE TABLE city (city VARCHAR, regional_population INTEGER)"
Find the number of matches in different competitions.,"SELECT COUNT(*), Competition FROM MATCH GROUP BY Competition",CREATE TABLE MATCH (Competition VARCHAR)
List venues of all matches in the order of their dates starting from the most recent one.,SELECT venue FROM MATCH ORDER BY date DESC,"CREATE TABLE MATCH (venue VARCHAR, date VARCHAR)"
what is the GDP of the city with the largest population.,SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1,"CREATE TABLE city (gdp VARCHAR, Regional_Population VARCHAR)"
What are the GDP and population of the city that already served as a host more than once?,"SELECT t1.gdp, t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city GROUP BY t2.Host_City HAVING COUNT(*) > 1",CREATE TABLE hosting_city (host_city VARCHAR); CREATE TABLE city (city_id VARCHAR)
"List every individual's first name, middle name and last name in alphabetical order by last name.","SELECT individual_first_name, individual_middle_name, individual_last_name FROM individuals ORDER BY individual_last_name","CREATE TABLE individuals (individual_first_name VARCHAR, individual_middle_name VARCHAR, individual_last_name VARCHAR)"
List all the types of forms.,SELECT DISTINCT form_type_code FROM forms,CREATE TABLE forms (form_type_code VARCHAR)
Find the name of the most popular party form.,SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id = t2.form_id GROUP BY t2.form_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE party_forms (form_id VARCHAR); CREATE TABLE forms (form_name VARCHAR, form_id VARCHAR)"
"Find the payment method and phone of the party with email ""enrico09@example.com"".","SELECT payment_method_code, party_phone FROM parties WHERE party_email = ""enrico09@example.com""","CREATE TABLE parties (payment_method_code VARCHAR, party_phone VARCHAR, party_email VARCHAR)"
Find the emails of parties with the most popular party form.,SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id = t2.party_id WHERE t2.form_id = (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY COUNT(*) DESC LIMIT 1),"CREATE TABLE party_forms (form_id VARCHAR); CREATE TABLE parties (party_email VARCHAR, party_id VARCHAR); CREATE TABLE party_forms (party_id VARCHAR, form_id VARCHAR)"
List all the name of organizations in order of the date formed.,SELECT organization_name FROM organizations ORDER BY date_formed,"CREATE TABLE organizations (organization_name VARCHAR, date_formed VARCHAR)"
Find the name of the youngest organization.,SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1,"CREATE TABLE organizations (organization_name VARCHAR, date_formed VARCHAR)"
"Find the last name of the latest contact individual of the organization ""Labour Party"".","SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.organization_name = ""Labour Party"" ORDER BY t2.date_contact_to DESC LIMIT 1","CREATE TABLE organizations (organization_id VARCHAR, organization_name VARCHAR); CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organization_contact_individuals (organization_id VARCHAR, individual_id VARCHAR, date_contact_to VARCHAR)"
Find the last name of the first ever contact person of the organization with the highest UK Vat number.,SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id JOIN individuals AS t3 ON t2.individual_id = t3.individual_id WHERE t1.uk_vat_number = (SELECT MAX(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to LIMIT 1,"CREATE TABLE organizations (uk_vat_number INTEGER); CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organizations (organization_id VARCHAR, uk_vat_number INTEGER); CREATE TABLE organization_contact_individuals (organization_id VARCHAR, individual_id VARCHAR, date_contact_to VARCHAR)"
Find name of the services that has never been used.,SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id = t2.service_id,"CREATE TABLE services (service_name VARCHAR); CREATE TABLE party_services (service_id VARCHAR); CREATE TABLE services (service_name VARCHAR, service_id VARCHAR)"
Find the name of all the cities and states.,SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses,"CREATE TABLE addresses (town_city VARCHAR, state_province_county VARCHAR)"
"How many cities are there in state ""Colorado""?","SELECT COUNT(*) FROM addresses WHERE state_province_county = ""Colorado""",CREATE TABLE addresses (state_province_county VARCHAR)
Find the payment method code used by more than 3 parties.,SELECT payment_method_code FROM parties GROUP BY payment_method_code HAVING COUNT(*) > 3,CREATE TABLE parties (payment_method_code VARCHAR)
"Find the name of organizations whose names contain ""Party"".","SELECT organization_name FROM organizations WHERE organization_name LIKE ""%Party%""",CREATE TABLE organizations (organization_name VARCHAR)
How many distinct payment methods are used by parties?,SELECT COUNT(DISTINCT payment_method_code) FROM parties,CREATE TABLE parties (payment_method_code VARCHAR)
Which is the email of the party that has used the services the most number of times?,SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id = t2.customer_id GROUP BY t1.party_email ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE parties (party_email VARCHAR, party_id VARCHAR); CREATE TABLE party_services (customer_id VARCHAR)"
"Which state can address ""6862 Kaitlyn Knolls"" possibly be in?","SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE ""%6862 Kaitlyn Knolls%""","CREATE TABLE addresses (state_province_county VARCHAR, line_1_number_building VARCHAR)"
What is the name of organization that has the greatest number of contact individuals?,SELECT t1.organization_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id = t2.organization_id GROUP BY t1.organization_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE organization_contact_individuals (organization_id VARCHAR); CREATE TABLE organizations (organization_name VARCHAR, organization_id VARCHAR)"
Find the last name of the individuals that have been contact individuals of an organization.,SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id = t2.individual_id,"CREATE TABLE individuals (individual_last_name VARCHAR, individual_id VARCHAR); CREATE TABLE organization_contact_individuals (individual_id VARCHAR)"
How many drivers are there?,SELECT COUNT(*) FROM driver,CREATE TABLE driver (Id VARCHAR)
"Show the name, home city, and age for all drivers.","SELECT name, home_city, age FROM driver","CREATE TABLE driver (name VARCHAR, home_city VARCHAR, age VARCHAR)"
Show the party and the number of drivers in each party.,"SELECT party, COUNT(*) FROM driver GROUP BY party",CREATE TABLE driver (party VARCHAR)
Show the name of drivers in descending order of age.,SELECT name FROM driver ORDER BY age DESC,"CREATE TABLE driver (name VARCHAR, age VARCHAR)"
Show all different home cities.,SELECT DISTINCT home_city FROM driver,CREATE TABLE driver (home_city VARCHAR)
Show the home city with the most number of drivers.,SELECT home_city FROM driver GROUP BY home_city ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE driver (home_city VARCHAR)
Show the party with drivers from Hartford and drivers older than 40.,SELECT party FROM driver WHERE home_city = 'Hartford' AND age > 40,"CREATE TABLE driver (party VARCHAR, home_city VARCHAR, age VARCHAR)"
Show home city where at least two drivers older than 40 are from.,SELECT home_city FROM driver WHERE age > 40 GROUP BY home_city HAVING COUNT(*) >= 2,"CREATE TABLE driver (home_city VARCHAR, age INTEGER)"
Show all home cities except for those having a driver older than 40.,SELECT home_city FROM driver EXCEPT SELECT home_city FROM driver WHERE age > 40,"CREATE TABLE driver (home_city VARCHAR, age INTEGER)"
Show the names of the drivers without a school bus.,SELECT name FROM driver WHERE NOT driver_id IN (SELECT driver_id FROM school_bus),"CREATE TABLE school_bus (name VARCHAR, driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)"
Show the types of schools that have two schools.,SELECT TYPE FROM school GROUP BY TYPE HAVING COUNT(*) = 2,CREATE TABLE school (TYPE VARCHAR)
Show the school name and driver name for all school buses.,"SELECT T2.school, T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id JOIN driver AS T3 ON T1.driver_id = T3.driver_id","CREATE TABLE school (school VARCHAR, school_id VARCHAR); CREATE TABLE school_bus (school_id VARCHAR, driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)"
"What is the maximum, minimum and average years spent working on a school bus?","SELECT MAX(years_working), MIN(years_working), AVG(years_working) FROM school_bus",CREATE TABLE school_bus (years_working INTEGER)
Show the school name and type for schools without a school bus.,"SELECT school, TYPE FROM school WHERE NOT school_id IN (SELECT school_id FROM school_bus)","CREATE TABLE school_bus (school VARCHAR, TYPE VARCHAR, school_id VARCHAR); CREATE TABLE school (school VARCHAR, TYPE VARCHAR, school_id VARCHAR)"
Show the type of school and the number of buses for each type.,"SELECT T2.type, COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type","CREATE TABLE school (type VARCHAR, school_id VARCHAR); CREATE TABLE school_bus (school_id VARCHAR)"
How many drivers are from Hartford city or younger than 40?,SELECT COUNT(*) FROM driver WHERE home_city = 'Hartford' OR age < 40,"CREATE TABLE driver (home_city VARCHAR, age VARCHAR)"
List names for drivers from Hartford city and younger than 40.,SELECT name FROM driver WHERE home_city = 'Hartford' AND age < 40,"CREATE TABLE driver (name VARCHAR, home_city VARCHAR, age VARCHAR)"
find the name of driver who is driving the school bus with the longest working history.,SELECT t1.name FROM driver AS t1 JOIN school_bus AS t2 ON t1.driver_id = t2.driver_id ORDER BY years_working DESC LIMIT 1,"CREATE TABLE school_bus (driver_id VARCHAR); CREATE TABLE driver (name VARCHAR, driver_id VARCHAR)"
How many flights have a velocity larger than 200?,SELECT COUNT(*) FROM flight WHERE velocity > 200,CREATE TABLE flight (velocity INTEGER)
"List the vehicle flight number, date and pilot of all the flights, ordered by altitude.","SELECT vehicle_flight_number, date, pilot FROM flight ORDER BY altitude","CREATE TABLE flight (vehicle_flight_number VARCHAR, date VARCHAR, pilot VARCHAR, altitude VARCHAR)"
"List the id, country, city and name of the airports ordered alphabetically by the name.","SELECT id, country, city, name FROM airport ORDER BY name","CREATE TABLE airport (id VARCHAR, country VARCHAR, city VARCHAR, name VARCHAR)"
What is maximum group equity shareholding of the companies?,SELECT MAX(group_equity_shareholding) FROM operate_company,CREATE TABLE operate_company (group_equity_shareholding INTEGER)
What is the velocity of the pilot named 'Thompson'?,SELECT AVG(velocity) FROM flight WHERE pilot = 'Thompson',"CREATE TABLE flight (velocity INTEGER, pilot VARCHAR)"
What are the names and types of the companies that have ever operated a flight?,"SELECT T1.name, T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id","CREATE TABLE operate_company (name VARCHAR, type VARCHAR, id VARCHAR); CREATE TABLE flight (Id VARCHAR)"
What are the names of the airports which are not in the country 'Iceland'?,SELECT name FROM airport WHERE country <> 'Iceland',"CREATE TABLE airport (name VARCHAR, country VARCHAR)"
What are the distinct types of the companies that have operated any flights with velocity less than 200?,SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T2.velocity < 200,"CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (type VARCHAR, id VARCHAR)"
What are the ids and names of the companies that operated more than one flight?,"SELECT T1.id, T1.name FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY T1.id HAVING COUNT(*) > 1","CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (id VARCHAR, name VARCHAR)"
"What is the id, name and IATA code of the airport that had most number of flights?","SELECT T1.id, T1.name, T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE airport (id VARCHAR, name VARCHAR, IATA VARCHAR); CREATE TABLE flight (id VARCHAR, airport_id VARCHAR)"
What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?,SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.country = 'United States' OR T1.name = 'Billund Airport',"CREATE TABLE airport (id VARCHAR, country VARCHAR, name VARCHAR); CREATE TABLE flight (pilot VARCHAR, airport_id VARCHAR)"
"What is the most common company type, and how many are there?","SELECT TYPE, COUNT(*) FROM operate_company GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE operate_company (TYPE VARCHAR)
How many airports haven't the pilot 'Thompson' driven an aircraft?,SELECT COUNT(*) FROM airport WHERE NOT id IN (SELECT airport_id FROM flight WHERE pilot = 'Thompson'),"CREATE TABLE airport (id VARCHAR, airport_id VARCHAR, pilot VARCHAR); CREATE TABLE flight (id VARCHAR, airport_id VARCHAR, pilot VARCHAR)"
List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.,SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id WHERE T1.principal_activities = 'Catering services',"CREATE TABLE operate_company (id VARCHAR, principal_activities VARCHAR); CREATE TABLE flight (Id VARCHAR)"
Which of the airport names contains the word 'international'?,SELECT name FROM airport WHERE name LIKE '%international%',CREATE TABLE airport (name VARCHAR)
How many companies operates airlines in each airport?,"SELECT T3.id, COUNT(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id",CREATE TABLE airport (id VARCHAR); CREATE TABLE flight (Id VARCHAR); CREATE TABLE operate_company (id VARCHAR)
how many airports are there in each country?,"SELECT COUNT(*), country FROM airport GROUP BY country",CREATE TABLE airport (country VARCHAR)
which countries have more than 2 airports?,SELECT country FROM airport GROUP BY country HAVING COUNT(*) > 2,CREATE TABLE airport (country VARCHAR)
which pilot is in charge of the most number of flights?,SELECT pilot FROM flight GROUP BY pilot ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE flight (pilot VARCHAR)
Show all account ids and account details.,"SELECT account_id, account_details FROM Accounts","CREATE TABLE Accounts (account_id VARCHAR, account_details VARCHAR)"
How many statements do we have?,SELECT COUNT(*) FROM Statements,CREATE TABLE Statements (Id VARCHAR)
List all statement ids and statement details.,"SELECT STATEMENT_ID, statement_details FROM Statements","CREATE TABLE Statements (STATEMENT_ID VARCHAR, statement_details VARCHAR)"
"Show statement id, statement detail, account detail for accounts.","SELECT T1.statement_id, T2.statement_details, T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id","CREATE TABLE Accounts (statement_id VARCHAR, account_details VARCHAR); CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR)"
Show all statement id and the number of accounts for each statement.,"SELECT STATEMENT_ID, COUNT(*) FROM Accounts GROUP BY STATEMENT_ID",CREATE TABLE Accounts (STATEMENT_ID VARCHAR)
Show the statement id and the statement detail for the statement with most number of accounts.,"SELECT T1.statement_id, T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY T1.statement_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Accounts (statement_id VARCHAR); CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR)"
Show the number of documents.,SELECT COUNT(*) FROM Documents,CREATE TABLE Documents (Id VARCHAR)
"List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.","SELECT document_type_code, document_name, document_description FROM Documents WHERE document_name = 'Noel CV' OR document_name = 'King Book'","CREATE TABLE Documents (document_type_code VARCHAR, document_name VARCHAR, document_description VARCHAR)"
Show the ids and names of all documents.,"SELECT document_id, document_name FROM Documents","CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)"
Find names and ids of all documents with document type code BK.,"SELECT document_name, document_id FROM Documents WHERE document_type_code = ""BK""","CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR, document_type_code VARCHAR)"
How many documents are with document type code BK for each product id?,"SELECT COUNT(*), project_id FROM Documents WHERE document_type_code = ""BK"" GROUP BY project_id","CREATE TABLE Documents (project_id VARCHAR, document_type_code VARCHAR)"
Show the document name and the document date for all documents on project with details 'Graph Database project'.,"SELECT document_name, document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'","CREATE TABLE Documents (project_id VARCHAR); CREATE TABLE projects (project_id VARCHAR, project_details VARCHAR)"
Show project ids and the number of documents in each project.,"SELECT project_id, COUNT(*) FROM Documents GROUP BY project_id",CREATE TABLE Documents (project_id VARCHAR)
What is the id of the project with least number of documents?,SELECT project_id FROM Documents GROUP BY project_id ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Documents (project_id VARCHAR)
Show the ids for projects with at least 2 documents.,SELECT project_id FROM Documents GROUP BY project_id HAVING COUNT(*) >= 2,CREATE TABLE Documents (project_id VARCHAR)
List document type codes and the number of documents in each code.,"SELECT document_type_code, COUNT(*) FROM Documents GROUP BY document_type_code",CREATE TABLE Documents (document_type_code VARCHAR)
What is the document type code with most number of documents?,SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Documents (document_type_code VARCHAR)
Show the document type code with fewer than 3 documents.,SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING COUNT(*) < 3,CREATE TABLE Documents (document_type_code VARCHAR)
Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.,"SELECT T1.statement_details, T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id = T2.document_id WHERE T1.statement_details = 'Private Project'","CREATE TABLE Statements (statement_details VARCHAR, statement_id VARCHAR); CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR)"
"Show all document type codes, document type names, document type descriptions.","SELECT document_type_code, document_type_name, document_type_description FROM Ref_document_types","CREATE TABLE Ref_document_types (document_type_code VARCHAR, document_type_name VARCHAR, document_type_description VARCHAR)"
What is the document type description for document type named Film?,"SELECT document_type_description FROM Ref_document_types WHERE document_type_name = ""Film""","CREATE TABLE Ref_document_types (document_type_description VARCHAR, document_type_name VARCHAR)"
What is the document type name and the document type description and creation date for all the documents?,"SELECT T1.document_type_name, T1.document_type_description, T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code","CREATE TABLE Ref_document_types (document_type_name VARCHAR, document_type_description VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (Document_date VARCHAR, document_type_code VARCHAR)"
Show the number of projects.,SELECT COUNT(*) FROM Projects,CREATE TABLE Projects (Id VARCHAR)
List ids and details for all projects.,"SELECT project_id, project_details FROM Projects","CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR)"
What is the project id and detail for the project with at least two documents?,"SELECT T1.project_id, T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id GROUP BY T1.project_id HAVING COUNT(*) > 2","CREATE TABLE Projects (project_id VARCHAR, project_details VARCHAR); CREATE TABLE Documents (project_id VARCHAR)"
"What is the project detail for the project with document ""King Book""?","SELECT T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id WHERE T2.document_name = ""King Book""","CREATE TABLE Projects (project_details VARCHAR, project_id VARCHAR); CREATE TABLE Documents (project_id VARCHAR, document_name VARCHAR)"
How many budget types do we have?,SELECT COUNT(*) FROM Ref_budget_codes,CREATE TABLE Ref_budget_codes (Id VARCHAR)
List all budget type codes and descriptions.,"SELECT budget_type_code, budget_type_description FROM Ref_budget_codes","CREATE TABLE Ref_budget_codes (budget_type_code VARCHAR, budget_type_description VARCHAR)"
What is the description for the budget type with code ORG?,"SELECT budget_type_description FROM Ref_budget_codes WHERE budget_type_code = ""ORG""","CREATE TABLE Ref_budget_codes (budget_type_description VARCHAR, budget_type_code VARCHAR)"
How many documents have expenses?,SELECT COUNT(*) FROM Documents_with_expenses,CREATE TABLE Documents_with_expenses (Id VARCHAR)
What are the document ids for the budget type code 'SF'?,SELECT document_id FROM Documents_with_expenses WHERE budget_type_code = 'SF',"CREATE TABLE Documents_with_expenses (document_id VARCHAR, budget_type_code VARCHAR)"
Show the budget type code and description and the corresponding document id.,"SELECT T2.budget_type_code, T2.budget_type_description, T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code","CREATE TABLE Ref_budget_codes (budget_type_code VARCHAR, budget_type_description VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR, budget_type_code VARCHAR)"
Show ids for all documents with budget types described as 'Government'.,"SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code = T2.Budget_Type_code WHERE T2.budget_type_Description = ""Government""","CREATE TABLE Documents_with_expenses (document_id VARCHAR, Budget_Type_code VARCHAR); CREATE TABLE Ref_Budget_Codes (Budget_Type_code VARCHAR, budget_type_Description VARCHAR)"
Show budget type codes and the number of documents in each budget type.,"SELECT budget_type_code, COUNT(*) FROM Documents_with_expenses GROUP BY budget_type_code",CREATE TABLE Documents_with_expenses (budget_type_code VARCHAR)
What is the budget type code with most number of documents.,SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Documents_with_expenses (budget_type_code VARCHAR)
What are the ids of documents which don't have expense budgets?,SELECT document_id FROM Documents EXCEPT SELECT document_id FROM Documents_with_expenses,CREATE TABLE Documents (document_id VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR)
Show ids for all documents in type CV without expense budgets.,"SELECT document_id FROM Documents WHERE document_type_code = ""CV"" EXCEPT SELECT document_id FROM Documents_with_expenses","CREATE TABLE Documents_with_expenses (document_id VARCHAR, document_type_code VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_type_code VARCHAR)"
What are the ids of documents with letter 's' in the name with any expense budgets.,SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id = T2.document_id WHERE T1.document_name LIKE '%s%',"CREATE TABLE Documents_with_expenses (document_id VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)"
How many documents do not have any expense?,SELECT COUNT(*) FROM Documents WHERE NOT document_id IN (SELECT document_id FROM Documents_with_expenses),CREATE TABLE Documents (document_id VARCHAR); CREATE TABLE Documents_with_expenses (document_id VARCHAR)
What are the dates for the documents with both 'GV' type and 'SF' type expenses?,SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id = T2.document_id WHERE T2.budget_type_code = 'SF',"CREATE TABLE Documents_with_Expenses (document_id VARCHAR, budget_type_code VARCHAR); CREATE TABLE Documents (document_date VARCHAR, document_id VARCHAR)"
What are the account details with the largest value or with value having char '5' in it?,"SELECT MAX(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE ""%5%""",CREATE TABLE Accounts (Account_details INTEGER)
Find the total number of scientists.,SELECT COUNT(*) FROM scientists,CREATE TABLE scientists (Id VARCHAR)
Find the total hours of all projects.,SELECT SUM(hours) FROM projects,CREATE TABLE projects (hours INTEGER)
How many different scientists are assigned to any project?,SELECT COUNT(DISTINCT scientist) FROM assignedto,CREATE TABLE assignedto (scientist VARCHAR)
Find the number of distinct projects.,SELECT COUNT(DISTINCT name) FROM projects,CREATE TABLE projects (name VARCHAR)
Find the average hours of all projects.,SELECT AVG(hours) FROM projects,CREATE TABLE projects (hours INTEGER)
Find the name of project that continues for the longest time.,SELECT name FROM projects ORDER BY hours DESC LIMIT 1,"CREATE TABLE projects (name VARCHAR, hours VARCHAR)"
List the name of all projects that are operated longer than the average working hours of all projects.,SELECT name FROM projects WHERE hours > (SELECT AVG(hours) FROM projects),"CREATE TABLE projects (name VARCHAR, hours INTEGER)"
Find the name and hours of project that has the most number of scientists.,"SELECT T1.name, T1.hours FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T2.project ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, hours VARCHAR, code VARCHAR)"
Find the name of the project for which a scientist whose name contains ‘Smith’ is assigned to.,SELECT T2.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%',"CREATE TABLE scientists (SSN VARCHAR, name VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR)"
Find the total hours of the projects that scientists named Michael Rogers or Carol Smith are assigned to.,SELECT SUM(T2.hours) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name = 'Michael Rogers' OR T3.name = 'Carol Smith',"CREATE TABLE scientists (SSN VARCHAR, name VARCHAR); CREATE TABLE projects (hours INTEGER, code VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR)"
Find the name of projects that require between 100 and 300 hours of work.,SELECT name FROM projects WHERE hours BETWEEN 100 AND 300,"CREATE TABLE projects (name VARCHAR, hours INTEGER)"
Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.,SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'Matter of Time' INTERSECT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.name = 'A Puzzling Parallax',"CREATE TABLE projects (code VARCHAR, name VARCHAR); CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR)"
List the names of all scientists sorted in alphabetical order.,SELECT name FROM scientists ORDER BY name,CREATE TABLE scientists (name VARCHAR)
Find the number of scientists involved for each project name.,"SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name","CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR)"
Find the number of scientists involved for the projects that require more than 300 hours.,"SELECT COUNT(*), T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name","CREATE TABLE assignedto (project VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR, hours INTEGER)"
Find the number of projects which each scientist is working on and scientist's name.,"SELECT COUNT(*), T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn = T2.scientist GROUP BY T1.name","CREATE TABLE scientists (name VARCHAR, ssn VARCHAR); CREATE TABLE assignedto (scientist VARCHAR)"
Find the SSN and name of scientists who are assigned to the project with the longest hours.,"SELECT T3.ssn, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects)","CREATE TABLE scientists (ssn VARCHAR, name VARCHAR, SSN VARCHAR); CREATE TABLE projects (code VARCHAR, hours INTEGER); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (hours INTEGER)"
Find the name of scientists who are assigned to some project.,SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist = T2.ssn,"CREATE TABLE assignedto (scientist VARCHAR); CREATE TABLE scientists (name VARCHAR, ssn VARCHAR)"
Select the project names which are not assigned yet.,SELECT Name FROM Projects WHERE NOT Code IN (SELECT Project FROM AssignedTo),"CREATE TABLE Projects (Name VARCHAR, Code VARCHAR, Project VARCHAR); CREATE TABLE AssignedTo (Name VARCHAR, Code VARCHAR, Project VARCHAR)"
Find the name of scientists who are not assigned to any project.,SELECT Name FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo),"CREATE TABLE scientists (Name VARCHAR, ssn VARCHAR, scientist VARCHAR); CREATE TABLE AssignedTo (Name VARCHAR, ssn VARCHAR, scientist VARCHAR)"
Find the number of scientists who are not assigned to any project.,SELECT COUNT(*) FROM scientists WHERE NOT ssn IN (SELECT scientist FROM AssignedTo),"CREATE TABLE AssignedTo (ssn VARCHAR, scientist VARCHAR); CREATE TABLE scientists (ssn VARCHAR, scientist VARCHAR)"
Find the names of scientists who are not working on the project with the highest hours.,SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MAX(hours) FROM projects),"CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (code VARCHAR, hours INTEGER); CREATE TABLE scientists (name VARCHAR, hours INTEGER); CREATE TABLE projects (name VARCHAR, hours INTEGER)"
"List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.","SELECT T1.Name, T3.Name, T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name, T1.Name","CREATE TABLE AssignedTo (Scientist VARCHAR, Project VARCHAR); CREATE TABLE Projects (Name VARCHAR, Hours VARCHAR, Code VARCHAR); CREATE TABLE Scientists (Name VARCHAR, SSN VARCHAR)"
Find name of the project that needs the least amount of time to finish and the name of scientists who worked on it.,"SELECT T2.name, T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T2.hours = (SELECT MIN(hours) FROM projects)","CREATE TABLE scientists (name VARCHAR, SSN VARCHAR); CREATE TABLE assignedto (project VARCHAR, scientist VARCHAR); CREATE TABLE projects (name VARCHAR, code VARCHAR, hours INTEGER); CREATE TABLE projects (hours INTEGER)"
What is the name of the highest rated wine?,SELECT Name FROM WINE ORDER BY Score LIMIT 1,"CREATE TABLE WINE (Name VARCHAR, Score VARCHAR)"
Which winery is the wine that has the highest score from?,SELECT Winery FROM WINE ORDER BY SCORE LIMIT 1,"CREATE TABLE WINE (Winery VARCHAR, SCORE VARCHAR)"
Find the names of all wines produced in 2008.,"SELECT Name FROM WINE WHERE YEAR = ""2008""","CREATE TABLE WINE (Name VARCHAR, YEAR VARCHAR)"
List the grapes and appelations of all wines.,"SELECT Grape, Appelation FROM WINE","CREATE TABLE WINE (Grape VARCHAR, Appelation VARCHAR)"
List the names and scores of all wines.,"SELECT Name, Score FROM WINE","CREATE TABLE WINE (Name VARCHAR, Score VARCHAR)"
List the area and county of all appelations.,"SELECT Area, County FROM APPELLATIONS","CREATE TABLE APPELLATIONS (Area VARCHAR, County VARCHAR)"
What are the prices of wines produced before the year of 2010?,SELECT Price FROM WINE WHERE YEAR < 2010,"CREATE TABLE WINE (Price VARCHAR, YEAR INTEGER)"
List the names of all distinct wines that have scores higher than 90.,SELECT Name FROM WINE WHERE score > 90,"CREATE TABLE WINE (Name VARCHAR, score INTEGER)"
List the names of all distinct wines that are made of red color grape.,"SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = ""Red""","CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Name VARCHAR, Grape VARCHAR)"
Find the names of all distinct wines that have appellations in North Coast area.,"SELECT DISTINCT T2.Name FROM APPELLATIONs AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = ""North Coast""","CREATE TABLE APPELLATIONs (Appelation VARCHAR, Area VARCHAR); CREATE TABLE WINE (Name VARCHAR, Appelation VARCHAR)"
How many wines are produced at Robert Biale winery?,"SELECT COUNT(*) FROM WINE WHERE Winery = ""Robert Biale""",CREATE TABLE WINE (Winery VARCHAR)
How many appelations are in Napa Country?,"SELECT COUNT(*) FROM APPELLATIONS WHERE County = ""Napa""",CREATE TABLE APPELLATIONS (County VARCHAR)
Give me the average prices of wines that are produced by appelations in Sonoma County.,"SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = ""Sonoma""","CREATE TABLE WINE (Price INTEGER, Appelation VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR)"
What are the names and scores of wines that are made of white color grapes?,"SELECT T2.Name, T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = ""White""","CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Name VARCHAR, Score VARCHAR, Grape VARCHAR)"
Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.,"SELECT MAX(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.Area = ""Central Coast"" AND T2.year < 2005","CREATE TABLE APPELLATIONS (Appelation VARCHAR, Area VARCHAR); CREATE TABLE WINE (Price INTEGER, Appelation VARCHAR, year VARCHAR)"
Find the the grape whose white color grapes are used to produce wines with scores higher than 90.,"SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = ""White"" AND T2.score > 90","CREATE TABLE GRAPES (Grape VARCHAR, Color VARCHAR); CREATE TABLE WINE (Grape VARCHAR, score VARCHAR)"
What are the wines that have prices higher than 50 and made of Red color grapes?,"SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape WHERE T1.Color = ""Red"" AND T2.price > 50","CREATE TABLE WINE (Name VARCHAR, Grape VARCHAR, price VARCHAR); CREATE TABLE Grapes (Grape VARCHAR, Color VARCHAR)"
What are the wines that have prices lower than 50 and have appelations in Monterey county?,"SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = ""Monterey"" AND T2.price < 50","CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR); CREATE TABLE WINE (Name VARCHAR, Appelation VARCHAR, price VARCHAR)"
What are the numbers of wines for different grapes?,"SELECT COUNT(*), Grape FROM WINE GROUP BY Grape",CREATE TABLE WINE (Grape VARCHAR)
What are the average prices of wines for different years?,"SELECT AVG(Price), YEAR FROM WINE GROUP BY YEAR","CREATE TABLE WINE (YEAR VARCHAR, Price INTEGER)"
Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.,"SELECT DISTINCT Name FROM WINE WHERE Price > (SELECT MIN(Price) FROM wine WHERE Winery = ""John Anthony"")","CREATE TABLE wine (Name VARCHAR, Price INTEGER, Winery VARCHAR); CREATE TABLE WINE (Name VARCHAR, Price INTEGER, Winery VARCHAR)"
List the names of all distinct wines in alphabetical order.,SELECT DISTINCT Name FROM WINE ORDER BY Name,CREATE TABLE WINE (Name VARCHAR)
List the names of all distinct wines ordered by price.,SELECT DISTINCT Name FROM WINE ORDER BY price,"CREATE TABLE WINE (Name VARCHAR, price VARCHAR)"
What is the area of the appelation that produces the highest number of wines before the year of 2010?,SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING T2.year < 2010 ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE WINE (Appelation VARCHAR, year VARCHAR); CREATE TABLE APPELLATIONS (Area VARCHAR, Appelation VARCHAR)"
What is the color of the grape whose wine products has the highest average price?,SELECT T1.Color FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape = T2.Grape GROUP BY T2.Grape ORDER BY AVG(Price) DESC LIMIT 1,"CREATE TABLE GRAPES (Color VARCHAR, Grape VARCHAR); CREATE TABLE WINE (Grape VARCHAR)"
Find the distinct names of wines produced before the year of 2000 or after the year of 2010.,SELECT DISTINCT Name FROM WINE WHERE YEAR < 2000 OR YEAR > 2010,"CREATE TABLE WINE (Name VARCHAR, YEAR VARCHAR)"
Find the distinct winery of wines having price between 50 and 100.,SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100,"CREATE TABLE WINE (Winery VARCHAR, Price INTEGER)"
What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?,"SELECT AVG(Price), AVG(Cases) FROM WINE WHERE YEAR = 2009 AND Grape = ""Zinfandel""","CREATE TABLE WINE (Price INTEGER, Cases INTEGER, YEAR VARCHAR, Grape VARCHAR)"
What are the maximum price and score of wines produced by St. Helena appelation?,"SELECT MAX(Price), MAX(Score) FROM WINE WHERE Appelation = ""St. Helena""","CREATE TABLE WINE (Price INTEGER, Score INTEGER, Appelation VARCHAR)"
What are the maximum price and score of wines in each year?,"SELECT MAX(Price), MAX(Score), YEAR FROM WINE GROUP BY YEAR","CREATE TABLE WINE (YEAR VARCHAR, Price INTEGER, Score INTEGER)"
What are the average price and score of wines grouped by appelation?,"SELECT AVG(Price), AVG(Score), Appelation FROM WINE GROUP BY Appelation","CREATE TABLE WINE (Appelation VARCHAR, Price INTEGER, Score INTEGER)"
Find the wineries that have at least four wines.,SELECT Winery FROM WINE GROUP BY Winery HAVING COUNT(*) >= 4,CREATE TABLE WINE (Winery VARCHAR)
Find the country of all appelations who have at most three wines.,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation GROUP BY T2.Appelation HAVING COUNT(*) <= 3,"CREATE TABLE APPELLATIONS (County VARCHAR, Appelation VARCHAR); CREATE TABLE WINE (Appelation VARCHAR)"
What are the names of wines whose production year are before the year of all wines by Brander winery?,"SELECT Name FROM WINE WHERE YEAR < (SELECT MIN(YEAR) FROM WINE WHERE Winery = ""Brander"")","CREATE TABLE WINE (Name VARCHAR, YEAR INTEGER, Winery VARCHAR)"
What are the names of wines that are more expensive then all wines made in the year 2006?,SELECT Name FROM WINE WHERE Price > (SELECT MAX(Price) FROM WINE WHERE YEAR = 2006),"CREATE TABLE WINE (Name VARCHAR, Price INTEGER, YEAR VARCHAR)"
Find the top 3 wineries with the greatest number of wines made of white color grapes.,"SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE = T2.GRAPE WHERE T1.Color = ""White"" GROUP BY T2.Winery ORDER BY COUNT(*) DESC LIMIT 3","CREATE TABLE GRAPES (GRAPE VARCHAR, Color VARCHAR); CREATE TABLE WINE (Winery VARCHAR, GRAPE VARCHAR)"
"List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.","SELECT Grape, Winery, YEAR FROM WINE WHERE Price > 100 ORDER BY YEAR","CREATE TABLE WINE (Grape VARCHAR, Winery VARCHAR, YEAR VARCHAR, Price INTEGER)"
"List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.","SELECT Grape, Appelation, Name FROM WINE WHERE Score > 93 ORDER BY Name","CREATE TABLE WINE (Grape VARCHAR, Appelation VARCHAR, Name VARCHAR, Score INTEGER)"
Find the appelations that produce wines after the year of 2008 but not in Central Coast area.,"SELECT Appelation FROM WINE WHERE YEAR > 2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area = ""Central Coast""","CREATE TABLE WINE (Appelation VARCHAR, YEAR INTEGER, Area VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, YEAR INTEGER, Area VARCHAR)"
Find the average price of wines that are not produced from Sonoma county.,SELECT AVG(price) FROM wine WHERE NOT Appelation IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T1.County = 'Sonoma'),"CREATE TABLE wine (price INTEGER, Appelation VARCHAR); CREATE TABLE APPELLATIONS (Appelation VARCHAR, County VARCHAR); CREATE TABLE WINE (Appelation VARCHAR)"
Find the county where produces the most number of wines with score higher than 90.,SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > 90 GROUP BY T1.County ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE WINE (Appelation VARCHAR, Score INTEGER); CREATE TABLE APPELLATIONS (County VARCHAR, Appelation VARCHAR)"
How many train stations are there?,SELECT COUNT(*) FROM station,CREATE TABLE station (Id VARCHAR)
"Show the name, location, and number of platforms for all stations.","SELECT name, LOCATION, number_of_platforms FROM station","CREATE TABLE station (name VARCHAR, LOCATION VARCHAR, number_of_platforms VARCHAR)"
What are all locations of train stations?,SELECT DISTINCT LOCATION FROM station,CREATE TABLE station (LOCATION VARCHAR)
Show the names and total passengers for all train stations not in London.,"SELECT name, total_passengers FROM station WHERE LOCATION <> 'London'","CREATE TABLE station (name VARCHAR, total_passengers VARCHAR, LOCATION VARCHAR)"
Show the names and main services for train stations that have the top three total number of passengers.,"SELECT name, main_services FROM station ORDER BY total_passengers DESC LIMIT 3","CREATE TABLE station (name VARCHAR, main_services VARCHAR, total_passengers VARCHAR)"
What is the average and maximum number of total passengers for train stations in London or Glasgow?,"SELECT AVG(total_passengers), MAX(total_passengers) FROM station WHERE LOCATION = 'London' OR LOCATION = 'Glasgow'","CREATE TABLE station (total_passengers INTEGER, LOCATION VARCHAR)"
Show all locations and the total number of platforms and passengers for all train stations in each location.,"SELECT LOCATION, SUM(number_of_platforms), SUM(total_passengers) FROM station GROUP BY LOCATION","CREATE TABLE station (LOCATION VARCHAR, number_of_platforms INTEGER, total_passengers INTEGER)"
Show all locations that have train stations with at least 15 platforms and train stations with more than 25 total passengers.,SELECT DISTINCT LOCATION FROM station WHERE number_of_platforms >= 15 AND total_passengers > 25,"CREATE TABLE station (LOCATION VARCHAR, number_of_platforms VARCHAR, total_passengers VARCHAR)"
Show all locations which don't have a train station with at least 15 platforms.,SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms >= 15,"CREATE TABLE station (LOCATION VARCHAR, number_of_platforms VARCHAR)"
Show the location with most number of train stations.,SELECT LOCATION FROM station GROUP BY LOCATION ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE station (LOCATION VARCHAR)
"Show the name, time, and service for all trains.","SELECT name, TIME, service FROM train","CREATE TABLE train (name VARCHAR, TIME VARCHAR, service VARCHAR)"
Show the number of trains,SELECT COUNT(*) FROM train,CREATE TABLE train (Id VARCHAR)
Show the name and service for all trains in order by time.,"SELECT name, service FROM train ORDER BY TIME","CREATE TABLE train (name VARCHAR, service VARCHAR, TIME VARCHAR)"
Show the station name and number of trains in each station.,"SELECT T2.name, COUNT(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id","CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)"
show the train name and station name for each train.,"SELECT T2.name, T3.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id","CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train (name VARCHAR, train_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR)"
Show all train names and times in stations in London in descending order by train time.,"SELECT T3.name, T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T2.location = 'London' ORDER BY T3.time DESC","CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR); CREATE TABLE station (station_id VARCHAR, location VARCHAR); CREATE TABLE train (name VARCHAR, time VARCHAR, train_id VARCHAR)"
Show the station name with greatest number of trains.,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)"
Show the station name with at least two trains.,SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id GROUP BY T1.station_id HAVING COUNT(*) >= 2,"CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR)"
Show all locations with only 1 station.,SELECT LOCATION FROM station GROUP BY LOCATION HAVING COUNT(*) = 1,CREATE TABLE station (LOCATION VARCHAR)
Show station names without any trains.,SELECT name FROM station WHERE NOT station_id IN (SELECT station_id FROM train_station),"CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train_station (name VARCHAR, station_id VARCHAR)"
"What are the names of the stations which serve both ""Ananthapuri Express"" and ""Guruvayur Express"" trains?","SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = ""Ananthapuri Express"" INTERSECT SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id = T2.station_id JOIN train AS T3 ON T3.train_id = T1.train_id WHERE T3.Name = ""Guruvayur Express""","CREATE TABLE station (name VARCHAR, station_id VARCHAR); CREATE TABLE train (train_id VARCHAR, Name VARCHAR); CREATE TABLE train_station (station_id VARCHAR, train_id VARCHAR)"
Find the names of the trains that do not pass any station located in London.,"SELECT T2.name FROM train_station AS T1 JOIN train AS T2 ON T1.train_id = T2.train_id WHERE NOT T1.station_id IN (SELECT T4.station_id FROM train_station AS T3 JOIN station AS T4 ON T3.station_id = T4.station_id WHERE t4.location = ""London"")","CREATE TABLE station (station_id VARCHAR); CREATE TABLE train_station (station_id VARCHAR); CREATE TABLE train_station (train_id VARCHAR, station_id VARCHAR); CREATE TABLE train (name VARCHAR, train_id VARCHAR)"
List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.,"SELECT name, LOCATION FROM station ORDER BY Annual_entry_exit, Annual_interchanges","CREATE TABLE station (name VARCHAR, LOCATION VARCHAR, Annual_entry_exit VARCHAR, Annual_interchanges VARCHAR)"
List all vehicle id,SELECT vehicle_id FROM Vehicles,CREATE TABLE Vehicles (vehicle_id VARCHAR)
How many vehicle in total?,SELECT COUNT(*) FROM Vehicles,CREATE TABLE Vehicles (Id VARCHAR)
Show the detail of vehicle with id 1.,SELECT vehicle_details FROM Vehicles WHERE vehicle_id = 1,"CREATE TABLE Vehicles (vehicle_details VARCHAR, vehicle_id VARCHAR)"
List the first name middle name and last name of all staff.,"SELECT first_name, middle_name, last_name FROM Staff","CREATE TABLE Staff (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR)"
What is the birthday of the staff member with first name as Janessa and last name as Sawayn?,"SELECT date_of_birth FROM Staff WHERE first_name = ""Janessa"" AND last_name = ""Sawayn""","CREATE TABLE Staff (date_of_birth VARCHAR, first_name VARCHAR, last_name VARCHAR)"
When did the staff member with first name as Janessa and last name as Sawayn join the company?,"SELECT date_joined_staff FROM Staff WHERE first_name = ""Janessa"" AND last_name = ""Sawayn""","CREATE TABLE Staff (date_joined_staff VARCHAR, first_name VARCHAR, last_name VARCHAR)"
When did the staff member with first name as Janessa and last name as Sawayn leave the company?,"SELECT date_left_staff FROM Staff WHERE first_name = ""Janessa"" AND last_name = ""Sawayn""","CREATE TABLE Staff (date_left_staff VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many staff have the first name Ludie?,"SELECT COUNT(*) FROM Staff WHERE first_name = ""Ludie""",CREATE TABLE Staff (first_name VARCHAR)
What is the nickname of staff with first name as Janessa and last name as Sawayn?,"SELECT nickname FROM Staff WHERE first_name = ""Janessa"" AND last_name = ""Sawayn""","CREATE TABLE Staff (nickname VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many staff in total?,SELECT COUNT(*) FROM Staff,CREATE TABLE Staff (Id VARCHAR)
Which city does staff with first name as Janessa and last name as Sawayn live?,"SELECT T1.city FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn""","CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)"
Which country and state does staff with first name as Janessa and last name as Sawayn lived?,"SELECT T1.country, T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn""","CREATE TABLE Addresses (country VARCHAR, state_province_county VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How long is the total lesson time took by customer with first name as Rylan and last name as Goodwin?,"SELECT SUM(T1.lesson_time) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = ""Rylan"" AND T2.last_name = ""Goodwin""","CREATE TABLE Lessons (lesson_time INTEGER, customer_id VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is the zip code of staff with first name as Janessa and last name as Sawayn lived?,"SELECT T1.zip_postcode FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn""","CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many staff live in state Georgia?,"SELECT COUNT(*) FROM Addresses WHERE state_province_county = ""Georgia""",CREATE TABLE Addresses (state_province_county VARCHAR)
Find out the first name and last name of staff lived in city Damianfort.,"SELECT T2.first_name, T2.last_name FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id WHERE T1.city = ""Damianfort""","CREATE TABLE Staff (first_name VARCHAR, last_name VARCHAR, staff_address_id VARCHAR); CREATE TABLE Addresses (address_id VARCHAR, city VARCHAR)"
Which city lives most of staffs? List the city name and number of staffs.,"SELECT T1.city, COUNT(*) FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.city ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Staff (staff_address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)"
List the states which have between 2 to 4 staffs living there.,SELECT T1.state_province_county FROM Addresses AS T1 JOIN Staff AS T2 ON T1.address_id = T2.staff_address_id GROUP BY T1.state_province_county HAVING COUNT(*) BETWEEN 2 AND 4,"CREATE TABLE Addresses (state_province_county VARCHAR, address_id VARCHAR); CREATE TABLE Staff (staff_address_id VARCHAR)"
List the first name and last name of all customers.,"SELECT first_name, last_name FROM Customers","CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR)"
List email address and birthday of customer whose first name as Carole.,"SELECT email_address, date_of_birth FROM Customers WHERE first_name = ""Carole""","CREATE TABLE Customers (email_address VARCHAR, date_of_birth VARCHAR, first_name VARCHAR)"
List phone number and email address of customer with more than 2000 outstanding balance.,"SELECT phone_number, email_address FROM Customers WHERE amount_outstanding > 2000","CREATE TABLE Customers (phone_number VARCHAR, email_address VARCHAR, amount_outstanding INTEGER)"
"What is the status code, mobile phone number and email address of customer with last name as Kohler or first name as Marina?","SELECT customer_status_code, cell_mobile_phone_number, email_address FROM Customers WHERE first_name = ""Marina"" OR last_name = ""Kohler""","CREATE TABLE Customers (customer_status_code VARCHAR, cell_mobile_phone_number VARCHAR, email_address VARCHAR, first_name VARCHAR, last_name VARCHAR)"
When are the birthdays of customer who are classified as 'Good Customer' status?,SELECT date_of_birth FROM Customers WHERE customer_status_code = 'Good Customer',"CREATE TABLE Customers (date_of_birth VARCHAR, customer_status_code VARCHAR)"
When did customer with first name as Carole and last name as Bernhard became a customer?,"SELECT date_became_customer FROM Customers WHERE first_name = ""Carole"" AND last_name = ""Bernhard""","CREATE TABLE Customers (date_became_customer VARCHAR, first_name VARCHAR, last_name VARCHAR)"
List all customer status codes and the number of customers having each status code.,"SELECT customer_status_code, COUNT(*) FROM Customers GROUP BY customer_status_code",CREATE TABLE Customers (customer_status_code VARCHAR)
Which customer status code has least number of customers?,SELECT customer_status_code FROM Customers GROUP BY customer_status_code ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Customers (customer_status_code VARCHAR)
How many lessons taken by customer with first name as Rylan and last name as Goodwin were completed?,"SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = ""Rylan"" AND T2.last_name = ""Goodwin"" AND T1.lesson_status_code = ""Completed""","CREATE TABLE Lessons (customer_id VARCHAR, lesson_status_code VARCHAR); CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
"What is maximum, minimum and average amount of outstanding of customer?","SELECT MAX(amount_outstanding), MIN(amount_outstanding), AVG(amount_outstanding) FROM Customers",CREATE TABLE Customers (amount_outstanding INTEGER)
List the first name and last name of customers have the amount of outstanding between 1000 and 3000.,"SELECT first_name, last_name FROM Customers WHERE amount_outstanding BETWEEN 1000 AND 3000","CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, amount_outstanding INTEGER)"
List first name and last name of customers lived in city Lockmanfurt.,"SELECT T1.first_name, T1.last_name FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T2.city = ""Lockmanfurt""","CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, customer_address_id VARCHAR); CREATE TABLE Addresses (address_id VARCHAR, city VARCHAR)"
Which country does customer with first name as Carole and last name as Bernhard lived in?,"SELECT T2.country FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = ""Carole"" AND T1.last_name = ""Bernhard""","CREATE TABLE Addresses (country VARCHAR, address_id VARCHAR); CREATE TABLE Customers (customer_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is zip code of customer with first name as Carole and last name as Bernhard?,"SELECT T2.zip_postcode FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id WHERE T1.first_name = ""Carole"" AND T1.last_name = ""Bernhard""","CREATE TABLE Addresses (zip_postcode VARCHAR, address_id VARCHAR); CREATE TABLE Customers (customer_address_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
Which city does has most number of customers?,SELECT T2.city FROM Customers AS T1 JOIN Addresses AS T2 ON T1.customer_address_id = T2.address_id GROUP BY T2.city ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Customers (customer_address_id VARCHAR); CREATE TABLE Addresses (city VARCHAR, address_id VARCHAR)"
How much in total does customer with first name as Carole and last name as Bernhard paid?,"SELECT SUM(T1.amount_payment) FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = ""Carole"" AND T2.last_name = ""Bernhard""","CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR, last_name VARCHAR); CREATE TABLE Customer_Payments (amount_payment INTEGER, customer_id VARCHAR)"
List the number of customers that did not have any payment history.,SELECT COUNT(*) FROM Customers WHERE NOT customer_id IN (SELECT customer_id FROM Customer_Payments),CREATE TABLE Customers (customer_id VARCHAR); CREATE TABLE Customer_Payments (customer_id VARCHAR)
List first name and last name of customers that have more than 2 payments.,"SELECT T2.first_name, T2.last_name FROM Customer_Payments AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id HAVING COUNT(*) > 2","CREATE TABLE Customers (first_name VARCHAR, last_name VARCHAR, customer_id VARCHAR); CREATE TABLE Customer_Payments (customer_id VARCHAR)"
List all payment methods and number of payments using each payment methods.,"SELECT payment_method_code, COUNT(*) FROM Customer_Payments GROUP BY payment_method_code",CREATE TABLE Customer_Payments (payment_method_code VARCHAR)
How many lessons were in cancelled state?,"SELECT COUNT(*) FROM Lessons WHERE lesson_status_code = ""Cancelled""",CREATE TABLE Lessons (lesson_status_code VARCHAR)
"List lesson id of all lessons taught by staff with first name as Janessa, last name as Sawayn and nickname containing letter 's'.","SELECT T1.lesson_id FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn"" AND nickname LIKE ""%s%""","CREATE TABLE Lessons (lesson_id VARCHAR, staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many lessons taught by staff whose first name has letter 'a' in it?,"SELECT COUNT(*) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name LIKE ""%a%""","CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR)"
How long is the total lesson time taught by staff with first name as Janessa and last name as Sawayn?,"SELECT SUM(lesson_time) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn""","CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is average lesson price taught by staff with first name as Janessa and last name as Sawayn?,"SELECT AVG(price) FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id WHERE T2.first_name = ""Janessa"" AND T2.last_name = ""Sawayn""","CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (staff_id VARCHAR, first_name VARCHAR, last_name VARCHAR)"
How many lesson does customer with first name Ray took?,"SELECT COUNT(*) FROM Lessons AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id WHERE T2.first_name = ""Ray""","CREATE TABLE Customers (customer_id VARCHAR, first_name VARCHAR); CREATE TABLE Lessons (customer_id VARCHAR)"
Which last names are both used by customers and by staff?,SELECT last_name FROM Customers INTERSECT SELECT last_name FROM Staff,CREATE TABLE Customers (last_name VARCHAR); CREATE TABLE Staff (last_name VARCHAR)
What is the first name of the staff who did not give any lesson?,SELECT first_name FROM Staff EXCEPT SELECT T2.first_name FROM Lessons AS T1 JOIN Staff AS T2 ON T1.staff_id = T2.staff_id,"CREATE TABLE Lessons (staff_id VARCHAR); CREATE TABLE Staff (first_name VARCHAR); CREATE TABLE Staff (first_name VARCHAR, staff_id VARCHAR)"
What is the id and detail of the vehicle used in lessons for most of the times?,"SELECT T1.vehicle_id, T1.vehicle_details FROM Vehicles AS T1 JOIN Lessons AS T2 ON T1.vehicle_id = T2.vehicle_id GROUP BY T1.vehicle_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Lessons (vehicle_id VARCHAR); CREATE TABLE Vehicles (vehicle_id VARCHAR, vehicle_details VARCHAR)"
How many faculty do we have?,SELECT COUNT(*) FROM Faculty,CREATE TABLE Faculty (Id VARCHAR)
What ranks do we have for faculty?,SELECT DISTINCT rank FROM Faculty,CREATE TABLE Faculty (rank VARCHAR)
Show all the distinct buildings that have faculty rooms.,SELECT DISTINCT building FROM Faculty,CREATE TABLE Faculty (building VARCHAR)
"Show the rank, first name, and last name for all the faculty.","SELECT rank, Fname, Lname FROM Faculty","CREATE TABLE Faculty (rank VARCHAR, Fname VARCHAR, Lname VARCHAR)"
"Show the first name, last name, and phone number for all female faculty members.","SELECT Fname, Lname, phone FROM Faculty WHERE Sex = 'F'","CREATE TABLE Faculty (Fname VARCHAR, Lname VARCHAR, phone VARCHAR, Sex VARCHAR)"
Show ids for all the male faculty.,SELECT FacID FROM Faculty WHERE Sex = 'M',"CREATE TABLE Faculty (FacID VARCHAR, Sex VARCHAR)"
How many female Professors do we have?,"SELECT COUNT(*) FROM Faculty WHERE Sex = 'F' AND Rank = ""Professor""","CREATE TABLE Faculty (Sex VARCHAR, Rank VARCHAR)"
"Show the phone, room, and building for the faculty named Jerry Prince.","SELECT phone, room, building FROM Faculty WHERE Fname = ""Jerry"" AND Lname = ""Prince""","CREATE TABLE Faculty (phone VARCHAR, room VARCHAR, building VARCHAR, Fname VARCHAR, Lname VARCHAR)"
How many Professors are in building NEB?,"SELECT COUNT(*) FROM Faculty WHERE Rank = ""Professor"" AND building = ""NEB""","CREATE TABLE Faculty (Rank VARCHAR, building VARCHAR)"
Show the first name and last name for all the instructors.,"SELECT fname, lname FROM Faculty WHERE Rank = ""Instructor""","CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, Rank VARCHAR)"
Show all the buildings along with the number of faculty members the buildings have.,"SELECT building, COUNT(*) FROM Faculty GROUP BY building",CREATE TABLE Faculty (building VARCHAR)
Which building has most faculty members?,SELECT building FROM Faculty GROUP BY building ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Faculty (building VARCHAR)
Show all the buildings that have at least 10 professors.,"SELECT building FROM Faculty WHERE rank = ""Professor"" GROUP BY building HAVING COUNT(*) >= 10","CREATE TABLE Faculty (building VARCHAR, rank VARCHAR)"
"For each faculty rank, show the number of faculty members who have it.","SELECT rank, COUNT(*) FROM Faculty GROUP BY rank",CREATE TABLE Faculty (rank VARCHAR)
Show all the ranks and the number of male and female faculty for each rank.,"SELECT rank, sex, COUNT(*) FROM Faculty GROUP BY rank, sex","CREATE TABLE Faculty (rank VARCHAR, sex VARCHAR)"
Which rank has the smallest number of faculty members?,SELECT rank FROM Faculty GROUP BY rank ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Faculty (rank VARCHAR)
Show the number of male and female assistant professors.,"SELECT sex, COUNT(*) FROM Faculty WHERE rank = ""AsstProf"" GROUP BY sex","CREATE TABLE Faculty (sex VARCHAR, rank VARCHAR)"
What are the first name and last name of Linda Smith's advisor?,"SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T2.fname = ""Linda"" AND T2.lname = ""Smith""","CREATE TABLE Student (advisor VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR)"
Show the ids of students whose advisors are professors.,"SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.rank = ""Professor""","CREATE TABLE Student (StuID VARCHAR, advisor VARCHAR); CREATE TABLE Faculty (FacID VARCHAR, rank VARCHAR)"
Show first name and last name for all the students advised by Michael Goodrich.,"SELECT T2.fname, T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor WHERE T1.fname = ""Michael"" AND T1.lname = ""Goodrich""","CREATE TABLE Faculty (FacID VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Student (fname VARCHAR, lname VARCHAR, advisor VARCHAR)"
"Show the faculty id of each faculty member, along with the number of students he or she advises.","SELECT T1.FacID, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID",CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Student (advisor VARCHAR)
Show all the faculty ranks and the number of students advised by each rank.,"SELECT T1.rank, COUNT(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank","CREATE TABLE Student (advisor VARCHAR); CREATE TABLE Faculty (rank VARCHAR, FacID VARCHAR)"
What are the first and last name of the faculty who has the most students?,"SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Student (advisor VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR)"
Show the ids for all the faculty members who have at least 2 students.,SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.FacID HAVING COUNT(*) >= 2,CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Student (advisor VARCHAR)
Show ids for the faculty members who don't advise any student.,SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student,"CREATE TABLE Faculty (FacID VARCHAR, advisor VARCHAR); CREATE TABLE Student (FacID VARCHAR, advisor VARCHAR)"
What activities do we have?,SELECT activity_name FROM Activity,CREATE TABLE Activity (activity_name VARCHAR)
How many activities do we have?,SELECT COUNT(*) FROM Activity,CREATE TABLE Activity (Id VARCHAR)
How many faculty members participate in an activity?,SELECT COUNT(DISTINCT FacID) FROM Faculty_participates_in,CREATE TABLE Faculty_participates_in (FacID VARCHAR)
Show the ids of the faculty who don't participate in any activity.,SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in,CREATE TABLE Faculty (FacID VARCHAR); CREATE TABLE Faculty_participates_in (FacID VARCHAR)
Show the ids of all the faculty members who participate in an activity and advise a student.,SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student,"CREATE TABLE Student (FacID VARCHAR, advisor VARCHAR); CREATE TABLE Faculty_participates_in (FacID VARCHAR, advisor VARCHAR)"
How many activities does Mark Giuliano participate in?,"SELECT COUNT(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID WHERE T1.fname = ""Mark"" AND T1.lname = ""Giuliano""","CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (facID VARCHAR, fname VARCHAR, lname VARCHAR)"
Show the names of all the activities Mark Giuliano participates in.,"SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN Activity AS T3 ON T3.actid = T2.actid WHERE T1.fname = ""Mark"" AND T1.lname = ""Giuliano""","CREATE TABLE Activity (activity_name VARCHAR, actid VARCHAR); CREATE TABLE Faculty (facID VARCHAR, fname VARCHAR, lname VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR)"
"Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.","SELECT T1.fname, T1.lname, COUNT(*), T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID","CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR, facID VARCHAR)"
Show all the activity names and the number of faculty involved in each activity.,"SELECT T1.activity_name, COUNT(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID","CREATE TABLE Faculty_participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)"
What is the first and last name of the faculty participating in the most activities?,"SELECT T1.fname, T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Faculty_participates_in (facID VARCHAR); CREATE TABLE Faculty (fname VARCHAR, lname VARCHAR, FacID VARCHAR, facID VARCHAR)"
What is the name of the activity that has the most faculty members involved in?,SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Faculty_participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)"
Show the ids of the students who don't participate in any activity.,SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in,CREATE TABLE Participates_in (StuID VARCHAR); CREATE TABLE Student (StuID VARCHAR)
Show the ids for all the students who participate in an activity and are under 20.,SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age < 20,"CREATE TABLE Student (StuID VARCHAR, age INTEGER); CREATE TABLE Participates_in (StuID VARCHAR, age INTEGER)"
What is the first and last name of the student participating in the most activities?,"SELECT T1.fname, T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID = T2.StuID GROUP BY T1.StuID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Student (fname VARCHAR, lname VARCHAR, StuID VARCHAR); CREATE TABLE Participates_in (StuID VARCHAR)"
What is the name of the activity with the most students?,SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Participates_in (actID VARCHAR); CREATE TABLE Activity (activity_name VARCHAR, actID VARCHAR)"
Find the first names of the faculty members who are playing Canoeing or Kayaking.,SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking',"CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)"
Find the first names of professors who are not playing Canoeing or Kayaking.,SELECT lname FROM faculty WHERE rank = 'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' OR T3.activity_name = 'Kayaking',"CREATE TABLE faculty (lname VARCHAR, rank VARCHAR); CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)"
Find the first names of the faculty members who participate in Canoeing and Kayaking.,SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID JOIN activity AS T3 ON T2.actid = T2.actid WHERE T3.activity_name = 'Kayaking',"CREATE TABLE activity (activity_name VARCHAR); CREATE TABLE Faculty_participates_in (facID VARCHAR, actid VARCHAR); CREATE TABLE Faculty (lname VARCHAR, facID VARCHAR)"
Find the ids of the students who participate in Canoeing and Kayaking.,SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid = T2.actid WHERE T2.activity_name = 'Kayaking',"CREATE TABLE activity (actid VARCHAR, activity_name VARCHAR); CREATE TABLE participates_in (stuid VARCHAR)"
Find the name of the airport in the city of Goroka.,SELECT name FROM airports WHERE city = 'Goroka',"CREATE TABLE airports (name VARCHAR, city VARCHAR)"
"Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.","SELECT name, city, country, elevation FROM airports WHERE city = 'New York'","CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)"
How many airlines are there?,SELECT COUNT(*) FROM airlines,CREATE TABLE airlines (Id VARCHAR)
How many airlines does Russia has?,SELECT COUNT(*) FROM airlines WHERE country = 'Russia',CREATE TABLE airlines (country VARCHAR)
What is the maximum elevation of all airports in the country of Iceland?,SELECT MAX(elevation) FROM airports WHERE country = 'Iceland',"CREATE TABLE airports (elevation INTEGER, country VARCHAR)"
Find the name of the airports located in Cuba or Argentina.,SELECT name FROM airports WHERE country = 'Cuba' OR country = 'Argentina',"CREATE TABLE airports (name VARCHAR, country VARCHAR)"
Find the country of the airlines whose name starts with 'Orbit'.,SELECT country FROM airlines WHERE name LIKE 'Orbit%',"CREATE TABLE airlines (country VARCHAR, name VARCHAR)"
Find the name of airports whose altitude is between -50 and 50.,SELECT name FROM airports WHERE elevation BETWEEN -50 AND 50,"CREATE TABLE airports (name VARCHAR, elevation INTEGER)"
Which country is the airport that has the highest altitude located in?,SELECT country FROM airports ORDER BY elevation DESC LIMIT 1,"CREATE TABLE airports (country VARCHAR, elevation VARCHAR)"
Find the number of airports whose name contain the word 'International'.,SELECT COUNT(*) FROM airports WHERE name LIKE '%International%',CREATE TABLE airports (name VARCHAR)
How many different cities do have some airport in the country of Greenland?,SELECT COUNT(DISTINCT city) FROM airports WHERE country = 'Greenland',"CREATE TABLE airports (city VARCHAR, country VARCHAR)"
Find the number of routes operated by American Airlines.,SELECT COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines',"CREATE TABLE routes (alid VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)"
Find the number of routes whose destination airports are in Canada.,SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE country = 'Canada',CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (apid VARCHAR)
"Find the name, city, and country of the airport that has the lowest altitude.","SELECT name, city, country FROM airports ORDER BY elevation LIMIT 1","CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)"
"Find the name, city, and country of the airport that has the highest latitude.","SELECT name, city, country FROM airports ORDER BY elevation DESC LIMIT 1","CREATE TABLE airports (name VARCHAR, city VARCHAR, country VARCHAR, elevation VARCHAR)"
Find the name and city of the airport which is the destination of the most number of routes.,"SELECT T1.name, T1.city, T2.dst_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid GROUP BY T2.dst_apid ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE airports (name VARCHAR, city VARCHAR, apid VARCHAR); CREATE TABLE routes (dst_apid VARCHAR)"
Find the names of the top 10 airlines that operate the most number of routes.,"SELECT T1.name, T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T2.alid ORDER BY COUNT(*) DESC LIMIT 10","CREATE TABLE airlines (name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)"
Find the name and city of the airport which is the source for the most number of flight routes.,"SELECT T1.name, T1.city, T2.src_apid FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T2.src_apid ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE airports (name VARCHAR, city VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)"
Find the number of different airports which are the destinations of the American Airlines.,SELECT COUNT(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid WHERE T1.name = 'American Airlines',"CREATE TABLE routes (alid VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)"
Which countries has the most number of airlines?,SELECT country FROM airlines GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE airlines (country VARCHAR)
Which countries has the most number of airlines whose active status is 'Y'?,SELECT country FROM airlines WHERE active = 'Y' GROUP BY country ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE airlines (country VARCHAR, active VARCHAR)"
List all countries and their number of airlines in the descending order of number of airlines.,"SELECT country, COUNT(*) FROM airlines GROUP BY country ORDER BY COUNT(*) DESC",CREATE TABLE airlines (country VARCHAR)
How many airports are there per country? Order the countries by decreasing number of airports.,"SELECT COUNT(*), country FROM airports GROUP BY country ORDER BY COUNT(*) DESC",CREATE TABLE airports (country VARCHAR)
How many airports are there per city in the United States? Order the cities by decreasing number of airports.,"SELECT COUNT(*), city FROM airports WHERE country = 'United States' GROUP BY city ORDER BY COUNT(*) DESC","CREATE TABLE airports (city VARCHAR, country VARCHAR)"
Return the cities with more than 3 airports in the United States.,SELECT city FROM airports WHERE country = 'United States' GROUP BY city HAVING COUNT(*) > 3,"CREATE TABLE airports (city VARCHAR, country VARCHAR)"
How many cities are there that have more than 3 airports?,SELECT COUNT(*) FROM (SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 3),CREATE TABLE airports (city VARCHAR)
List the cities which have more than one airport and number of airports.,"SELECT city, COUNT(*) FROM airports GROUP BY city HAVING COUNT(*) > 1",CREATE TABLE airports (city VARCHAR)
List the cities which have more than 2 airports sorted by the number of airports.,SELECT city FROM airports GROUP BY city HAVING COUNT(*) > 2 ORDER BY COUNT(*),CREATE TABLE airports (city VARCHAR)
Find the number of routes for each source airport and the airport name.,"SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name","CREATE TABLE airports (name VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)"
"Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.","SELECT COUNT(*), T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid GROUP BY T1.name ORDER BY COUNT(*) DESC","CREATE TABLE airports (name VARCHAR, apid VARCHAR); CREATE TABLE routes (src_apid VARCHAR)"
Find the average elevation of all airports for each country.,"SELECT AVG(elevation), country FROM airports GROUP BY country","CREATE TABLE airports (country VARCHAR, elevation INTEGER)"
Find the cities which have exactly two airports.,SELECT city FROM airports GROUP BY city HAVING COUNT(*) = 2,CREATE TABLE airports (city VARCHAR)
"For each country and airline name, how many routes are there?","SELECT T1.country, T1.name, COUNT(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.country, T1.name","CREATE TABLE airlines (country VARCHAR, name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)"
Find the number of routes with destination airports in Italy.,SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = 'Italy',"CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (apid VARCHAR, country VARCHAR)"
Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.,SELECT COUNT(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid JOIN airlines AS T3 ON T1.alid = T3.alid WHERE T2.country = 'Italy' AND T3.name = 'American Airlines',"CREATE TABLE routes (dst_apid VARCHAR, alid VARCHAR); CREATE TABLE airports (apid VARCHAR, country VARCHAR); CREATE TABLE airlines (alid VARCHAR, name VARCHAR)"
Find the number of routes that have destination John F Kennedy International Airport.,SELECT COUNT(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.name = 'John F Kennedy International Airport',"CREATE TABLE airports (apid VARCHAR, name VARCHAR); CREATE TABLE routes (dst_apid VARCHAR)"
Find the number of routes from the United States to Canada.,SELECT COUNT(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States'),"CREATE TABLE airports (dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR); CREATE TABLE routes (dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR)"
Find the id of routes whose source and destination airports are in the United States.,SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country = 'United States') AND src_apid IN (SELECT apid FROM airports WHERE country = 'United States'),"CREATE TABLE routes (rid VARCHAR, dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR); CREATE TABLE airports (rid VARCHAR, dst_apid VARCHAR, src_apid VARCHAR, apid VARCHAR, country VARCHAR)"
Find the name of airline which runs the most number of routes.,SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid = T2.alid GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE airlines (name VARCHAR, alid VARCHAR); CREATE TABLE routes (alid VARCHAR)"
Find the busiest source airport that runs most number of routes in China.,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.src_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE routes (src_apid VARCHAR); CREATE TABLE airports (name VARCHAR, apid VARCHAR, country VARCHAR)"
Find the busiest destination airport that runs most number of routes in China.,SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid = T2.dst_apid WHERE T1.country = 'China' GROUP BY T1.name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE routes (dst_apid VARCHAR); CREATE TABLE airports (name VARCHAR, apid VARCHAR, country VARCHAR)"
What is the id of the most recent order?,SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1,"CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)"
what are the order id and customer id of the oldest order?,"SELECT order_id, customer_id FROM orders ORDER BY date_order_placed LIMIT 1","CREATE TABLE orders (order_id VARCHAR, customer_id VARCHAR, date_order_placed VARCHAR)"
"Find the id of the order whose shipment tracking number is ""3452"".","SELECT order_id FROM shipments WHERE shipment_tracking_number = ""3452""","CREATE TABLE shipments (order_id VARCHAR, shipment_tracking_number VARCHAR)"
Find the ids of all the order items whose product id is 11.,SELECT order_item_id FROM order_items WHERE product_id = 11,"CREATE TABLE order_items (order_item_id VARCHAR, product_id VARCHAR)"
"List the name of all the distinct customers who have orders with status ""Packing"".","SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Packing""","CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
"Find the details of all the distinct customers who have orders with status ""On Road"".","SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road""","CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_details VARCHAR, customer_id VARCHAR)"
What is the name of the customer who has the most orders?,SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
What is the customer id of the customer who has the most orders?,SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR)
"Give me a list of id and status of orders which belong to the customer named ""Jeramie"".","SELECT T2.order_id, T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = ""Jeramie""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE orders (order_id VARCHAR, order_status VARCHAR, customer_id VARCHAR)"
"Find the dates of orders which belong to the customer named ""Jeramie"".","SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = ""Jeramie""","CREATE TABLE customers (customer_id VARCHAR, customer_name VARCHAR); CREATE TABLE orders (date_order_placed VARCHAR, customer_id VARCHAR)"
Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.,"SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= ""2009-01-01"" AND T2.date_order_placed <= ""2010-01-01""","CREATE TABLE orders (customer_id VARCHAR, date_order_placed VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?,"SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= ""1975-01-01"" AND T1.date_order_placed <= ""1976-01-01""","CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR); CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)"
"Find the names of the customers who have order status both ""On Road"" and ""Shipped"".","SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road"" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Shipped""","CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
"Find the id of the customers who have order status both ""On Road"" and ""Shipped"".","SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""On Road"" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = ""Shipped""","CREATE TABLE customers (customer_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR, order_status VARCHAR)"
When was the order placed whose shipment tracking number is 3452? Give me the date.,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452,"CREATE TABLE shipments (order_id VARCHAR, shipment_tracking_number VARCHAR); CREATE TABLE orders (date_order_placed VARCHAR, order_id VARCHAR)"
What is the placement date of the order whose invoice number is 10?,SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10,"CREATE TABLE orders (date_order_placed VARCHAR, order_id VARCHAR); CREATE TABLE shipments (order_id VARCHAR, invoice_number VARCHAR)"
List the count and id of each product in all the orders.,"SELECT COUNT(*), T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id","CREATE TABLE orders (order_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR); CREATE TABLE products (product_id VARCHAR)"
List the name and count of each product in all orders.,"SELECT T3.product_name, COUNT(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id","CREATE TABLE orders (order_id VARCHAR); CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR, product_id VARCHAR)"
Find the ids of orders which are shipped after 2000-01-01.,"SELECT order_id FROM shipments WHERE shipment_date > ""2000-01-01""","CREATE TABLE shipments (order_id VARCHAR, shipment_date INTEGER)"
Find the id of the order which is shipped most recently.,SELECT order_id FROM shipments WHERE shipment_date = (SELECT MAX(shipment_date) FROM shipments),"CREATE TABLE shipments (order_id VARCHAR, shipment_date INTEGER)"
List the names of all distinct products in alphabetical order.,SELECT DISTINCT product_name FROM products ORDER BY product_name,CREATE TABLE products (product_name VARCHAR)
List the ids of all distinct orders ordered by placed date.,SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed,"CREATE TABLE orders (order_id VARCHAR, date_order_placed VARCHAR)"
What is the id of the order which has the most items?,SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE orders (order_id VARCHAR); CREATE TABLE order_items (order_id VARCHAR)
Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.,"SELECT invoice_number FROM invoices WHERE invoice_date < ""1989-09-03"" OR invoice_date > ""2007-12-25""","CREATE TABLE invoices (invoice_number VARCHAR, invoice_date VARCHAR)"
Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.,"SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < ""1989-09-03"" OR invoice_date > ""2007-12-25""","CREATE TABLE invoices (invoice_details VARCHAR, invoice_date VARCHAR)"
"For each customer who has at least two orders, find the customer name and number of orders made.","SELECT T2.customer_name, COUNT(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) >= 2","CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
Find the name of the customers who have at most two orders.,SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING COUNT(*) <= 2,"CREATE TABLE orders (customer_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR)"
"List the names of the customers who have once bought product ""food"".","SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = ""food"" GROUP BY T1.customer_id HAVING COUNT(*) >= 1","CREATE TABLE products (product_name VARCHAR, product_id VARCHAR); CREATE TABLE orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_id VARCHAR)"
"List the names of customers who have once canceled the purchase of the product ""food"" (the item status is ""Cancel"").","SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = ""Cancel"" AND T4.product_name = ""food"" GROUP BY T1.customer_id HAVING COUNT(*) >= 1","CREATE TABLE orders (customer_id VARCHAR, order_id VARCHAR); CREATE TABLE customers (customer_name VARCHAR, customer_id VARCHAR); CREATE TABLE products (product_id VARCHAR, product_name VARCHAR); CREATE TABLE order_items (product_id VARCHAR, order_item_status VARCHAR, order_id VARCHAR)"
How many architects are female?,SELECT COUNT(*) FROM architect WHERE gender = 'female',CREATE TABLE architect (gender VARCHAR)
"List the name, nationality and id of all male architects ordered by their names lexicographically.","SELECT name, nationality, id FROM architect WHERE gender = 'male' ORDER BY name","CREATE TABLE architect (name VARCHAR, nationality VARCHAR, id VARCHAR, gender VARCHAR)"
What is the maximum length in meters for the bridges and what are the architects' names?,"SELECT MAX(T1.length_meters), T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id = T2.id","CREATE TABLE architect (name VARCHAR, id VARCHAR); CREATE TABLE bridge (length_meters INTEGER, architect_id VARCHAR)"
What is the average length in feet of the bridges?,SELECT AVG(length_feet) FROM bridge,CREATE TABLE bridge (length_feet INTEGER)
What are the names and year of construction for the mills of 'Grondzeiler' type?,"SELECT name, built_year FROM mill WHERE TYPE = 'Grondzeiler'","CREATE TABLE mill (name VARCHAR, built_year VARCHAR, TYPE VARCHAR)"
What are the distinct names and nationalities of the architects who have ever built a mill?,"SELECT DISTINCT T1.name, T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id = T2.architect_id","CREATE TABLE mill (Id VARCHAR); CREATE TABLE architect (name VARCHAR, nationality VARCHAR, id VARCHAR)"
What are the names of the mills which are not located in 'Donceel'?,SELECT name FROM mill WHERE LOCATION <> 'Donceel',"CREATE TABLE mill (name VARCHAR, LOCATION VARCHAR)"
What are the distinct types of mills that are built by American or Canadian architects?,SELECT DISTINCT T1.type FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id WHERE T2.nationality = 'American' OR T2.nationality = 'Canadian',"CREATE TABLE architect (Id VARCHAR); CREATE TABLE mill (type VARCHAR, architect_id VARCHAR)"
What are the ids and names of the architects who built at least 3 bridges ?,"SELECT T1.id, T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) >= 3","CREATE TABLE architect (id VARCHAR, name VARCHAR); CREATE TABLE bridge (architect_id VARCHAR)"
"What is the id, name and nationality of the architect who built most mills?","SELECT T1.id, T1.name, T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE architect (id VARCHAR, name VARCHAR, nationality VARCHAR); CREATE TABLE mill (architect_id VARCHAR)"
"What are the ids, names and genders of the architects who built two bridges or one mill?","SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 2 UNION SELECT T1.id, T1.name, T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id = T2.architect_id GROUP BY T1.id HAVING COUNT(*) = 1","CREATE TABLE mill (architect_id VARCHAR); CREATE TABLE architect (id VARCHAR, name VARCHAR, gender VARCHAR); CREATE TABLE bridge (architect_id VARCHAR)"
What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?,SELECT LOCATION FROM bridge WHERE name = 'Kolob Arch' OR name = 'Rainbow Bridge',"CREATE TABLE bridge (LOCATION VARCHAR, name VARCHAR)"
Which of the mill names contains the french word 'Moulin'?,SELECT name FROM mill WHERE name LIKE '%Moulin%',CREATE TABLE mill (name VARCHAR)
What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?,SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id = T2.id JOIN bridge AS T3 ON T3.architect_id = T2.id WHERE T3.length_meters > 80,"CREATE TABLE architect (Id VARCHAR); CREATE TABLE mill (name VARCHAR, architect_id VARCHAR); CREATE TABLE bridge (architect_id VARCHAR, length_meters INTEGER)"
"What is the most common mill type, and how many are there?","SELECT TYPE, COUNT(*) FROM mill GROUP BY TYPE ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE mill (TYPE VARCHAR)
How many architects haven't built a mill before year 1850?,SELECT COUNT(*) FROM architect WHERE NOT id IN (SELECT architect_id FROM mill WHERE built_year < 1850),"CREATE TABLE mill (id VARCHAR, architect_id VARCHAR, built_year INTEGER); CREATE TABLE architect (id VARCHAR, architect_id VARCHAR, built_year INTEGER)"
"show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id = t2.id WHERE t2.nationality = 'American' ORDER BY t1.length_feet,"CREATE TABLE bridge (name VARCHAR, architect_id VARCHAR, length_feet VARCHAR); CREATE TABLE architect (id VARCHAR, nationality VARCHAR)"
How many book clubs are there?,SELECT COUNT(*) FROM book_club,CREATE TABLE book_club (Id VARCHAR)
"show the titles, and authors or editors for all books made after the year 1989.","SELECT book_title, author_or_editor FROM book_club WHERE YEAR > 1989","CREATE TABLE book_club (book_title VARCHAR, author_or_editor VARCHAR, YEAR INTEGER)"
Show all distinct publishers for books.,SELECT DISTINCT publisher FROM book_club,CREATE TABLE book_club (publisher VARCHAR)
"Show the years, book titles, and publishers for all books, in descending order by year.","SELECT YEAR, book_title, publisher FROM book_club ORDER BY YEAR DESC","CREATE TABLE book_club (YEAR VARCHAR, book_title VARCHAR, publisher VARCHAR)"
Show all publishers and the number of books for each publisher.,"SELECT publisher, COUNT(*) FROM book_club GROUP BY publisher",CREATE TABLE book_club (publisher VARCHAR)
What is the publisher with most number of books?,SELECT publisher FROM book_club GROUP BY publisher ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE book_club (publisher VARCHAR)
Show all book categories and the number of books in each category.,"SELECT category, COUNT(*) FROM book_club GROUP BY category",CREATE TABLE book_club (category VARCHAR)
List categories that have at least two books after year 1989.,SELECT category FROM book_club WHERE YEAR > 1989 GROUP BY category HAVING COUNT(*) >= 2,"CREATE TABLE book_club (category VARCHAR, YEAR INTEGER)"
Show publishers with a book published in 1989 and a book in 1990.,SELECT publisher FROM book_club WHERE YEAR = 1989 INTERSECT SELECT publisher FROM book_club WHERE YEAR = 1990,"CREATE TABLE book_club (publisher VARCHAR, YEAR VARCHAR)"
Show all publishers which do not have a book in 1989.,SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR = 1989,"CREATE TABLE book_club (publisher VARCHAR, YEAR VARCHAR)"
"Show all movie titles, years, and directors, ordered by budget.","SELECT title, YEAR, director FROM movie ORDER BY budget_million","CREATE TABLE movie (title VARCHAR, YEAR VARCHAR, director VARCHAR, budget_million VARCHAR)"
How many movie directors are there?,SELECT COUNT(DISTINCT director) FROM movie,CREATE TABLE movie (director VARCHAR)
What is the title and director for the movie with highest worldwide gross in the year 2000 or before?,"SELECT title, director FROM movie WHERE YEAR <= 2000 ORDER BY gross_worldwide DESC LIMIT 1","CREATE TABLE movie (title VARCHAR, director VARCHAR, YEAR VARCHAR, gross_worldwide VARCHAR)"
Show all director names who have a movie in both year 1999 and 2000.,SELECT director FROM movie WHERE YEAR = 2000 INTERSECT SELECT director FROM movie WHERE YEAR = 1999,"CREATE TABLE movie (director VARCHAR, YEAR VARCHAR)"
Show all director names who have a movie in the year 1999 or 2000.,SELECT director FROM movie WHERE YEAR = 1999 OR YEAR = 2000,"CREATE TABLE movie (director VARCHAR, YEAR VARCHAR)"
"What is the average, maximum, and minimum budget for all movies before 2000.","SELECT AVG(budget_million), MAX(budget_million), MIN(budget_million) FROM movie WHERE YEAR < 2000","CREATE TABLE movie (budget_million INTEGER, YEAR INTEGER)"
List all company names with a book published by Alyson.,SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id = T2.book_club_id WHERE T2.publisher = 'Alyson',"CREATE TABLE culture_company (company_name VARCHAR, book_club_id VARCHAR); CREATE TABLE book_club (book_club_id VARCHAR, publisher VARCHAR)"
Show the movie titles and book titles for all companies in China.,"SELECT T1.title, T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id JOIN book_club AS T3 ON T3.book_club_id = T2.book_club_id WHERE T2.incorporated_in = 'China'","CREATE TABLE movie (title VARCHAR, movie_id VARCHAR); CREATE TABLE culture_company (movie_id VARCHAR, book_club_id VARCHAR, incorporated_in VARCHAR); CREATE TABLE book_club (book_title VARCHAR, book_club_id VARCHAR)"
Show all company names with a movie directed in year 1999.,SELECT T2.company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T1.year = 1999,"CREATE TABLE movie (movie_id VARCHAR, year VARCHAR); CREATE TABLE culture_company (company_name VARCHAR, movie_id VARCHAR)"
How many singers do we have?,SELECT COUNT(*) FROM singer,CREATE TABLE singer (Id VARCHAR)
"Show name, country, age for all singers ordered by age from the oldest to the youngest.","SELECT name, country, age FROM singer ORDER BY age DESC","CREATE TABLE singer (name VARCHAR, country VARCHAR, age VARCHAR)"
"What is the average, minimum, and maximum age of all singers from France?","SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France'","CREATE TABLE singer (age INTEGER, country VARCHAR)"
Show the name and the release year of the song by the youngest singer.,"SELECT song_name, song_release_year FROM singer ORDER BY age LIMIT 1","CREATE TABLE singer (song_name VARCHAR, song_release_year VARCHAR, age VARCHAR)"
What are all distinct countries where singers above age 20 are from?,SELECT DISTINCT country FROM singer WHERE age > 20,"CREATE TABLE singer (country VARCHAR, age INTEGER)"
Show all countries and the number of singers in each country.,"SELECT country, COUNT(*) FROM singer GROUP BY country",CREATE TABLE singer (country VARCHAR)
List all song names by singers above the average age.,SELECT song_name FROM singer WHERE age > (SELECT AVG(age) FROM singer),"CREATE TABLE singer (song_name VARCHAR, age INTEGER)"
Show location and name for all stadiums with a capacity between 5000 and 10000.,"SELECT LOCATION, name FROM stadium WHERE capacity BETWEEN 5000 AND 10000","CREATE TABLE stadium (LOCATION VARCHAR, name VARCHAR, capacity INTEGER)"
What is the maximum capacity and the average of all stadiums ?,"SELECT MAX(capacity), average FROM stadium","CREATE TABLE stadium (average VARCHAR, capacity INTEGER)"
What is the average and maximum capacities for all stadiums ?,"SELECT AVG(capacity), MAX(capacity) FROM stadium",CREATE TABLE stadium (capacity INTEGER)
What is the name and capacity for the stadium with highest average attendance?,"SELECT name, capacity FROM stadium ORDER BY average DESC LIMIT 1","CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, average VARCHAR)"
How many concerts are there in year 2014 or 2015?,SELECT COUNT(*) FROM concert WHERE YEAR = 2014 OR YEAR = 2015,CREATE TABLE concert (YEAR VARCHAR)
Show the stadium name and the number of concerts in each stadium.,"SELECT T2.name, COUNT(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id GROUP BY T1.stadium_id","CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR)"
Show the stadium name and capacity with most number of concerts in year 2014 or after.,"SELECT T2.name, T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year >= 2014 GROUP BY T2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, year VARCHAR)"
What is the name and capacity of the stadium with the most concerts after 2013 ?,"SELECT t2.name, t2.capacity FROM concert AS t1 JOIN stadium AS t2 ON t1.stadium_id = t2.stadium_id WHERE t1.year > 2013 GROUP BY t2.stadium_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE concert (stadium_id VARCHAR, year INTEGER); CREATE TABLE stadium (name VARCHAR, capacity VARCHAR, stadium_id VARCHAR)"
Which year has most number of concerts?,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE concert (YEAR VARCHAR)
Show the stadium names without any concert.,SELECT name FROM stadium WHERE NOT stadium_id IN (SELECT stadium_id FROM concert),"CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (name VARCHAR, stadium_id VARCHAR)"
Show countries where a singer above age 40 and a singer below 30 are from.,SELECT country FROM singer WHERE age > 40 INTERSECT SELECT country FROM singer WHERE age < 30,"CREATE TABLE singer (country VARCHAR, age INTEGER)"
Show names for all stadiums except for stadiums having a concert in year 2014.,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.year = 2014,"CREATE TABLE stadium (name VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, year VARCHAR); CREATE TABLE stadium (name VARCHAR)"
Show the name and theme for all concerts and the number of singers in each concert.,"SELECT T2.concert_name, T2.theme, COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id = T2.concert_id GROUP BY T2.concert_id","CREATE TABLE singer_in_concert (concert_id VARCHAR); CREATE TABLE concert (concert_name VARCHAR, theme VARCHAR, concert_id VARCHAR)"
"What are the names , themes , and number of singers for every concert ?","SELECT t2.concert_name, t2.theme, COUNT(*) FROM singer_in_concert AS t1 JOIN concert AS t2 ON t1.concert_id = t2.concert_id GROUP BY t2.concert_id","CREATE TABLE singer_in_concert (concert_id VARCHAR); CREATE TABLE concert (concert_name VARCHAR, theme VARCHAR, concert_id VARCHAR)"
List singer names and number of concerts for each singer.,"SELECT T2.name, COUNT(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id GROUP BY T2.singer_id","CREATE TABLE singer_in_concert (singer_id VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)"
List all singer names in concerts in year 2014.,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id = T2.singer_id JOIN concert AS T3 ON T1.concert_id = T3.concert_id WHERE T3.year = 2014,"CREATE TABLE singer_in_concert (singer_id VARCHAR, concert_id VARCHAR); CREATE TABLE concert (concert_id VARCHAR, year VARCHAR); CREATE TABLE singer (name VARCHAR, singer_id VARCHAR)"
what is the name and nation of the singer who have a song having 'Hey' in its name?,"SELECT name, country FROM singer WHERE song_name LIKE '%Hey%'","CREATE TABLE singer (name VARCHAR, country VARCHAR, song_name VARCHAR)"
Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2014 INTERSECT SELECT T2.name, T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.stadium_id WHERE T1.Year = 2015","CREATE TABLE stadium (name VARCHAR, location VARCHAR, stadium_id VARCHAR); CREATE TABLE concert (stadium_id VARCHAR, Year VARCHAR)"
Find the number of concerts happened in the stadium with the highest capacity .,SELECT COUNT(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY capacity DESC LIMIT 1),"CREATE TABLE concert (stadium_id VARCHAR, capacity VARCHAR); CREATE TABLE stadium (stadium_id VARCHAR, capacity VARCHAR)"
Find the number of pets whose weight is heavier than 10.,SELECT COUNT(*) FROM pets WHERE weight > 10,CREATE TABLE pets (weight INTEGER)
Find the weight of the youngest dog.,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,"CREATE TABLE pets (weight VARCHAR, pet_age VARCHAR)"
Find the maximum weight for each type of pet. List the maximum weight and pet type.,"SELECT MAX(weight), petType FROM pets GROUP BY petType","CREATE TABLE pets (petType VARCHAR, weight INTEGER)"
Find number of pets owned by students who are older than 20.,SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.age > 20,"CREATE TABLE student (stuid VARCHAR, age INTEGER); CREATE TABLE has_pet (stuid VARCHAR)"
Find the number of dog pets that are raised by female students (with sex F).,SELECT COUNT(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T2.petid = T3.petid WHERE T1.sex = 'F' AND T3.pettype = 'dog',"CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR, sex VARCHAR)"
Find the number of distinct type of pets.,SELECT COUNT(DISTINCT pettype) FROM pets,CREATE TABLE pets (pettype VARCHAR)
Find the first name of students who have cat or dog pet.,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' OR T3.pettype = 'dog',"CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (Fname VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)"
Find the first name of students who have both cat and dog pets .,SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'cat' INTERSECT SELECT t1.fname FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid JOIN pets AS t3 ON t3.petid = t2.petid WHERE t3.pettype = 'dog',"CREATE TABLE student (fname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)"
What are the students' first names who have both cats and dogs as pets?,SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog',"CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (Fname VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)"
Find the major and age of students who do not have a cat pet.,"SELECT major, age FROM student WHERE NOT stuid IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')","CREATE TABLE student (stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (major VARCHAR, age VARCHAR, stuid VARCHAR)"
Find the id of students who do not have a cat pet.,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat',"CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR); CREATE TABLE student (stuid VARCHAR)"
Find the first name and age of students who have a dog but do not have a cat as a pet.,"SELECT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'dog' AND NOT T1.stuid IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pettype = 'cat')","CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE pets (petid VARCHAR, pettype VARCHAR)"
Find the type and weight of the youngest pet.,"SELECT pettype, weight FROM pets ORDER BY pet_age LIMIT 1","CREATE TABLE pets (pettype VARCHAR, weight VARCHAR, pet_age VARCHAR)"
Find the id and weight of all pets whose age is older than 1.,"SELECT petid, weight FROM pets WHERE pet_age > 1","CREATE TABLE pets (petid VARCHAR, weight VARCHAR, pet_age INTEGER)"
Find the average and maximum age for each type of pet.,"SELECT AVG(pet_age), MAX(pet_age), pettype FROM pets GROUP BY pettype","CREATE TABLE pets (pettype VARCHAR, pet_age INTEGER)"
Find the average weight for each pet type.,"SELECT AVG(weight), pettype FROM pets GROUP BY pettype","CREATE TABLE pets (pettype VARCHAR, weight INTEGER)"
Find the first name and age of students who have a pet.,"SELECT DISTINCT T1.fname, T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid","CREATE TABLE student (fname VARCHAR, age VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)"
Find the id of the pet owned by student whose last name is ‘Smith’.,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid WHERE T1.Lname = 'Smith',"CREATE TABLE has_pet (petid VARCHAR, stuid VARCHAR); CREATE TABLE student (stuid VARCHAR, Lname VARCHAR)"
Find the number of pets for each student who has any pet and student id.,"SELECT COUNT(*), T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid",CREATE TABLE has_pet (stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)
"For students who have pets , how many pets does each student have ? list their ids instead of names .","SELECT COUNT(*), t1.stuid FROM student AS t1 JOIN has_pet AS t2 ON t1.stuid = t2.stuid GROUP BY t1.stuid",CREATE TABLE has_pet (stuid VARCHAR); CREATE TABLE student (stuid VARCHAR)
Find the first name and gender of student who have more than one pet.,"SELECT T1.fname, T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid GROUP BY T1.stuid HAVING COUNT(*) > 1","CREATE TABLE student (fname VARCHAR, sex VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR)"
Find the last name of the student who has a cat that is age 3.,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid JOIN pets AS T3 ON T3.petid = T2.petid WHERE T3.pet_age = 3 AND T3.pettype = 'cat',"CREATE TABLE student (lname VARCHAR, stuid VARCHAR); CREATE TABLE has_pet (stuid VARCHAR, petid VARCHAR); CREATE TABLE pets (petid VARCHAR, pet_age VARCHAR, pettype VARCHAR)"
Find the average age of students who do not have any pet .,SELECT AVG(age) FROM student WHERE NOT stuid IN (SELECT stuid FROM has_pet),"CREATE TABLE student (age INTEGER, stuid VARCHAR); CREATE TABLE has_pet (age INTEGER, stuid VARCHAR)"
How many continents are there?,SELECT COUNT(*) FROM CONTINENTS,CREATE TABLE CONTINENTS (Id VARCHAR)
"How many countries does each continent have? List the continent id, continent name and the number of countries.","SELECT T1.ContId, T1.Continent, COUNT(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId","CREATE TABLE COUNTRIES (Continent VARCHAR); CREATE TABLE CONTINENTS (ContId VARCHAR, Continent VARCHAR)"
How many countries are listed?,SELECT COUNT(*) FROM COUNTRIES,CREATE TABLE COUNTRIES (Id VARCHAR)
"How many models does each car maker produce? List maker full name, id and the number.","SELECT T1.FullName, T1.Id, COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id","CREATE TABLE MODEL_LIST (Maker VARCHAR); CREATE TABLE CAR_MAKERS (FullName VARCHAR, Id VARCHAR)"
Which model of the car has the minimum horsepower?,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.horsepower LIMIT 1,"CREATE TABLE CARS_DATA (Id VARCHAR, horsepower VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR)"
Find the model of the car whose weight is below the average weight.,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Weight < (SELECT AVG(Weight) FROM CARS_DATA),"CREATE TABLE CARS_DATA (Id VARCHAR, Weight INTEGER); CREATE TABLE CARS_DATA (Weight INTEGER); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)"
Find the name of the makers that produced some cars in the year of 1970?,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model JOIN CARS_DATA AS T4 ON T3.MakeId = T4.id WHERE T4.year = '1970',"CREATE TABLE MODEL_LIST (Maker VARCHAR, model VARCHAR); CREATE TABLE CAR_MAKERS (Maker VARCHAR, Id VARCHAR); CREATE TABLE CARS_DATA (id VARCHAR, year VARCHAR); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)"
Find the make and production time of the cars that were produced in the earliest year?,"SELECT T2.Make, T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Year = (SELECT MIN(YEAR) FROM CARS_DATA)","CREATE TABLE CARS_DATA (YEAR INTEGER); CREATE TABLE CAR_NAMES (Make VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Year VARCHAR, Id VARCHAR)"
Which distinct car models are the produced after 1980?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model = T2.model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.id WHERE T3.year > 1980,"CREATE TABLE CARS_DATA (id VARCHAR, year INTEGER); CREATE TABLE MODEL_LIST (model VARCHAR); CREATE TABLE CAR_NAMES (model VARCHAR, MakeId VARCHAR)"
How many car makers are there in each continents? List the continent name and the count.,"SELECT T1.Continent, COUNT(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent","CREATE TABLE COUNTRIES (continent VARCHAR, CountryId VARCHAR); CREATE TABLE CONTINENTS (Continent VARCHAR, ContId VARCHAR); CREATE TABLE car_makers (Country VARCHAR)"
Which of the countries has the most car makers? List the country name.,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId GROUP BY T1.Country ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE CAR_MAKERS (Country VARCHAR); CREATE TABLE COUNTRIES (CountryName VARCHAR, CountryId VARCHAR)"
How many car models are produced by each maker ? Only list the count and the maker full name .,"SELECT COUNT(*), t2.fullname FROM model_list AS t1 JOIN car_makers AS t2 ON t1.maker = t2.id GROUP BY t2.id","CREATE TABLE model_list (maker VARCHAR); CREATE TABLE car_makers (fullname VARCHAR, id VARCHAR)"
What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"SELECT COUNT(*), T2.FullName, T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id","CREATE TABLE CAR_MAKERS (FullName VARCHAR, id VARCHAR, Id VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)"
What is the accelerate of the car make amc hornet sportabout (sw)?,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Make = 'amc hornet sportabout (sw)',"CREATE TABLE CARS_DATA (Accelerate VARCHAR, Id VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Make VARCHAR)"
How many car makers are there in france?,SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country = T2.CountryId WHERE T2.CountryName = 'france',"CREATE TABLE COUNTRIES (CountryId VARCHAR, CountryName VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)"
How many car models are produced in the usa?,SELECT COUNT(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id JOIN COUNTRIES AS T3 ON T2.Country = T3.CountryId WHERE T3.CountryName = 'usa',"CREATE TABLE CAR_MAKERS (Id VARCHAR, Country VARCHAR); CREATE TABLE COUNTRIES (CountryId VARCHAR, CountryName VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)"
What is the average miles per gallon(mpg) of the cars with 4 cylinders?,SELECT AVG(mpg) FROM CARS_DATA WHERE Cylinders = 4,"CREATE TABLE CARS_DATA (mpg INTEGER, Cylinders VARCHAR)"
What is the smallest weight of the car produced with 8 cylinders on 1974 ?,SELECT MIN(weight) FROM cars_data WHERE cylinders = 8 AND year = 1974,"CREATE TABLE cars_data (weight INTEGER, cylinders VARCHAR, year VARCHAR)"
What are all the makers and models?,"SELECT Maker, Model FROM MODEL_LIST","CREATE TABLE MODEL_LIST (Maker VARCHAR, Model VARCHAR)"
What are the countries having at least one car maker? List name and id.,"SELECT T1.CountryName, T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.CountryId HAVING COUNT(*) >= 1","CREATE TABLE CAR_MAKERS (Country VARCHAR); CREATE TABLE COUNTRIES (CountryName VARCHAR, CountryId VARCHAR)"
What is the number of the cars with horsepower more than 150?,SELECT COUNT(*) FROM CARS_DATA WHERE horsepower > 150,CREATE TABLE CARS_DATA (horsepower INTEGER)
What is the average weight of cars each year?,"SELECT AVG(Weight), YEAR FROM CARS_DATA GROUP BY YEAR","CREATE TABLE CARS_DATA (YEAR VARCHAR, Weight INTEGER)"
Which countries in europe have at least 3 car manufacturers?,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent = T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId = T3.Country WHERE T2.Continent = 'europe' GROUP BY T1.CountryName HAVING COUNT(*) >= 3,"CREATE TABLE COUNTRIES (CountryName VARCHAR, Continent VARCHAR, CountryId VARCHAR); CREATE TABLE CONTINENTS (ContId VARCHAR, Continent VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)"
What is the maximum horsepower and the make of the car models with 3 cylinders?,"SELECT T2.horsepower, T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.cylinders = 3 ORDER BY T2.horsepower DESC LIMIT 1","CREATE TABLE CAR_NAMES (Make VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (horsepower VARCHAR, Id VARCHAR, cylinders VARCHAR)"
"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id ORDER BY T2.mpg DESC LIMIT 1,"CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, mpg VARCHAR)"
What is the car model with the highest mpg ?,SELECT t1.model FROM car_names AS t1 JOIN cars_data AS t2 ON t1.makeid = t2.id ORDER BY t2.mpg DESC LIMIT 1,"CREATE TABLE cars_data (id VARCHAR, mpg VARCHAR); CREATE TABLE car_names (model VARCHAR, makeid VARCHAR)"
What is the average horsepower of the cars before 1980?,SELECT AVG(horsepower) FROM CARS_DATA WHERE YEAR < 1980,"CREATE TABLE CARS_DATA (horsepower INTEGER, YEAR INTEGER)"
What is the average horsepower for all cars produced before 1980 ?,SELECT AVG(horsepower) FROM cars_data WHERE year < 1980,"CREATE TABLE cars_data (horsepower INTEGER, year INTEGER)"
What is the average edispl of the cars of model volvo?,SELECT AVG(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T1.Model = 'volvo',"CREATE TABLE CARS_DATA (edispl INTEGER, Id VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Model VARCHAR)"
What is the maximum accelerate for different number of cylinders?,"SELECT MAX(Accelerate), Cylinders FROM CARS_DATA GROUP BY Cylinders","CREATE TABLE CARS_DATA (Cylinders VARCHAR, Accelerate INTEGER)"
Which model has the most version(make) of cars?,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE CAR_NAMES (Model VARCHAR)
How many cars have more than 4 cylinders?,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 4,CREATE TABLE CARS_DATA (Cylinders INTEGER)
how many cars were produced in 1980?,SELECT COUNT(*) FROM CARS_DATA WHERE YEAR = 1980,CREATE TABLE CARS_DATA (YEAR VARCHAR)
How many car models were produced by the maker with full name American Motor Company?,SELECT COUNT(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker WHERE T1.FullName = 'American Motor Company',"CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR)"
Which makers designed more than 3 car models? List full name and the id.,"SELECT T1.FullName, T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) > 3","CREATE TABLE MODEL_LIST (Maker VARCHAR); CREATE TABLE CAR_MAKERS (FullName VARCHAR, Id VARCHAR)"
Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model = T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker = T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId = T4.Id WHERE T3.FullName = 'General Motors' OR T4.weight > 3500,"CREATE TABLE MODEL_LIST (Model VARCHAR, Maker VARCHAR); CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, weight VARCHAR)"
In which years cars were produced weighing no less than 3000 and no more than 4000 ?,SELECT DISTINCT year FROM cars_data WHERE weight BETWEEN 3000 AND 4000,"CREATE TABLE cars_data (year VARCHAR, weight INTEGER)"
What is the horsepower of the car with the largest accelerate?,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1,"CREATE TABLE CARS_DATA (horsepower VARCHAR, accelerate VARCHAR)"
"For model volvo, how many cylinders does the car with the least accelerate have?",SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T2.Model = 'volvo' ORDER BY T1.accelerate LIMIT 1,"CREATE TABLE CARS_DATA (cylinders VARCHAR, Id VARCHAR, accelerate VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Model VARCHAR)"
How many cars have a larger accelerate than the car with the largest horsepower?,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate > (SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1),"CREATE TABLE CARS_DATA (Accelerate INTEGER, Horsepower VARCHAR)"
How many countries has more than 2 car makers ?,SELECT COUNT(*) FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 2,CREATE TABLE car_makers (country VARCHAR); CREATE TABLE countries (countryid VARCHAR)
How many cars has over 6 cylinders?,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders > 6,CREATE TABLE CARS_DATA (Cylinders INTEGER)
"For the cars with 4 cylinders, which model has the largest horsepower?",SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId = T2.Id WHERE T2.Cylinders = 4 ORDER BY T2.horsepower DESC LIMIT 1,"CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, Cylinders VARCHAR, horsepower VARCHAR)"
"Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","SELECT T2.MakeId, T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id = T2.MakeId WHERE T1.Horsepower > (SELECT MIN(Horsepower) FROM CARS_DATA) AND T1.Cylinders <= 3","CREATE TABLE CARS_DATA (Id VARCHAR, Horsepower INTEGER, Cylinders VARCHAR); CREATE TABLE CAR_NAMES (MakeId VARCHAR, Make VARCHAR); CREATE TABLE CARS_DATA (Horsepower INTEGER)"
"Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","SELECT t2.makeid, t2.make FROM cars_data AS t1 JOIN car_names AS t2 ON t1.id = t2.makeid WHERE t1.horsepower > (SELECT MIN(horsepower) FROM cars_data) AND t1.cylinders < 4","CREATE TABLE cars_data (horsepower INTEGER); CREATE TABLE car_names (makeid VARCHAR, make VARCHAR); CREATE TABLE cars_data (id VARCHAR, horsepower INTEGER, cylinders VARCHAR)"
What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?,SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 OR year < 1980,"CREATE TABLE cars_data (mpg INTEGER, cylinders VARCHAR, year VARCHAR)"
Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model = T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId = T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker = T4.Id WHERE T3.weight < 3500 AND T4.FullName <> 'Ford Motor Company',"CREATE TABLE CAR_MAKERS (Id VARCHAR, FullName VARCHAR); CREATE TABLE MODEL_LIST (model VARCHAR, Model VARCHAR, Maker VARCHAR); CREATE TABLE CARS_DATA (Id VARCHAR, weight VARCHAR); CREATE TABLE CAR_NAMES (Model VARCHAR, MakeId VARCHAR)"
What are the name of the countries where there is not a single car maker?,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId = T2.Country,"CREATE TABLE countries (CountryName VARCHAR, countryId VARCHAR); CREATE TABLE countries (CountryName VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR)"
Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"SELECT t1.id, t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker GROUP BY t1.id HAVING COUNT(*) >= 2 INTERSECT SELECT t1.id, t1.maker FROM car_makers AS t1 JOIN model_list AS t2 ON t1.id = t2.maker JOIN car_names AS t3 ON t2.model = t3.model GROUP BY t1.id HAVING COUNT(*) > 3","CREATE TABLE car_makers (id VARCHAR, maker VARCHAR); CREATE TABLE model_list (maker VARCHAR, model VARCHAR); CREATE TABLE car_names (model VARCHAR)"
What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id HAVING COUNT(*) >= 2 INTERSECT SELECT T1.Id, T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker JOIN CAR_NAMES AS T3 ON T2.model = T3.model GROUP BY T1.Id HAVING COUNT(*) > 3","CREATE TABLE CAR_NAMES (model VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR, model VARCHAR); CREATE TABLE CAR_MAKERS (Id VARCHAR, Maker VARCHAR)"
What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country GROUP BY T1.countryId HAVING COUNT(*) > 3 UNION SELECT T1.countryId, T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId = T2.Country JOIN MODEL_LIST AS T3 ON T2.Id = T3.Maker WHERE T3.Model = 'fiat'","CREATE TABLE Countries (countryId VARCHAR, CountryName VARCHAR, CountryId VARCHAR); CREATE TABLE CAR_MAKERS (Country VARCHAR, Id VARCHAR); CREATE TABLE MODEL_LIST (Maker VARCHAR, Model VARCHAR)"
What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,"SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country GROUP BY t1.countryid HAVING COUNT(*) > 3 UNION SELECT t1.countryid, t1.countryname FROM countries AS t1 JOIN car_makers AS t2 ON t1.countryid = t2.country JOIN model_list AS t3 ON t2.id = t3.maker WHERE t3.model = 'fiat'","CREATE TABLE model_list (maker VARCHAR, model VARCHAR); CREATE TABLE countries (countryid VARCHAR, countryname VARCHAR); CREATE TABLE car_makers (country VARCHAR, id VARCHAR)"
"Which country does Airline ""JetBlue Airways"" belong to?","SELECT Country FROM AIRLINES WHERE Airline = ""JetBlue Airways""","CREATE TABLE AIRLINES (Country VARCHAR, Airline VARCHAR)"
"What is the abbreviation of Airline ""JetBlue Airways""?","SELECT Abbreviation FROM AIRLINES WHERE Airline = ""JetBlue Airways""","CREATE TABLE AIRLINES (Abbreviation VARCHAR, Airline VARCHAR)"
"List all airline names and their abbreviations in ""USA"".","SELECT Airline, Abbreviation FROM AIRLINES WHERE Country = ""USA""","CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR, Country VARCHAR)"
List the airport code and name in the city of Anthony.,"SELECT AirportCode, AirportName FROM AIRPORTS WHERE city = ""Anthony""","CREATE TABLE AIRPORTS (AirportCode VARCHAR, AirportName VARCHAR, city VARCHAR)"
How many airlines do we have?,SELECT COUNT(*) FROM AIRLINES,CREATE TABLE AIRLINES (Id VARCHAR)
How many airports do we have?,SELECT COUNT(*) FROM AIRPORTS,CREATE TABLE AIRPORTS (Id VARCHAR)
How many flights do we have?,SELECT COUNT(*) FROM FLIGHTS,CREATE TABLE FLIGHTS (Id VARCHAR)
Which airline has abbreviation 'UAL'?,"SELECT Airline FROM AIRLINES WHERE Abbreviation = ""UAL""","CREATE TABLE AIRLINES (Airline VARCHAR, Abbreviation VARCHAR)"
How many airlines are from USA?,"SELECT COUNT(*) FROM AIRLINES WHERE Country = ""USA""",CREATE TABLE AIRLINES (Country VARCHAR)
Which city and country is the Alton airport at?,"SELECT City, Country FROM AIRPORTS WHERE AirportName = ""Alton""","CREATE TABLE AIRPORTS (City VARCHAR, Country VARCHAR, AirportName VARCHAR)"
What is the airport name for airport 'AKO'?,"SELECT AirportName FROM AIRPORTS WHERE AirportCode = ""AKO""","CREATE TABLE AIRPORTS (AirportName VARCHAR, AirportCode VARCHAR)"
What are airport names at City 'Aberdeen'?,"SELECT AirportName FROM AIRPORTS WHERE City = ""Aberdeen""","CREATE TABLE AIRPORTS (AirportName VARCHAR, City VARCHAR)"
How many flights depart from 'APG'?,"SELECT COUNT(*) FROM FLIGHTS WHERE SourceAirport = ""APG""",CREATE TABLE FLIGHTS (SourceAirport VARCHAR)
How many flights have destination ATO?,"SELECT COUNT(*) FROM FLIGHTS WHERE DestAirport = ""ATO""",CREATE TABLE FLIGHTS (DestAirport VARCHAR)
How many flights depart from City Aberdeen?,"SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""","CREATE TABLE FLIGHTS (SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)"
How many flights arriving in Aberdeen city?,"SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""","CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)"
How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,"SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport = T3.AirportCode WHERE T2.City = ""Ashley"" AND T3.City = ""Aberdeen""","CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)"
How many flights does airline 'JetBlue Airways' have?,"SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline = T2.uid WHERE T2.Airline = ""JetBlue Airways""","CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)"
How many 'United Airlines' flights go to Airport 'ASY'?,"SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = ""United Airlines"" AND T2.DestAirport = ""ASY""","CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)"
How many 'United Airlines' flights depart from Airport 'AHD'?,"SELECT COUNT(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline = T1.uid WHERE T1.Airline = ""United Airlines"" AND T2.SourceAirport = ""AHD""","CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR)"
How many United Airlines flights go to City 'Aberdeen'?,"SELECT COUNT(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid = T1.Airline WHERE T2.City = ""Aberdeen"" AND T3.Airline = ""United Airlines""","CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR); CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (DestAirport VARCHAR, Airline VARCHAR)"
Which city has most number of arriving flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE FLIGHTS (DestAirport VARCHAR); CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR)"
Which city has most number of departing flights?,SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.SourceAirport GROUP BY T1.City ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE AIRPORTS (City VARCHAR, AirportCode VARCHAR); CREATE TABLE FLIGHTS (SourceAirport VARCHAR)"
What is the code of airport that has the highest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)"
What is the code of airport that has fewest number of flights?,SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode = T2.DestAirport OR T1.AirportCode = T2.SourceAirport GROUP BY T1.AirportCode ORDER BY COUNT(*) LIMIT 1,"CREATE TABLE FLIGHTS (DestAirport VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR)"
Which airline has most number of flights?,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)"
Find the abbreviation and country of the airline that has fewest number of flights?,"SELECT T1.Abbreviation, T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline ORDER BY COUNT(*) LIMIT 1","CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Abbreviation VARCHAR, Country VARCHAR, Airline VARCHAR, uid VARCHAR)"
What are airlines that have some flight departing from airport 'AHD'?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ""AHD""","CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)"
What are airlines that have flights arriving at airport 'AHD'?,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.DestAirport = ""AHD""","CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, DestAirport VARCHAR)"
Find all airlines that have flights from both airports 'APG' and 'CVO'.,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ""APG"" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ""CVO""","CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)"
Find all airlines that have flights from airport 'CVO' but not from 'APG'.,"SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ""CVO"" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline WHERE T2.SourceAirport = ""APG""","CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR); CREATE TABLE FLIGHTS (Airline VARCHAR, SourceAirport VARCHAR)"
Find all airlines that have at least 10 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) > 10,"CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)"
Find all airlines that have fewer than 200 flights.,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid = T2.Airline GROUP BY T1.Airline HAVING COUNT(*) < 200,"CREATE TABLE FLIGHTS (Airline VARCHAR); CREATE TABLE AIRLINES (Airline VARCHAR, uid VARCHAR)"
"What are flight numbers of Airline ""United Airlines""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid = T1.Airline WHERE T2.Airline = ""United Airlines""","CREATE TABLE AIRLINES (uid VARCHAR, Airline VARCHAR); CREATE TABLE FLIGHTS (FlightNo VARCHAR, Airline VARCHAR)"
"What are flight numbers of flights departing from Airport ""APG""?","SELECT FlightNo FROM FLIGHTS WHERE SourceAirport = ""APG""","CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR)"
"What are flight numbers of flights arriving at Airport ""APG""?","SELECT FlightNo FROM FLIGHTS WHERE DestAirport = ""APG""","CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR)"
"What are flight numbers of flights departing from City ""Aberdeen ""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""","CREATE TABLE FLIGHTS (FlightNo VARCHAR, SourceAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)"
"What are flight numbers of flights arriving at City ""Aberdeen""?","SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.City = ""Aberdeen""","CREATE TABLE FLIGHTS (FlightNo VARCHAR, DestAirport VARCHAR); CREATE TABLE AIRPORTS (AirportCode VARCHAR, City VARCHAR)"
Find the number of flights landing in the city of Aberdeen or Abilene.,"SELECT COUNT(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport = T2.AirportCode WHERE T2.city = ""Aberdeen"" OR T2.city = ""Abilene""","CREATE TABLE Airports (AirportCode VARCHAR, city VARCHAR); CREATE TABLE Flights (DestAirport VARCHAR)"
Find the name of airports which do not have any flight in and out.,SELECT AirportName FROM Airports WHERE NOT AirportCode IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),"CREATE TABLE Flights (AirportName VARCHAR, AirportCode VARCHAR, SourceAirport VARCHAR, DestAirport VARCHAR); CREATE TABLE Airports (AirportName VARCHAR, AirportCode VARCHAR, SourceAirport VARCHAR, DestAirport VARCHAR)"
Sort employee names by their age in ascending order.,SELECT name FROM employee ORDER BY age,"CREATE TABLE employee (name VARCHAR, age VARCHAR)"
What is the number of employees from each city?,"SELECT COUNT(*), city FROM employee GROUP BY city",CREATE TABLE employee (city VARCHAR)
Which cities do more than one employee under age 30 come from?,SELECT city FROM employee WHERE age < 30 GROUP BY city HAVING COUNT(*) > 1,"CREATE TABLE employee (city VARCHAR, age INTEGER)"
Find the number of shops in each location.,"SELECT COUNT(*), LOCATION FROM shop GROUP BY LOCATION",CREATE TABLE shop (LOCATION VARCHAR)
Find the manager name and district of the shop whose number of products is the largest.,"SELECT manager_name, district FROM shop ORDER BY number_products DESC LIMIT 1","CREATE TABLE shop (manager_name VARCHAR, district VARCHAR, number_products VARCHAR)"
find the minimum and maximum number of products of all stores.,"SELECT MIN(Number_products), MAX(Number_products) FROM shop",CREATE TABLE shop (Number_products INTEGER)
"Return the name, location and district of all shops in descending order of number of products.","SELECT name, LOCATION, district FROM shop ORDER BY number_products DESC","CREATE TABLE shop (name VARCHAR, LOCATION VARCHAR, district VARCHAR, number_products VARCHAR)"
Find the names of stores whose number products is more than the average number of products.,SELECT name FROM shop WHERE number_products > (SELECT AVG(number_products) FROM shop),"CREATE TABLE shop (name VARCHAR, number_products INTEGER)"
find the name of employee who was awarded the most times in the evaluation.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE evaluation (Employee_ID VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)"
Find the name of the employee who got the highest one time bonus.,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID = t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,"CREATE TABLE evaluation (Employee_ID VARCHAR, bonus VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)"
Find the names of employees who never won any award in the evaluation.,SELECT name FROM employee WHERE NOT Employee_ID IN (SELECT Employee_ID FROM evaluation),"CREATE TABLE evaluation (name VARCHAR, Employee_ID VARCHAR); CREATE TABLE employee (name VARCHAR, Employee_ID VARCHAR)"
What is the name of the shop that is hiring the largest number of employees?,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t1.shop_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)"
Find the name of the shops that do not hire any employee.,SELECT name FROM shop WHERE NOT shop_id IN (SELECT shop_id FROM hiring),"CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (name VARCHAR, shop_id VARCHAR)"
Find the number of employees hired in each shop; show the shop name as well.,"SELECT COUNT(*), t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id = t2.shop_id GROUP BY t2.name","CREATE TABLE shop (name VARCHAR, shop_id VARCHAR); CREATE TABLE hiring (shop_id VARCHAR)"
What is total bonus given in all evaluations?,SELECT SUM(bonus) FROM evaluation,CREATE TABLE evaluation (bonus INTEGER)
Give me all the information about hiring.,SELECT * FROM hiring,CREATE TABLE hiring (Id VARCHAR)
Which district has both stores with less than 3000 products and stores with more than 10000 products?,SELECT district FROM shop WHERE Number_products < 3000 INTERSECT SELECT district FROM shop WHERE Number_products > 10000,"CREATE TABLE shop (district VARCHAR, Number_products INTEGER)"
How many different store locations are there?,SELECT COUNT(DISTINCT LOCATION) FROM shop,CREATE TABLE shop (LOCATION VARCHAR)
"List document IDs, document names, and document descriptions for all documents.","SELECT document_id, document_name, document_description FROM Documents","CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR, document_description VARCHAR)"
What is the document name and template id for document with description with the letter 'w' in it?,"SELECT document_name, template_id FROM Documents WHERE Document_Description LIKE ""%w%""","CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR, Document_Description VARCHAR)"
"What is the document id, template id and description for document named ""Robbin CV""?","SELECT document_id, template_id, Document_Description FROM Documents WHERE document_name = ""Robbin CV""","CREATE TABLE Documents (document_id VARCHAR, template_id VARCHAR, Document_Description VARCHAR, document_name VARCHAR)"
How many different templates do all document use?,SELECT COUNT(DISTINCT template_id) FROM Documents,CREATE TABLE Documents (template_id VARCHAR)
How many documents are using the template with type code 'PPT'?,SELECT COUNT(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID = T2.Template_ID WHERE T2.Template_Type_Code = 'PPT',"CREATE TABLE Templates (Template_ID VARCHAR, Template_Type_Code VARCHAR); CREATE TABLE Documents (Template_ID VARCHAR)"
Show all template ids and number of documents using each template.,"SELECT template_id, COUNT(*) FROM Documents GROUP BY template_id",CREATE TABLE Documents (template_id VARCHAR)
What is the id and type code for the template used by the most documents?,"SELECT T1.template_id, T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (Template_Type_Code VARCHAR, template_id VARCHAR)"
Show ids for all templates that are used by more than one document.,SELECT template_id FROM Documents GROUP BY template_id HAVING COUNT(*) > 1,CREATE TABLE Documents (template_id VARCHAR)
Show ids for all templates not used by any document.,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR)
How many templates do we have?,SELECT COUNT(*) FROM Templates,CREATE TABLE Templates (Id VARCHAR)
"Show template ids, version numbers, and template type codes for all templates.","SELECT template_id, version_number, template_type_code FROM Templates","CREATE TABLE Templates (template_id VARCHAR, version_number VARCHAR, template_type_code VARCHAR)"
Show all distinct template type codes for all templates.,SELECT DISTINCT template_type_code FROM Templates,CREATE TABLE Templates (template_type_code VARCHAR)
What are the ids of templates with template type code PP or PPT?,"SELECT template_id FROM Templates WHERE template_type_code = ""PP"" OR template_type_code = ""PPT""","CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)"
How many templates have template type code CV?,"SELECT COUNT(*) FROM Templates WHERE template_type_code = ""CV""",CREATE TABLE Templates (template_type_code VARCHAR)
What is the version number and template type code for the template with version number later than 5?,"SELECT version_number, template_type_code FROM Templates WHERE version_number > 5","CREATE TABLE Templates (version_number INTEGER, template_type_code VARCHAR)"
Show all template type codes and number of templates for each.,"SELECT template_type_code, COUNT(*) FROM Templates GROUP BY template_type_code",CREATE TABLE Templates (template_type_code VARCHAR)
Which template type code has most number of templates?,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Templates (template_type_code VARCHAR)
Show all template type codes with less than three templates.,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING COUNT(*) < 3,CREATE TABLE Templates (template_type_code VARCHAR)
What the smallest version number and its template type code?,"SELECT MIN(Version_Number), template_type_code FROM Templates","CREATE TABLE Templates (template_type_code VARCHAR, Version_Number INTEGER)"
"What is the template type code of the template used by document with the name ""Data base""?","SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T2.document_name = ""Data base""","CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR); CREATE TABLE Documents (template_id VARCHAR, document_name VARCHAR)"
Show all document names using templates with template type code BK.,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id WHERE T1.template_type_code = ""BK""","CREATE TABLE Documents (document_name VARCHAR, template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR)"
Show all template type codes and the number of documents using each type.,"SELECT T1.template_type_code, COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code","CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)"
Which template type code is used by most number of documents?,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR, template_id VARCHAR)"
Show all template type codes that are not used by any document.,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id,CREATE TABLE Documents (template_id VARCHAR); CREATE TABLE Templates (template_id VARCHAR); CREATE TABLE Templates (template_type_code VARCHAR)
Show all template type codes and descriptions.,"SELECT template_type_code, template_type_description FROM Ref_template_types","CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)"
"What is the template type descriptions for template type code ""AD"".","SELECT template_type_description FROM Ref_template_types WHERE template_type_code = ""AD""","CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)"
"What is the template type code for template type description ""Book"".","SELECT template_type_code FROM Ref_template_types WHERE template_type_description = ""Book""","CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)"
What are the distinct template type descriptions for the templates ever used by any document?,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID = T3.template_ID,"CREATE TABLE Templates (template_type_code VARCHAR, Template_ID VARCHAR); CREATE TABLE Documents (template_ID VARCHAR); CREATE TABLE Ref_template_types (template_type_description VARCHAR, template_type_code VARCHAR)"
"What are the template ids with template type description ""Presentation"".","SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code = T2.template_type_code WHERE T1.template_type_description = ""Presentation""","CREATE TABLE Templates (template_id VARCHAR, template_type_code VARCHAR); CREATE TABLE Ref_template_types (template_type_code VARCHAR, template_type_description VARCHAR)"
How many paragraphs in total?,SELECT COUNT(*) FROM Paragraphs,CREATE TABLE Paragraphs (Id VARCHAR)
How many paragraphs for the document with name 'Summer Show'?,SELECT COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID = T2.document_ID WHERE T2.document_name = 'Summer Show',"CREATE TABLE Documents (document_ID VARCHAR, document_name VARCHAR); CREATE TABLE Paragraphs (document_ID VARCHAR)"
Show paragraph details for paragraph with text 'Korea ' .,SELECT other_details FROM paragraphs WHERE paragraph_text LIKE 'korea',"CREATE TABLE paragraphs (other_details VARCHAR, paragraph_text VARCHAR)"
Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"SELECT T1.paragraph_id, T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.Document_Name = 'Welcome to NY'","CREATE TABLE Documents (document_id VARCHAR, Document_Name VARCHAR); CREATE TABLE Paragraphs (paragraph_id VARCHAR, paragraph_text VARCHAR, document_id VARCHAR)"
"Show all paragraph texts for the document ""Customer reviews"".","SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id WHERE T2.document_name = ""Customer reviews""","CREATE TABLE Paragraphs (paragraph_text VARCHAR, document_id VARCHAR); CREATE TABLE Documents (document_id VARCHAR, document_name VARCHAR)"
Show all document ids and the number of paragraphs in each document. Order by document id.,"SELECT document_id, COUNT(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",CREATE TABLE Paragraphs (document_id VARCHAR)
"Show all document ids, names and the number of paragraphs in each document.","SELECT T1.document_id, T2.document_name, COUNT(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id","CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)"
List all document ids with at least two paragraphs.,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) >= 2,CREATE TABLE Paragraphs (document_id VARCHAR)
What is the document id and name with greatest number of paragraphs?,"SELECT T1.document_id, T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id = T2.document_id GROUP BY T1.document_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Documents (document_name VARCHAR, document_id VARCHAR); CREATE TABLE Paragraphs (document_id VARCHAR)"
What is the document id with least number of paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY COUNT(*) LIMIT 1,CREATE TABLE Paragraphs (document_id VARCHAR)
What is the document id with 1 to 2 paragraphs?,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING COUNT(*) BETWEEN 1 AND 2,CREATE TABLE Paragraphs (document_id VARCHAR)
Show the document id with paragraph text 'Brazil' and 'Ireland'.,SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text = 'Ireland',"CREATE TABLE Paragraphs (document_id VARCHAR, paragraph_text VARCHAR)"
How many teachers are there?,SELECT COUNT(*) FROM teacher,CREATE TABLE teacher (Id VARCHAR)
List the names of teachers in ascending order of age.,SELECT Name FROM teacher ORDER BY Age,"CREATE TABLE teacher (Name VARCHAR, Age VARCHAR)"
What are the age and hometown of teachers?,"SELECT Age, Hometown FROM teacher","CREATE TABLE teacher (Age VARCHAR, Hometown VARCHAR)"
List the name of teachers whose hometown is not `` Little Lever Urban District '' .,"SELECT name FROM teacher WHERE hometown <> ""little lever urban district""","CREATE TABLE teacher (name VARCHAR, hometown VARCHAR)"
Show the name of teachers aged either 32 or 33?,SELECT Name FROM teacher WHERE Age = 32 OR Age = 33,"CREATE TABLE teacher (Name VARCHAR, Age VARCHAR)"
What is the hometown of the youngest teacher?,SELECT Hometown FROM teacher ORDER BY Age LIMIT 1,"CREATE TABLE teacher (Hometown VARCHAR, Age VARCHAR)"
Show different hometown of teachers and the number of teachers from each hometown.,"SELECT Hometown, COUNT(*) FROM teacher GROUP BY Hometown",CREATE TABLE teacher (Hometown VARCHAR)
List the most common hometown of teachers.,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE teacher (Hometown VARCHAR)
Show the hometowns shared by at least two teachers.,SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*) >= 2,CREATE TABLE teacher (Hometown VARCHAR)
Show names of teachers and the courses they are arranged to teach.,"SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID","CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)"
Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"SELECT T3.Name, T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID ORDER BY T3.Name","CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course VARCHAR, Course_ID VARCHAR)"
Show the name of the teacher for the math course.,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID WHERE T2.Course = ""Math""","CREATE TABLE course_arrange (Course_ID VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course (Course_ID VARCHAR, Course VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR)"
Show names of teachers and the number of courses they teach.,"SELECT T2.Name, COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name","CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)"
Show names of teachers that teach at least two courses.,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID = T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*) >= 2,"CREATE TABLE teacher (Name VARCHAR, Teacher_ID VARCHAR); CREATE TABLE course_arrange (Teacher_ID VARCHAR)"
List the names of teachers who have not been arranged to teach courses.,SELECT Name FROM teacher WHERE NOT Teacher_id IN (SELECT Teacher_id FROM course_arrange),"CREATE TABLE course_arrange (Name VARCHAR, Teacher_id VARCHAR); CREATE TABLE teacher (Name VARCHAR, Teacher_id VARCHAR)"
How many visitors below age 30 are there?,SELECT COUNT(*) FROM visitor WHERE age < 30,CREATE TABLE visitor (age INTEGER)
"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.",SELECT name FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC,"CREATE TABLE visitor (name VARCHAR, Level_of_membership INTEGER)"
What is the average age of the visitors whose membership level is not higher than 4?,SELECT AVG(age) FROM visitor WHERE Level_of_membership <= 4,"CREATE TABLE visitor (age INTEGER, Level_of_membership VARCHAR)"
"Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","SELECT name, Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY age DESC","CREATE TABLE visitor (name VARCHAR, Level_of_membership INTEGER, age VARCHAR)"
Find the id and name of the museum that has the most staff members?,"SELECT museum_id, name FROM museum ORDER BY num_of_staff DESC LIMIT 1","CREATE TABLE museum (museum_id VARCHAR, name VARCHAR, num_of_staff VARCHAR)"
Find the average number of staff working for the museums that were open before 2009.,SELECT AVG(num_of_staff) FROM museum WHERE open_year < 2009,"CREATE TABLE museum (num_of_staff INTEGER, open_year INTEGER)"
What are the opening year and staff number of the museum named Plaza Museum?,"SELECT Num_of_Staff, Open_Year FROM museum WHERE name = 'Plaza Museum'","CREATE TABLE museum (Num_of_Staff VARCHAR, Open_Year VARCHAR, name VARCHAR)"
find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,SELECT name FROM museum WHERE num_of_staff > (SELECT MIN(num_of_staff) FROM museum WHERE open_year > 2010),"CREATE TABLE museum (name VARCHAR, num_of_staff INTEGER, open_year INTEGER)"
"find the id, name and age for visitors who visited some museums more than once.","SELECT t1.id, t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t1.id HAVING COUNT(*) > 1","CREATE TABLE visit (visitor_id VARCHAR); CREATE TABLE visitor (id VARCHAR, name VARCHAR, age VARCHAR)"
"What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","SELECT t2.visitor_id, t1.name, t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY t2.visitor_id ORDER BY SUM(t2.Total_spent) DESC LIMIT 1","CREATE TABLE visit (visitor_id VARCHAR, Total_spent INTEGER); CREATE TABLE visitor (name VARCHAR, Level_of_membership VARCHAR, id VARCHAR)"
What are the id and name of the museum visited most times?,"SELECT t2.Museum_ID, t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE museum (name VARCHAR, Museum_ID VARCHAR); CREATE TABLE visit (Museum_ID VARCHAR)"
What is the name of the museum that had no visitor yet?,SELECT name FROM museum WHERE NOT Museum_ID IN (SELECT museum_id FROM visit),"CREATE TABLE visit (name VARCHAR, Museum_ID VARCHAR, museum_id VARCHAR); CREATE TABLE museum (name VARCHAR, Museum_ID VARCHAR, museum_id VARCHAR)"
Find the name and age of the visitor who bought the most tickets at once.,"SELECT t1.name, t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1","CREATE TABLE visitor (name VARCHAR, age VARCHAR, id VARCHAR); CREATE TABLE visit (visitor_id VARCHAR, num_of_ticket VARCHAR)"
What are the average and maximum number of tickets bought in all visits?,"SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit",CREATE TABLE visit (num_of_ticket INTEGER)
What is the total ticket expense of the visitors whose membership level is 1?,SELECT SUM(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id WHERE t1.Level_of_membership = 1,"CREATE TABLE visit (Total_spent INTEGER, visitor_id VARCHAR); CREATE TABLE visitor (id VARCHAR, Level_of_membership VARCHAR)"
What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year < 2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID = t2.Museum_ID WHERE t3.open_year > 2011,"CREATE TABLE visitor (name VARCHAR, id VARCHAR); CREATE TABLE museum (Museum_ID VARCHAR, open_year INTEGER); CREATE TABLE visit (visitor_id VARCHAR, Museum_ID VARCHAR)"
Find the number of visitors who did not visit any museum opened after 2010.,SELECT COUNT(*) FROM visitor WHERE NOT id IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID = t2.Museum_ID WHERE t1.open_year > 2010),"CREATE TABLE museum (Museum_ID VARCHAR, open_year INTEGER); CREATE TABLE visitor (id VARCHAR); CREATE TABLE visit (visitor_id VARCHAR, Museum_ID VARCHAR)"
How many museums were opened after 2013 or before 2008?,SELECT COUNT(*) FROM museum WHERE open_year > 2013 OR open_year < 2008,CREATE TABLE museum (open_year VARCHAR)
Find the total number of players.,SELECT COUNT(*) FROM players,CREATE TABLE players (Id VARCHAR)
Find the total number of matches.,SELECT COUNT(*) FROM matches,CREATE TABLE matches (Id VARCHAR)
List the first name and birth date of all players from the country with code USA.,"SELECT first_name, birth_date FROM players WHERE country_code = 'USA'","CREATE TABLE players (first_name VARCHAR, birth_date VARCHAR, country_code VARCHAR)"
Find the average age of losers and winners of all matches.,"SELECT AVG(loser_age), AVG(winner_age) FROM matches","CREATE TABLE matches (loser_age INTEGER, winner_age INTEGER)"
Find the average rank of winners in all matches.,SELECT AVG(winner_rank) FROM matches,CREATE TABLE matches (winner_rank INTEGER)
Find the highest rank of losers in all matches.,SELECT MIN(loser_rank) FROM matches,CREATE TABLE matches (loser_rank INTEGER)
find the number of distinct country codes of all players.,SELECT COUNT(DISTINCT country_code) FROM players,CREATE TABLE players (country_code VARCHAR)
Find the number of distinct name of losers.,SELECT COUNT(DISTINCT loser_name) FROM matches,CREATE TABLE matches (loser_name VARCHAR)
Find the name of tourney that has more than 10 matches.,SELECT tourney_name FROM matches GROUP BY tourney_name HAVING COUNT(*) > 10,CREATE TABLE matches (tourney_name VARCHAR)
List the names of all winners who played in both 2013 and 2016.,SELECT winner_name FROM matches WHERE YEAR = 2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR = 2016,"CREATE TABLE matches (winner_name VARCHAR, YEAR VARCHAR)"
List the number of all matches who played in years of 2013 or 2016.,SELECT COUNT(*) FROM matches WHERE YEAR = 2013 OR YEAR = 2016,CREATE TABLE matches (YEAR VARCHAR)
What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?,"SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'WTA Championships' INTERSECT SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id WHERE T2.tourney_name = 'Australian Open'","CREATE TABLE matches (winner_id VARCHAR, tourney_name VARCHAR); CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR)"
Find the first name and country code of the oldest player.,"SELECT first_name, country_code FROM players ORDER BY birth_date LIMIT 1","CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR)"
List the first and last name of all players in the order of birth date.,"SELECT first_name, last_name FROM players ORDER BY birth_date","CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, birth_date VARCHAR)"
List the first and last name of all players who are left / L hand in the order of birth date.,"SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date","CREATE TABLE players (first_name VARCHAR, last_name VARCHAR, hand VARCHAR, birth_date VARCHAR)"
Find the first name and country code of the player who did the most number of tours.,"SELECT T1.country_code, T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id ORDER BY T2.tours DESC LIMIT 1","CREATE TABLE players (country_code VARCHAR, first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR, tours VARCHAR)"
Find the year that has the most number of matches.,SELECT YEAR FROM matches GROUP BY YEAR ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE matches (YEAR VARCHAR)
Find the name and rank points of the winner who won the most times.,"SELECT winner_name, winner_rank_points FROM matches GROUP BY winner_name ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE matches (winner_name VARCHAR, winner_rank_points VARCHAR)"
Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.,SELECT winner_name FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1,"CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_rank_points VARCHAR)"
find the names of loser and winner who played in the match with greatest number of minutes.,"SELECT winner_name, loser_name FROM matches ORDER BY minutes DESC LIMIT 1","CREATE TABLE matches (winner_name VARCHAR, loser_name VARCHAR, minutes VARCHAR)"
Find the average ranking for each player and their first name.,"SELECT AVG(ranking), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name","CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)"
Find the total ranking points for each player and their first name.,"SELECT SUM(ranking_points), T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id = T2.player_id GROUP BY T1.first_name","CREATE TABLE players (first_name VARCHAR, player_id VARCHAR); CREATE TABLE rankings (player_id VARCHAR)"
find the number of players for each country.,"SELECT COUNT(*), country_code FROM players GROUP BY country_code",CREATE TABLE players (country_code VARCHAR)
find the code of the country where has the greatest number of players.,SELECT country_code FROM players GROUP BY country_code ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE players (country_code VARCHAR)
Find the codes of countries that have more than 50 players.,SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) > 50,CREATE TABLE players (country_code VARCHAR)
Find the total number of tours for each ranking date.,"SELECT SUM(tours), ranking_date FROM rankings GROUP BY ranking_date","CREATE TABLE rankings (ranking_date VARCHAR, tours INTEGER)"
Find the number of matches happened in each year.,"SELECT COUNT(*), YEAR FROM matches GROUP BY YEAR",CREATE TABLE matches (YEAR VARCHAR)
Find the name and rank of the 3 youngest winners across all matches.,"SELECT DISTINCT winner_name, winner_rank FROM matches ORDER BY winner_age LIMIT 3","CREATE TABLE matches (winner_name VARCHAR, winner_rank VARCHAR, winner_age VARCHAR)"
How many different winners both participated in the WTA Championships and were left handed?,SELECT COUNT(DISTINCT winner_name) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'L',"CREATE TABLE matches (winner_name VARCHAR, tourney_name VARCHAR, winner_hand VARCHAR)"
"Find the first name, country code and birth date of the winner who has the highest rank points in all matches.","SELECT T1.first_name, T1.country_code, T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id = T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1","CREATE TABLE players (first_name VARCHAR, country_code VARCHAR, birth_date VARCHAR, player_id VARCHAR); CREATE TABLE matches (winner_id VARCHAR, winner_rank_points VARCHAR)"
Find the number of players for each hand type.,"SELECT COUNT(*), hand FROM players GROUP BY hand",CREATE TABLE players (hand VARCHAR)
How many ships ended up being 'Captured'?,SELECT COUNT(*) FROM ship WHERE disposition_of_ship = 'Captured',CREATE TABLE ship (disposition_of_ship VARCHAR)
List the name and tonnage ordered by in descending alphaetical order for the names.,"SELECT name, tonnage FROM ship ORDER BY name DESC","CREATE TABLE ship (name VARCHAR, tonnage VARCHAR)"
"List the name, date and result of each battle.","SELECT name, date FROM battle","CREATE TABLE battle (name VARCHAR, date VARCHAR)"
What is maximum and minimum death toll caused each time?,"SELECT MAX(killed), MIN(killed) FROM death",CREATE TABLE death (killed INTEGER)
What is the average number of injuries caused each time?,SELECT AVG(injured) FROM death,CREATE TABLE death (injured INTEGER)
What are the death and injury situations caused by the ship with tonnage 't'?,"SELECT T1.killed, T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id WHERE T2.tonnage = 't'","CREATE TABLE ship (Id VARCHAR); CREATE TABLE death (killed VARCHAR, injured VARCHAR, caused_by_ship_id VARCHAR)"
What are the name and results of the battles when the bulgarian commander is not 'Boril',"SELECT name, RESULT FROM battle WHERE bulgarian_commander <> 'Boril'","CREATE TABLE battle (name VARCHAR, RESULT VARCHAR, bulgarian_commander VARCHAR)"
What are the different ids and names of the battles that lost any 'Brig' type shipes?,"SELECT DISTINCT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.ship_type = 'Brig'","CREATE TABLE ship (lost_in_battle VARCHAR, ship_type VARCHAR); CREATE TABLE battle (id VARCHAR, name VARCHAR)"
What are the ids and names of the battles that led to more than 10 people killed in total.,"SELECT T1.id, T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle JOIN death AS T3 ON T2.id = T3.caused_by_ship_id GROUP BY T1.id HAVING SUM(T3.killed) > 10","CREATE TABLE death (caused_by_ship_id VARCHAR, killed INTEGER); CREATE TABLE battle (id VARCHAR, name VARCHAR); CREATE TABLE ship (lost_in_battle VARCHAR, id VARCHAR)"
What is the ship id and name that caused most total injuries?,"SELECT T2.id, T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id = T2.id GROUP BY T2.id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE death (caused_by_ship_id VARCHAR); CREATE TABLE ship (Id VARCHAR)
What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,SELECT name FROM battle WHERE bulgarian_commander = 'Kaloyan' AND latin_commander = 'Baldwin I',"CREATE TABLE battle (name VARCHAR, bulgarian_commander VARCHAR, latin_commander VARCHAR)"
How many different results are there for the battles?,SELECT COUNT(DISTINCT RESULT) FROM battle,CREATE TABLE battle (RESULT VARCHAR)
How many battles did not lose any ship with tonnage '225'?,SELECT COUNT(*) FROM battle WHERE NOT id IN (SELECT lost_in_battle FROM ship WHERE tonnage = '225'),"CREATE TABLE ship (id VARCHAR, lost_in_battle VARCHAR, tonnage VARCHAR); CREATE TABLE battle (id VARCHAR, lost_in_battle VARCHAR, tonnage VARCHAR)"
List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'Lettice' INTERSECT SELECT T1.name, T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.name = 'HMS Atalanta'","CREATE TABLE ship (lost_in_battle VARCHAR, name VARCHAR); CREATE TABLE battle (name VARCHAR, date VARCHAR, id VARCHAR)"
"Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","SELECT name, RESULT, bulgarian_commander FROM battle EXCEPT SELECT T1.name, T1.result, T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id = T2.lost_in_battle WHERE T2.location = 'English Channel'","CREATE TABLE ship (lost_in_battle VARCHAR, location VARCHAR); CREATE TABLE battle (name VARCHAR, RESULT VARCHAR, bulgarian_commander VARCHAR); CREATE TABLE battle (name VARCHAR, result VARCHAR, bulgarian_commander VARCHAR, id VARCHAR)"
What are the notes of the death events which has substring 'East'?,SELECT note FROM death WHERE note LIKE '%East%',CREATE TABLE death (note VARCHAR)
what are all the addresses including line 1 and line 2?,"SELECT line_1, line_2 FROM addresses","CREATE TABLE addresses (line_1 VARCHAR, line_2 VARCHAR)"
How many courses in total are listed?,SELECT COUNT(*) FROM Courses,CREATE TABLE Courses (Id VARCHAR)
How is the math course described?,SELECT course_description FROM Courses WHERE course_name = 'math',"CREATE TABLE Courses (course_description VARCHAR, course_name VARCHAR)"
What is the zip code of the address in the city Port Chelsea?,SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea',"CREATE TABLE Addresses (zip_postcode VARCHAR, city VARCHAR)"
Which department offers the most number of degrees? List department name and id.,"SELECT T2.department_name, T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id = T2.department_id GROUP BY T1.department_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_name VARCHAR, department_id VARCHAR)"
What is the name and id of the department with the most number of degrees ?,"SELECT t2.department_name, t1.department_id FROM degree_programs AS t1 JOIN departments AS t2 ON t1.department_id = t2.department_id GROUP BY t1.department_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE degree_programs (department_id VARCHAR); CREATE TABLE departments (department_name VARCHAR, department_id VARCHAR)"
How many departments offer any degree?,SELECT COUNT(DISTINCT department_id) FROM Degree_Programs,CREATE TABLE Degree_Programs (department_id VARCHAR)
How many different degree names are offered?,SELECT COUNT(DISTINCT degree_summary_name) FROM Degree_Programs,CREATE TABLE Degree_Programs (degree_summary_name VARCHAR)
How many degrees does the engineering department offer?,SELECT COUNT(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id = T2.department_id WHERE T1.department_name = 'engineer',"CREATE TABLE Degree_Programs (department_id VARCHAR); CREATE TABLE Departments (department_id VARCHAR, department_name VARCHAR)"
What are the names and descriptions of all the sections?,"SELECT section_name, section_description FROM Sections","CREATE TABLE Sections (section_name VARCHAR, section_description VARCHAR)"
What are the names and id of courses having at most 2 sections?,"SELECT T1.course_name, T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_id HAVING COUNT(*) <= 2","CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Sections (course_id VARCHAR)"
List the section_name in reversed lexicographical order.,SELECT section_name FROM Sections ORDER BY section_name DESC,CREATE TABLE Sections (section_name VARCHAR)
What is the semester which most student registered in? Show both the name and the id.,"SELECT T1.semester_name, T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id = T2.semester_id GROUP BY T1.semester_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Student_Enrolment (semester_id VARCHAR); CREATE TABLE Semesters (semester_name VARCHAR, semester_id VARCHAR)"
What is the description of the department whose name has the substring the computer?,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',"CREATE TABLE Departments (department_description VARCHAR, department_name VARCHAR)"
"Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","SELECT T1.first_name, T1.middle_name, T1.last_name, T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id HAVING COUNT(*) = 2","CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)"
"Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","SELECT DISTINCT T1.first_name, T1.middle_name, T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id = T3.degree_program_id WHERE T3.degree_summary_name = 'Bachelor'","CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR, degree_program_id VARCHAR)"
Find the kind of program which most number of students are enrolled in?,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Student_Enrolment (degree_program_id VARCHAR); CREATE TABLE Degree_Programs (degree_summary_name VARCHAR, degree_program_id VARCHAR)"
Find the program which most number of students are enrolled in. List both the id and the summary.,"SELECT T1.degree_program_id, T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Degree_Programs (degree_program_id VARCHAR, degree_summary_name VARCHAR); CREATE TABLE Student_Enrolment (degree_program_id VARCHAR)"
"Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","SELECT T1.student_id, T1.first_name, T1.middle_name, T1.last_name, COUNT(*), T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Students (student_id VARCHAR, first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)"
Which semesters do not have any student enrolled? List the semester name.,SELECT semester_name FROM Semesters WHERE NOT semester_id IN (SELECT semester_id FROM Student_Enrolment),"CREATE TABLE Student_Enrolment (semester_name VARCHAR, semester_id VARCHAR); CREATE TABLE Semesters (semester_name VARCHAR, semester_id VARCHAR)"
What are all the course names of the courses which ever have students enrolled in?,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id,"CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)"
What's the name of the course with most number of enrollments?,SELECT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Courses (course_name VARCHAR, course_id VARCHAR); CREATE TABLE Student_Enrolment_Courses (course_id VARCHAR)"
Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id = T2.address_id WHERE T2.state_province_county = 'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id = T4.student_id,"CREATE TABLE Addresses (address_id VARCHAR, state_province_county VARCHAR); CREATE TABLE Students (last_name VARCHAR, current_address_id VARCHAR); CREATE TABLE Students (last_name VARCHAR, student_id VARCHAR); CREATE TABLE Student_Enrolment (student_id VARCHAR)"
Show the date and id of the transcript with at least 2 course results.,"SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id HAVING COUNT(*) >= 2","CREATE TABLE Transcript_Contents (transcript_id VARCHAR); CREATE TABLE Transcripts (transcript_date VARCHAR, transcript_id VARCHAR)"
What is the phone number of the man with the first name Timmothy and the last name Ward?,SELECT cell_mobile_number FROM Students WHERE first_name = 'Timmothy' AND last_name = 'Ward',"CREATE TABLE Students (cell_mobile_number VARCHAR, first_name VARCHAR, last_name VARCHAR)"
What is the mobile phone number of the student named Timmothy Ward ?,SELECT cell_mobile_number FROM students WHERE first_name = 'timmothy' AND last_name = 'ward',"CREATE TABLE students (cell_mobile_number VARCHAR, first_name VARCHAR, last_name VARCHAR)"
"Who is the first student to register? List the first name, middle name and last name.","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_first_registered LIMIT 1","CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, date_first_registered VARCHAR)"
"Who is the earliest graduate of the school? List the first name, middle name and last name.","SELECT first_name, middle_name, last_name FROM Students ORDER BY date_left LIMIT 1","CREATE TABLE Students (first_name VARCHAR, middle_name VARCHAR, last_name VARCHAR, date_left VARCHAR)"
Whose permanent address is different from his or her current address? List his or her first name.,SELECT first_name FROM Students WHERE current_address_id <> permanent_address_id,"CREATE TABLE Students (first_name VARCHAR, current_address_id VARCHAR, permanent_address_id VARCHAR)"
Which address holds the most number of students currently? List the address id and all lines.,"SELECT T1.address_id, T1.line_1, T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id = T2.current_address_id GROUP BY T1.address_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Addresses (address_id VARCHAR, line_1 VARCHAR, line_2 VARCHAR); CREATE TABLE Students (current_address_id VARCHAR)"
"On average, when were the transcripts printed?",SELECT AVG(transcript_date) FROM Transcripts,CREATE TABLE Transcripts (transcript_date INTEGER)
When is the first transcript released? List the date and details.,"SELECT transcript_date, other_details FROM Transcripts ORDER BY transcript_date LIMIT 1","CREATE TABLE Transcripts (transcript_date VARCHAR, other_details VARCHAR)"
How many transcripts are released?,SELECT COUNT(*) FROM Transcripts,CREATE TABLE Transcripts (Id VARCHAR)
What is the last transcript release date?,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,CREATE TABLE Transcripts (transcript_date VARCHAR)
How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,"SELECT COUNT(*), student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE Transcript_Contents (student_course_id VARCHAR)
"Show the date of the transcript which shows the least number of results, also list the id.","SELECT T2.transcript_date, T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id = T2.transcript_id GROUP BY T1.transcript_id ORDER BY COUNT(*) LIMIT 1","CREATE TABLE Transcript_Contents (transcript_id VARCHAR); CREATE TABLE Transcripts (transcript_date VARCHAR, transcript_id VARCHAR)"
Find the semester when both Master students and Bachelor students got enrolled in.,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id = T2.degree_program_id WHERE degree_summary_name = 'Bachelor',"CREATE TABLE Degree_Programs (degree_program_id VARCHAR); CREATE TABLE Student_Enrolment (semester_id VARCHAR, degree_program_id VARCHAR)"
How many different addresses do the students currently live?,SELECT COUNT(DISTINCT current_address_id) FROM Students,CREATE TABLE Students (current_address_id VARCHAR)
List all the student details in reversed lexicographical order.,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,CREATE TABLE Students (other_student_details VARCHAR)
Describe the section h.,SELECT section_description FROM Sections WHERE section_name = 'h',"CREATE TABLE Sections (section_description VARCHAR, section_name VARCHAR)"
Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .,SELECT t1.first_name FROM students AS t1 JOIN addresses AS t2 ON t1.permanent_address_id = t2.address_id WHERE t2.country = 'haiti' OR t1.cell_mobile_number = '09700166582',"CREATE TABLE students (first_name VARCHAR, permanent_address_id VARCHAR, cell_mobile_number VARCHAR); CREATE TABLE addresses (address_id VARCHAR, country VARCHAR)"
List the title of all cartoons in alphabetical order.,SELECT Title FROM Cartoon ORDER BY title,"CREATE TABLE Cartoon (Title VARCHAR, title VARCHAR)"
"List all cartoon directed by ""Ben Jones"".","SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones""","CREATE TABLE Cartoon (Title VARCHAR, Directed_by VARCHAR)"
"How many cartoons were written by ""Joseph Kuhr""?","SELECT COUNT(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr""",CREATE TABLE Cartoon (Written_by VARCHAR)
list all cartoon titles and their directors ordered by their air date,"SELECT title, Directed_by FROM Cartoon ORDER BY Original_air_date","CREATE TABLE Cartoon (title VARCHAR, Directed_by VARCHAR, Original_air_date VARCHAR)"
"List the title of all cartoon directed by ""Ben Jones"" or ""Brandon Vietti"".","SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti""","CREATE TABLE Cartoon (Title VARCHAR, Directed_by VARCHAR)"
Which country has the most of TV Channels? List the country and number of TV Channels it has.,"SELECT Country, COUNT(*) FROM TV_Channel GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",CREATE TABLE TV_Channel (Country VARCHAR)
List the number of different series names and contents in the TV Channel table.,"SELECT COUNT(DISTINCT series_name), COUNT(DISTINCT content) FROM TV_Channel","CREATE TABLE TV_Channel (series_name VARCHAR, content VARCHAR)"
"What is the content of TV Channel with serial name ""Sky Radio""?","SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio""","CREATE TABLE TV_Channel (Content VARCHAR, series_name VARCHAR)"
"What is the Package Option of TV Channel with serial name ""Sky Radio""?","SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio""","CREATE TABLE TV_Channel (Package_Option VARCHAR, series_name VARCHAR)"
How many TV Channel using language English?,"SELECT COUNT(*) FROM TV_Channel WHERE LANGUAGE = ""English""",CREATE TABLE TV_Channel (LANGUAGE VARCHAR)
List the language used least number of TV Channel. List language and number of TV Channel.,"SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY COUNT(*) LIMIT 1",CREATE TABLE TV_Channel (LANGUAGE VARCHAR)
List each language and the number of TV Channels using it.,"SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE",CREATE TABLE TV_Channel (LANGUAGE VARCHAR)
"What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.","SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!""","CREATE TABLE Cartoon (Channel VARCHAR, Title VARCHAR); CREATE TABLE TV_Channel (series_name VARCHAR, id VARCHAR)"
"List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".","SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""","CREATE TABLE Cartoon (Title VARCHAR, Channel VARCHAR); CREATE TABLE TV_Channel (id VARCHAR, series_name VARCHAR)"
List the Episode of all TV series sorted by rating.,SELECT Episode FROM TV_series ORDER BY rating,"CREATE TABLE TV_series (Episode VARCHAR, rating VARCHAR)"
List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"SELECT Episode, Rating FROM TV_series ORDER BY Rating DESC LIMIT 3","CREATE TABLE TV_series (Episode VARCHAR, Rating VARCHAR)"
What is minimum and maximum share of TV series?,"SELECT MAX(SHARE), MIN(SHARE) FROM TV_series",CREATE TABLE TV_series (SHARE INTEGER)
"What is the air date of TV series with Episode ""A Love of a Lifetime""?","SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime""","CREATE TABLE TV_series (Air_Date VARCHAR, Episode VARCHAR)"
"What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?","SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime""","CREATE TABLE TV_series (Weekly_Rank VARCHAR, Episode VARCHAR)"
"What is the TV Channel of TV series with Episode ""A Love of a Lifetime""? List the TV Channel's series name.","SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime""","CREATE TABLE TV_series (Channel VARCHAR, Episode VARCHAR); CREATE TABLE TV_Channel (series_name VARCHAR, id VARCHAR)"
"List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".","SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio""","CREATE TABLE TV_Channel (id VARCHAR, series_name VARCHAR); CREATE TABLE TV_series (Episode VARCHAR, Channel VARCHAR)"
Find the number of cartoons directed by each of the listed directors.,"SELECT COUNT(*), Directed_by FROM cartoon GROUP BY Directed_by",CREATE TABLE cartoon (Directed_by VARCHAR)
Find the production code and channel of the most recently aired cartoon .,"SELECT production_code, channel FROM cartoon ORDER BY original_air_date DESC LIMIT 1","CREATE TABLE cartoon (production_code VARCHAR, channel VARCHAR, original_air_date VARCHAR)"
Find the package choice and series name of the TV channel that has high definition TV.,"SELECT package_option, series_name FROM TV_Channel WHERE hight_definition_TV = ""yes""","CREATE TABLE TV_Channel (package_option VARCHAR, series_name VARCHAR, hight_definition_TV VARCHAR)"
which countries' tv channels are playing some cartoon written by Todd Casey?,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey',"CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)"
which countries' tv channels are not playing any cartoon written by Todd Casey?,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by = 'Todd Casey',"CREATE TABLE TV_Channel (country VARCHAR, id VARCHAR); CREATE TABLE TV_Channel (country VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, written_by VARCHAR)"
Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Michael Chang' INTERSECT SELECT T1.series_name, T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by = 'Ben Jones'","CREATE TABLE TV_Channel (series_name VARCHAR, country VARCHAR, id VARCHAR); CREATE TABLE cartoon (Channel VARCHAR, directed_by VARCHAR)"
find the pixel aspect ratio and nation of the tv channels that do not use English.,"SELECT Pixel_aspect_ratio_PAR, country FROM tv_channel WHERE LANGUAGE <> 'English'","CREATE TABLE tv_channel (Pixel_aspect_ratio_PAR VARCHAR, country VARCHAR, LANGUAGE VARCHAR)"
find id of the tv channels that from the countries where have more than two tv channels.,SELECT id FROM tv_channel GROUP BY country HAVING COUNT(*) > 2,"CREATE TABLE tv_channel (id VARCHAR, country VARCHAR)"
find the id of tv channels that do not play any cartoon directed by Ben Jones.,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones',"CREATE TABLE TV_Channel (id VARCHAR, channel VARCHAR, directed_by VARCHAR); CREATE TABLE cartoon (id VARCHAR, channel VARCHAR, directed_by VARCHAR)"
find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,SELECT package_option FROM TV_Channel WHERE NOT id IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones'),"CREATE TABLE cartoon (package_option VARCHAR, id VARCHAR, channel VARCHAR, directed_by VARCHAR); CREATE TABLE TV_Channel (package_option VARCHAR, id VARCHAR, channel VARCHAR, directed_by VARCHAR)"
How many poker players are there?,SELECT COUNT(*) FROM poker_player,CREATE TABLE poker_player (Id VARCHAR)
List the earnings of poker players in descending order.,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,CREATE TABLE poker_player (Earnings VARCHAR)
List the final tables made and the best finishes of poker players.,"SELECT Final_Table_Made, Best_Finish FROM poker_player","CREATE TABLE poker_player (Final_Table_Made VARCHAR, Best_Finish VARCHAR)"
What is the average earnings of poker players?,SELECT AVG(Earnings) FROM poker_player,CREATE TABLE poker_player (Earnings INTEGER)
What is the money rank of the poker player with the highest earnings?,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,"CREATE TABLE poker_player (Money_Rank VARCHAR, Earnings VARCHAR)"
What is the maximum number of final tables made among poker players with earnings less than 200000?,SELECT MAX(Final_Table_Made) FROM poker_player WHERE Earnings < 200000,"CREATE TABLE poker_player (Final_Table_Made INTEGER, Earnings INTEGER)"
What are the names of poker players?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID,"CREATE TABLE poker_player (People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What are the names of poker players whose earnings is higher than 300000?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Earnings > 300000,"CREATE TABLE poker_player (People_ID VARCHAR, Earnings INTEGER); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
List the names of poker players ordered by the final tables made in ascending order.,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Final_Table_Made,"CREATE TABLE poker_player (People_ID VARCHAR, Final_Table_Made VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What is the birth date of the poker player with the lowest earnings?,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings LIMIT 1,"CREATE TABLE poker_player (People_ID VARCHAR, Earnings VARCHAR); CREATE TABLE people (Birth_Date VARCHAR, People_ID VARCHAR)"
What is the money rank of the tallest poker player?,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Height DESC LIMIT 1,"CREATE TABLE people (People_ID VARCHAR, Height VARCHAR); CREATE TABLE poker_player (Money_Rank VARCHAR, People_ID VARCHAR)"
What is the average earnings of poker players with height higher than 200?,SELECT AVG(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Height > 200,"CREATE TABLE people (People_ID VARCHAR, Height INTEGER); CREATE TABLE poker_player (Earnings INTEGER, People_ID VARCHAR)"
What are the names of poker players in descending order of earnings?,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Earnings DESC,"CREATE TABLE poker_player (People_ID VARCHAR, Earnings VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
What are different nationalities of people and the corresponding number of people from each nation?,"SELECT Nationality, COUNT(*) FROM people GROUP BY Nationality",CREATE TABLE people (Nationality VARCHAR)
What is the most common nationality of people?,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE people (Nationality VARCHAR)
What are the nationalities that are shared by at least two people?,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*) >= 2,CREATE TABLE people (Nationality VARCHAR)
List the names and birth dates of people in ascending alphabetical order of name.,"SELECT Name, Birth_Date FROM people ORDER BY Name","CREATE TABLE people (Name VARCHAR, Birth_Date VARCHAR)"
"Show names of people whose nationality is not ""Russia"".","SELECT Name FROM people WHERE Nationality <> ""Russia""","CREATE TABLE people (Name VARCHAR, Nationality VARCHAR)"
List the names of people that are not poker players.,SELECT Name FROM people WHERE NOT People_ID IN (SELECT People_ID FROM poker_player),"CREATE TABLE poker_player (Name VARCHAR, People_ID VARCHAR); CREATE TABLE people (Name VARCHAR, People_ID VARCHAR)"
How many distinct nationalities are there?,SELECT COUNT(DISTINCT Nationality) FROM people,CREATE TABLE people (Nationality VARCHAR)
How many states are there?,SELECT COUNT(*) FROM area_code_state,CREATE TABLE area_code_state (Id VARCHAR)
"List the contestant numbers and names, ordered by contestant name descending.","SELECT contestant_number, contestant_name FROM contestants ORDER BY contestant_name DESC","CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)"
"List the vote ids, phone numbers and states of all votes.","SELECT vote_id, phone_number, state FROM votes","CREATE TABLE votes (vote_id VARCHAR, phone_number VARCHAR, state VARCHAR)"
What are the maximum and minimum values of area codes?,"SELECT MAX(area_code), MIN(area_code) FROM area_code_state",CREATE TABLE area_code_state (area_code INTEGER)
What is last date created of votes from the state 'CA'?,SELECT MAX(created) FROM votes WHERE state = 'CA',"CREATE TABLE votes (created INTEGER, state VARCHAR)"
What are the names of the contestants whose names are not 'Jessie Alloway',SELECT contestant_name FROM contestants WHERE contestant_name <> 'Jessie Alloway',CREATE TABLE contestants (contestant_name VARCHAR)
What are the distinct states and create time of all votes?,"SELECT DISTINCT state, created FROM votes","CREATE TABLE votes (state VARCHAR, created VARCHAR)"
What are the contestant numbers and names of the contestants who had at least two votes?,"SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number HAVING COUNT(*) >= 2","CREATE TABLE votes (contestant_number VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)"
"Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","SELECT T1.contestant_number, T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number GROUP BY T1.contestant_number ORDER BY COUNT(*) LIMIT 1","CREATE TABLE votes (contestant_number VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR)"
What are the number of votes from state 'NY' or 'CA'?,SELECT COUNT(*) FROM votes WHERE state = 'NY' OR state = 'CA',CREATE TABLE votes (state VARCHAR)
How many contestants did not get voted?,SELECT COUNT(*) FROM contestants WHERE NOT contestant_number IN (SELECT contestant_number FROM votes),CREATE TABLE contestants (contestant_number VARCHAR); CREATE TABLE votes (contestant_number VARCHAR)
What is the area code in which the most voters voted?,SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state = T2.state GROUP BY T1.area_code ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE area_code_state (area_code VARCHAR, state VARCHAR); CREATE TABLE votes (state VARCHAR)"
"What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","SELECT T2.created, T2.state, T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number WHERE T1.contestant_name = 'Tabatha Gehling'","CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR); CREATE TABLE votes (created VARCHAR, state VARCHAR, phone_number VARCHAR, contestant_number VARCHAR)"
List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.,SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number = T2.contestant_number JOIN area_code_state AS T3 ON T2.state = T3.state WHERE T1.contestant_name = 'Kelly Clauss',"CREATE TABLE votes (contestant_number VARCHAR, state VARCHAR); CREATE TABLE contestants (contestant_number VARCHAR, contestant_name VARCHAR); CREATE TABLE area_code_state (area_code VARCHAR, state VARCHAR)"
Return the names of the contestants whose names contain the substring 'Al' .,"SELECT contestant_name FROM contestants WHERE contestant_name LIKE ""%al%""",CREATE TABLE contestants (contestant_name VARCHAR)
What are the names of all the countries that became independent after 1950?,SELECT Name FROM country WHERE IndepYear > 1950,"CREATE TABLE country (Name VARCHAR, IndepYear INTEGER)"
How many countries have a republic as their form of government?,"SELECT COUNT(*) FROM country WHERE GovernmentForm = ""Republic""",CREATE TABLE country (GovernmentForm VARCHAR)
What is the total surface area of the countries in the Caribbean region?,"SELECT SUM(SurfaceArea) FROM country WHERE Region = ""Caribbean""","CREATE TABLE country (SurfaceArea INTEGER, Region VARCHAR)"
Which continent is Anguilla in?,"SELECT Continent FROM country WHERE Name = ""Anguilla""","CREATE TABLE country (Continent VARCHAR, Name VARCHAR)"
Which region is the city Kabul located in?,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code = T2.CountryCode WHERE T2.Name = ""Kabul""","CREATE TABLE country (Code VARCHAR); CREATE TABLE city (CountryCode VARCHAR, Name VARCHAR)"
Which language is the most popular in Aruba?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba"" ORDER BY Percentage DESC LIMIT 1","CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)"
What are the population and life expectancies in Brazil?,"SELECT Population, LifeExpectancy FROM country WHERE Name = ""Brazil""","CREATE TABLE country (Population VARCHAR, LifeExpectancy VARCHAR, Name VARCHAR)"
What are the region and population of Angola?,"SELECT Population, Region FROM country WHERE Name = ""Angola""","CREATE TABLE country (Population VARCHAR, Region VARCHAR, Name VARCHAR)"
What is the average expected life expectancy for countries in the region of Central Africa?,"SELECT AVG(LifeExpectancy) FROM country WHERE Region = ""Central Africa""","CREATE TABLE country (LifeExpectancy INTEGER, Region VARCHAR)"
What is the name of country that has the shortest life expectancy in Asia?,"SELECT Name FROM country WHERE Continent = ""Asia"" ORDER BY LifeExpectancy LIMIT 1","CREATE TABLE country (Name VARCHAR, Continent VARCHAR, LifeExpectancy VARCHAR)"
What is the total population and maximum GNP in Asia?,"SELECT SUM(Population), MAX(GNP) FROM country WHERE Continent = ""Asia""","CREATE TABLE country (Population INTEGER, GNP INTEGER, Continent VARCHAR)"
What is the average life expectancy in African countries that are republics?,"SELECT AVG(LifeExpectancy) FROM country WHERE Continent = ""Africa"" AND GovernmentForm = ""Republic""","CREATE TABLE country (LifeExpectancy INTEGER, Continent VARCHAR, GovernmentForm VARCHAR)"
What is the total surface area of the continents Asia and Europe?,"SELECT SUM(SurfaceArea) FROM country WHERE Continent = ""Asia"" OR Continent = ""Europe""","CREATE TABLE country (SurfaceArea INTEGER, Continent VARCHAR)"
How many people live in Gelderland district?,"SELECT SUM(Population) FROM city WHERE District = ""Gelderland""","CREATE TABLE city (Population INTEGER, District VARCHAR)"
What is the average GNP and total population in all nations whose government is US territory?,"SELECT AVG(GNP), SUM(population) FROM country WHERE GovernmentForm = ""US Territory""","CREATE TABLE country (GNP INTEGER, population INTEGER, GovernmentForm VARCHAR)"
How many unique languages are spoken in the world?,SELECT COUNT(DISTINCT LANGUAGE) FROM countrylanguage,CREATE TABLE countrylanguage (LANGUAGE VARCHAR)
How many type of governments are in Africa?,"SELECT COUNT(DISTINCT GovernmentForm) FROM country WHERE Continent = ""Africa""","CREATE TABLE country (GovernmentForm VARCHAR, Continent VARCHAR)"
What is the total number of languages used in Aruba?,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Aruba""","CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)"
How many official languages does Afghanistan have?,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Name = ""Afghanistan"" AND IsOfficial = ""T""","CREATE TABLE country (Code VARCHAR, Name VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR)"
What is name of the country that speaks the largest number of languages?,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)"
Which continent has the most diverse languages?,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE countrylanguage (CountryCode VARCHAR); CREATE TABLE country (Continent VARCHAR, Code VARCHAR)"
How many countries speak both English and Dutch?,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Dutch"")","CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)"
What are the names of nations speak both English and French?,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""French""","CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)"
What are the names of nations where both English and French are official languages?,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" AND T2.IsOfficial = ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""French"" AND T2.IsOfficial = ""T""","CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)"
What is the number of distinct continents where Chinese is spoken?,"SELECT COUNT(DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Chinese""","CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)"
What are the regions that use English or Dutch?,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" OR T2.Language = ""Dutch""","CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR); CREATE TABLE country (Region VARCHAR, Code VARCHAR)"
What are the countries where either English or Dutch is the official language ?,"SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = ""english"" AND isofficial = ""t"" UNION SELECT t1.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode WHERE t2.language = ""dutch"" AND isofficial = ""t""","CREATE TABLE countrylanguage (countrycode VARCHAR, language VARCHAR); CREATE TABLE country (name VARCHAR, code VARCHAR)"
Which countries have either English or Dutch as an official language?,"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" AND IsOfficial = ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""Dutch"" AND IsOfficial = ""T""","CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)"
Which language is the most popular on the Asian continent?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.Continent = ""Asia"" GROUP BY T2.Language ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE country (Code VARCHAR, Continent VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)"
Which languages are spoken by only one country in republic governments?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.GovernmentForm = ""Republic"" GROUP BY T2.Language HAVING COUNT(*) = 1","CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR); CREATE TABLE country (Code VARCHAR, GovernmentForm VARCHAR)"
Find the city with the largest population that uses English.,"SELECT T1.Name, T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode = T2.CountryCode WHERE T2.Language = ""English"" ORDER BY T1.Population DESC LIMIT 1","CREATE TABLE city (Name VARCHAR, Population VARCHAR, CountryCode VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR)"
"Find the name, population and expected life length of asian country with the largest area?","SELECT Name, Population, LifeExpectancy FROM country WHERE Continent = ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","CREATE TABLE country (Name VARCHAR, Population VARCHAR, LifeExpectancy VARCHAR, Continent VARCHAR, SurfaceArea VARCHAR)"
What is average life expectancy in the countries where English is not the official language?,"SELECT AVG(LifeExpectancy) FROM country WHERE NOT Name IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"" AND T2.IsOfficial = ""T"")","CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR, IsOfficial VARCHAR); CREATE TABLE country (LifeExpectancy INTEGER, Name VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR)"
What is the total number of people living in the nations that do not use English?,"SELECT SUM(Population) FROM country WHERE NOT Name IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T2.Language = ""English"")","CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, Language VARCHAR); CREATE TABLE country (Population INTEGER, Name VARCHAR)"
What is the official language spoken in the country whose head of state is Beatrix?,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE T1.HeadOfState = ""Beatrix"" AND T2.IsOfficial = ""T""","CREATE TABLE country (Code VARCHAR, HeadOfState VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)"
What is the total number of unique official languages spoken in the countries that are founded before 1930?,"SELECT COUNT(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode WHERE IndepYear < 1930 AND T2.IsOfficial = ""T""","CREATE TABLE country (Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR, IsOfficial VARCHAR)"
What are the countries that have greater surface area than any country in Europe?,"SELECT Name FROM country WHERE SurfaceArea > (SELECT MIN(SurfaceArea) FROM country WHERE Continent = ""Europe"")","CREATE TABLE country (Name VARCHAR, SurfaceArea INTEGER, Continent VARCHAR)"
What are the African countries that have a  population less than any country in Asia?,"SELECT Name FROM country WHERE Continent = ""Africa"" AND population < (SELECT MAX(population) FROM country WHERE Continent = ""Asia"")","CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)"
Which African countries have a smaller population than that of any country in Asia?,"SELECT Name FROM country WHERE Continent = ""Africa"" AND population < (SELECT MIN(population) FROM country WHERE Continent = ""Asia"")","CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)"
Which Asian countries have a population that is larger than any country in Africa?,"SELECT Name FROM country WHERE Continent = ""Asia"" AND population > (SELECT MAX(population) FROM country WHERE Continent = ""Africa"")","CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)"
What are the Asian countries which have a population larger than that of any country in Africa?,"SELECT Name FROM country WHERE Continent = ""Asia"" AND population > (SELECT MIN(population) FROM country WHERE Continent = ""Africa"")","CREATE TABLE country (Name VARCHAR, Continent VARCHAR, population INTEGER)"
What are the country codes for countries that do not speak English?,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = ""English""","CREATE TABLE countrylanguage (CountryCode VARCHAR, LANGUAGE VARCHAR)"
What are the country codes of countries where people use languages other than English?,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE <> ""English""","CREATE TABLE countrylanguage (CountryCode VARCHAR, LANGUAGE VARCHAR)"
What are the codes of the countries that do not speak English and whose government forms are not Republic?,"SELECT Code FROM country WHERE GovernmentForm <> ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE = ""English""","CREATE TABLE countrylanguage (Code VARCHAR, CountryCode VARCHAR, GovernmentForm VARCHAR, LANGUAGE VARCHAR); CREATE TABLE country (Code VARCHAR, CountryCode VARCHAR, GovernmentForm VARCHAR, LANGUAGE VARCHAR)"
Which cities are in European countries where English is not the official language?,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode = T1.Code WHERE T1.Continent = 'Europe' AND NOT T1.Name IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code = T4.CountryCode WHERE T4.IsOfficial = 'T' AND T4.Language = 'English'),"CREATE TABLE city (Name VARCHAR, CountryCode VARCHAR); CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, IsOfficial VARCHAR, Language VARCHAR); CREATE TABLE country (Code VARCHAR, Continent VARCHAR, Name VARCHAR)"
Which unique cities are in Asian countries where Chinese is the official language ?,"SELECT DISTINCT t3.name FROM country AS t1 JOIN countrylanguage AS t2 ON t1.code = t2.countrycode JOIN city AS t3 ON t1.code = t3.countrycode WHERE t2.isofficial = 't' AND t2.language = 'chinese' AND t1.continent = ""asia""","CREATE TABLE city (name VARCHAR, countrycode VARCHAR); CREATE TABLE countrylanguage (countrycode VARCHAR, isofficial VARCHAR, language VARCHAR); CREATE TABLE country (code VARCHAR, continent VARCHAR)"
Return the different names of cities that are in Asia and for which Chinese is the official language.,"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode JOIN city AS T3 ON T1.Code = T3.CountryCode WHERE T2.IsOfficial = 'T' AND T2.Language = 'Chinese' AND T1.Continent = ""Asia""","CREATE TABLE country (Code VARCHAR, Continent VARCHAR); CREATE TABLE countrylanguage (CountryCode VARCHAR, IsOfficial VARCHAR, Language VARCHAR); CREATE TABLE city (Name VARCHAR, CountryCode VARCHAR)"
"What are the name, independence year, and surface area of the country with the smallest population?","SELECT Name, SurfaceArea, IndepYear FROM country ORDER BY Population LIMIT 1","CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR, IndepYear VARCHAR, Population VARCHAR)"
"What are the population, name and leader of the country with the largest area?","SELECT Name, population, HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","CREATE TABLE country (Name VARCHAR, population VARCHAR, HeadOfState VARCHAR, SurfaceArea VARCHAR)"
Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"SELECT COUNT(T2.Language), T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code = T2.CountryCode GROUP BY T1.Name HAVING COUNT(*) > 2","CREATE TABLE country (Name VARCHAR, Code VARCHAR); CREATE TABLE countrylanguage (Language VARCHAR, CountryCode VARCHAR)"
Find the number of cities in each district whose population is greater than the average population of cities?,"SELECT COUNT(*), District FROM city WHERE Population > (SELECT AVG(Population) FROM city) GROUP BY District","CREATE TABLE city (District VARCHAR, Population INTEGER)"
Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"SELECT SUM(Population), GovernmentForm FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) > 72","CREATE TABLE country (GovernmentForm VARCHAR, Population INTEGER, LifeExpectancy INTEGER)"
Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"SELECT SUM(Population), AVG(LifeExpectancy), Continent FROM country GROUP BY Continent HAVING AVG(LifeExpectancy) < 72","CREATE TABLE country (Continent VARCHAR, Population INTEGER, LifeExpectancy INTEGER)"
What are the names and areas of countries with the top 5 largest area?,"SELECT Name, SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5","CREATE TABLE country (Name VARCHAR, SurfaceArea VARCHAR)"
What are names of countries with the top 3 largest population?,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,"CREATE TABLE country (Name VARCHAR, Population VARCHAR)"
What are the names of the nations with the 3 lowest populations?,SELECT Name FROM country ORDER BY Population LIMIT 3,"CREATE TABLE country (Name VARCHAR, Population VARCHAR)"
how many countries are in Asia?,"SELECT COUNT(*) FROM country WHERE continent = ""Asia""",CREATE TABLE country (continent VARCHAR)
What are the names of the countries that are in the continent of Europe and have a population of 80000?,"SELECT Name FROM country WHERE continent = ""Europe"" AND Population = ""80000""","CREATE TABLE country (Name VARCHAR, continent VARCHAR, Population VARCHAR)"
What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?,"SELECT SUM(population), AVG(surfacearea) FROM country WHERE continent = ""north america"" AND surfacearea > 3000","CREATE TABLE country (population INTEGER, surfacearea INTEGER, continent VARCHAR)"
What are the cities whose population is between 160000 and 900000?,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,"CREATE TABLE city (name VARCHAR, Population INTEGER)"
Return the names of cities that have a population between 160000 and 900000 .,SELECT name FROM city WHERE population BETWEEN 160000 AND 900000,"CREATE TABLE city (name VARCHAR, population INTEGER)"
Which language is spoken by the largest number of countries?,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE countrylanguage (LANGUAGE VARCHAR)
What is the language spoken by the largest percentage of people in each country?,"SELECT LANGUAGE, CountryCode, MAX(Percentage) FROM countrylanguage GROUP BY CountryCode","CREATE TABLE countrylanguage (LANGUAGE VARCHAR, CountryCode VARCHAR, Percentage INTEGER)"
What is the total number of countries where Spanish is spoken by the largest percentage of people?,"SELECT COUNT(*), MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = ""Spanish"" GROUP BY CountryCode","CREATE TABLE countrylanguage (Percentage INTEGER, CountryCode VARCHAR, LANGUAGE VARCHAR)"
What are the codes of countries where Spanish is spoken by the largest percentage of people?,"SELECT CountryCode, MAX(Percentage) FROM countrylanguage WHERE LANGUAGE = ""Spanish"" GROUP BY CountryCode","CREATE TABLE countrylanguage (CountryCode VARCHAR, Percentage INTEGER, LANGUAGE VARCHAR)"
How many conductors are there?,SELECT COUNT(*) FROM conductor,CREATE TABLE conductor (Id VARCHAR)
List the names of conductors in ascending order of age.,SELECT Name FROM conductor ORDER BY Age,"CREATE TABLE conductor (Name VARCHAR, Age VARCHAR)"
"What are the names of conductors whose nationalities are not ""USA""?",SELECT Name FROM conductor WHERE Nationality <> 'USA',"CREATE TABLE conductor (Name VARCHAR, Nationality VARCHAR)"
What are the record companies of orchestras in descending order of years in which they were founded?,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded VARCHAR)"
What is the average attendance of shows?,SELECT AVG(Attendance) FROM SHOW,CREATE TABLE SHOW (Attendance INTEGER)
"What are the maximum and minimum share of performances whose type is not ""Live final"".","SELECT MAX(SHARE), MIN(SHARE) FROM performance WHERE TYPE <> ""Live final""","CREATE TABLE performance (SHARE INTEGER, TYPE VARCHAR)"
How many different nationalities do conductors have?,SELECT COUNT(DISTINCT Nationality) FROM conductor,CREATE TABLE conductor (Nationality VARCHAR)
List names of conductors in descending order of years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)"
List the name of the conductor with the most years of work.,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,"CREATE TABLE conductor (Name VARCHAR, Year_of_Work VARCHAR)"
Show the names of conductors and the orchestras they have conducted.,"SELECT T1.Name, T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID","CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR); CREATE TABLE orchestra (Orchestra VARCHAR, Conductor_ID VARCHAR)"
Show the names of conductors that have conducted more than one orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*) > 1,"CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)"
Show the name of the conductor that has conducted the most number of orchestras.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)"
Please show the name of the conductor that has conducted orchestras founded after 2008.,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID = T2.Conductor_ID WHERE Year_of_Founded > 2008,"CREATE TABLE orchestra (Conductor_ID VARCHAR); CREATE TABLE conductor (Name VARCHAR, Conductor_ID VARCHAR)"
Please show the different record companies and the corresponding number of orchestras.,"SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",CREATE TABLE orchestra (Record_Company VARCHAR)
Please show the record formats of orchestras in ascending order of count.,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*),CREATE TABLE orchestra (Major_Record_Format VARCHAR)
List the record company shared by the most number of orchestras.,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE orchestra (Record_Company VARCHAR)
List the names of orchestras that have no performance.,SELECT Orchestra FROM orchestra WHERE NOT Orchestra_ID IN (SELECT Orchestra_ID FROM performance),"CREATE TABLE orchestra (Orchestra VARCHAR, Orchestra_ID VARCHAR); CREATE TABLE performance (Orchestra VARCHAR, Orchestra_ID VARCHAR)"
Show the record companies shared by orchestras founded before 2003 and after 2003.,SELECT Record_Company FROM orchestra WHERE Year_of_Founded < 2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded > 2003,"CREATE TABLE orchestra (Record_Company VARCHAR, Year_of_Founded INTEGER)"
"Find the number of orchestras whose record format is ""CD"" or ""DVD"".","SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format = ""CD"" OR Major_Record_Format = ""DVD""",CREATE TABLE orchestra (Major_Record_Format VARCHAR)
Show the years in which orchestras that have given more than one performance are founded.,SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID = T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*) > 1,CREATE TABLE performance (Orchestra_ID VARCHAR); CREATE TABLE orchestra (Orchestra_ID VARCHAR)
How many high schoolers are there?,SELECT COUNT(*) FROM Highschooler,CREATE TABLE Highschooler (Id VARCHAR)
Show the names and grades of each high schooler.,"SELECT name, grade FROM Highschooler","CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)"
Show all the grades of the high schoolers.,SELECT grade FROM Highschooler,CREATE TABLE Highschooler (grade VARCHAR)
What grade is Kyle in?,"SELECT grade FROM Highschooler WHERE name = ""Kyle""","CREATE TABLE Highschooler (grade VARCHAR, name VARCHAR)"
Show the names of all high schoolers in grade 10.,SELECT name FROM Highschooler WHERE grade = 10,"CREATE TABLE Highschooler (name VARCHAR, grade VARCHAR)"
Show the ID of the high schooler named Kyle.,"SELECT ID FROM Highschooler WHERE name = ""Kyle""","CREATE TABLE Highschooler (ID VARCHAR, name VARCHAR)"
How many high schoolers are there in grade 9 or 10?,SELECT COUNT(*) FROM Highschooler WHERE grade = 9 OR grade = 10,CREATE TABLE Highschooler (grade VARCHAR)
Show the number of high schoolers for each grade.,"SELECT grade, COUNT(*) FROM Highschooler GROUP BY grade",CREATE TABLE Highschooler (grade VARCHAR)
Which grade has the most high schoolers?,SELECT grade FROM Highschooler GROUP BY grade ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE Highschooler (grade VARCHAR)
Show me all grades that have at least 4 students.,SELECT grade FROM Highschooler GROUP BY grade HAVING COUNT(*) >= 4,CREATE TABLE Highschooler (grade VARCHAR)
Show the student IDs and numbers of friends corresponding to each.,"SELECT student_id, COUNT(*) FROM Friend GROUP BY student_id",CREATE TABLE Friend (student_id VARCHAR)
Show the names of high school students and their corresponding number of friends.,"SELECT T2.name, COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id","CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)"
What is the name of the high schooler who has the greatest number of friends?,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)"
Show the names of high schoolers who have at least 3 friends.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 3,"CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR)"
Show the names of all of the high schooler Kyle's friends.,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id JOIN Highschooler AS T3 ON T1.friend_id = T3.id WHERE T2.name = ""Kyle""","CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, friend_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)"
How many friends does the high school student Kyle have?,"SELECT COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""","CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)"
Show ids of all students who do not have any friends.,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,"CREATE TABLE Highschooler (id VARCHAR, student_id VARCHAR); CREATE TABLE Friend (id VARCHAR, student_id VARCHAR)"
Show names of all high school students who do not have any friends.,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id,"CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Highschooler (name VARCHAR); CREATE TABLE Friend (student_id VARCHAR)"
Show the ids of high schoolers who have friends and are also liked by someone else.,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,"CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)"
Show name of all students who have some friends and also are liked by someone else.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id = T2.id,"CREATE TABLE Highschooler (name VARCHAR, id VARCHAR); CREATE TABLE Likes (student_id VARCHAR, liked_id VARCHAR); CREATE TABLE Friend (student_id VARCHAR, liked_id VARCHAR)"
Count the number of likes for each student id.,"SELECT student_id, COUNT(*) FROM Likes GROUP BY student_id",CREATE TABLE Likes (student_id VARCHAR)
"Show the names of high schoolers who have likes, and numbers of likes for each.","SELECT T2.name, COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id","CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)"
What is the name of the high schooler who has the greatest number of likes?,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)"
Show the names of students who have at least 2 likes.,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T1.student_id HAVING COUNT(*) >= 2,"CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR)"
Show the names of students who have a grade higher than 5 and have at least 2 friends.,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.grade > 5 GROUP BY T1.student_id HAVING COUNT(*) >= 2,"CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (name VARCHAR, id VARCHAR, grade INTEGER)"
How many likes does Kyle have?,"SELECT COUNT(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id WHERE T2.name = ""Kyle""","CREATE TABLE Likes (student_id VARCHAR); CREATE TABLE Highschooler (id VARCHAR, name VARCHAR)"
Find the average grade of all students who have some friends.,SELECT AVG(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id),"CREATE TABLE Highschooler (id VARCHAR); CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (grade INTEGER, id VARCHAR)"
Find the minimum grade of students who have no friends.,SELECT MIN(grade) FROM Highschooler WHERE NOT id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id),"CREATE TABLE Highschooler (id VARCHAR); CREATE TABLE Friend (student_id VARCHAR); CREATE TABLE Highschooler (grade INTEGER, id VARCHAR)"
Which states have both owners and professionals living there?,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,CREATE TABLE Owners (state VARCHAR); CREATE TABLE Professionals (state VARCHAR)
What is the average age of the dogs who have gone through any treatments?,SELECT AVG(age) FROM Dogs WHERE dog_id IN (SELECT dog_id FROM Treatments),"CREATE TABLE Dogs (age INTEGER, dog_id VARCHAR); CREATE TABLE Treatments (age INTEGER, dog_id VARCHAR)"
"Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","SELECT professional_id, last_name, cell_number FROM Professionals WHERE state = 'Indiana' UNION SELECT T1.professional_id, T1.last_name, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) > 2","CREATE TABLE Treatments (professional_id VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR); CREATE TABLE Professionals (professional_id VARCHAR, last_name VARCHAR, cell_number VARCHAR, state VARCHAR)"
Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .,SELECT name FROM dogs WHERE NOT dog_id IN (SELECT dog_id FROM treatments GROUP BY dog_id HAVING SUM(cost_of_treatment) > 1000),"CREATE TABLE dogs (name VARCHAR, dog_id VARCHAR, cost_of_treatment INTEGER); CREATE TABLE treatments (name VARCHAR, dog_id VARCHAR, cost_of_treatment INTEGER)"
Which first names are used for professionals or owners but are not used as dog names?,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,"CREATE TABLE Owners (first_name VARCHAR, name VARCHAR); CREATE TABLE Dogs (first_name VARCHAR, name VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, name VARCHAR)"
"Which professional did not operate any treatment on dogs? List the professional's id, role and email.","SELECT professional_id, role_code, email_address FROM Professionals EXCEPT SELECT T1.professional_id, T1.role_code, T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id","CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, email_address VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)"
"Which owner owns the most dogs? List the owner id, first name and last name.","SELECT T1.owner_id, T2.first_name, T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id = T2.owner_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR)"
"Which professionals have done at least two treatments? List the professional's id, role, and first name.","SELECT T1.professional_id, T1.role_code, T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2","CREATE TABLE Professionals (professional_id VARCHAR, role_code VARCHAR, first_name VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)"
What is the name of the breed with the most dogs?,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code = T2.breed_code GROUP BY T1.breed_name ORDER BY COUNT(*) DESC LIMIT 1,"CREATE TABLE Dogs (breed_code VARCHAR); CREATE TABLE Breeds (breed_name VARCHAR, breed_code VARCHAR)"
Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"SELECT T1.owner_id, T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY COUNT(*) DESC LIMIT 1","CREATE TABLE Owners (owner_id VARCHAR, last_name VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)"
What is the description of the treatment type that costs the least money in total?,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY SUM(cost_of_treatment) LIMIT 1,"CREATE TABLE Treatments (treatment_type_code VARCHAR); CREATE TABLE Treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR)"
Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"SELECT T1.owner_id, T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id JOIN Treatments AS T3 ON T2.dog_id = T3.dog_id GROUP BY T1.owner_id ORDER BY SUM(T3.cost_of_treatment) DESC LIMIT 1","CREATE TABLE Treatments (dog_id VARCHAR, cost_of_treatment INTEGER); CREATE TABLE Owners (owner_id VARCHAR, zip_code VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, dog_id VARCHAR)"
Which professionals have done at least two types of treatments? List the professional id and cell phone.,"SELECT T1.professional_id, T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id GROUP BY T1.professional_id HAVING COUNT(*) >= 2","CREATE TABLE Professionals (professional_id VARCHAR, cell_number VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)"
What are the first name and last name of the professionals who have done treatment with cost below average?,"SELECT DISTINCT T1.first_name, T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM Treatments)","CREATE TABLE Treatments (cost_of_treatment INTEGER); CREATE TABLE Professionals (first_name VARCHAR, last_name VARCHAR); CREATE TABLE Treatments (Id VARCHAR)"
"List the date of each treatment, together with the first name of the professional who operated it.","SELECT T1.date_of_treatment, T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id = T2.professional_id","CREATE TABLE Treatments (date_of_treatment VARCHAR, professional_id VARCHAR); CREATE TABLE Professionals (first_name VARCHAR, professional_id VARCHAR)"
List the cost of each treatment and the corresponding treatment type description.,"SELECT T1.cost_of_treatment, T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code","CREATE TABLE Treatments (cost_of_treatment VARCHAR, treatment_type_code VARCHAR); CREATE TABLE treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR)"
"List each owner's first name, last name, and the size of his for her dog.","SELECT T1.first_name, T1.last_name, T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id","CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (size_code VARCHAR, owner_id VARCHAR)"
List pairs of the owner's first name and the dogs's name.,"SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id","CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR)"
List the names of the dogs of the rarest breed and the treatment dates of them.,"SELECT T1.name, T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) LIMIT 1)","CREATE TABLE Dogs (name VARCHAR, dog_id VARCHAR, breed_code VARCHAR); CREATE TABLE Treatments (date_of_treatment VARCHAR, dog_id VARCHAR); CREATE TABLE Dogs (breed_code VARCHAR)"
Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"SELECT T1.first_name, T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T1.state = 'Virginia'","CREATE TABLE Dogs (name VARCHAR, owner_id VARCHAR); CREATE TABLE Owners (first_name VARCHAR, owner_id VARCHAR, state VARCHAR)"
What are the arriving date and the departing date of the dogs who have gone through a treatment?,"SELECT DISTINCT T1.date_arrived, T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id","CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR, dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)"
List the last name of the owner owning the youngest dog.,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id WHERE T2.age = (SELECT MAX(age) FROM Dogs),"CREATE TABLE Owners (last_name VARCHAR, owner_id VARCHAR); CREATE TABLE Dogs (owner_id VARCHAR, age INTEGER); CREATE TABLE Dogs (age INTEGER)"
List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,SELECT email_address FROM Professionals WHERE state = 'Hawaii' OR state = 'Wisconsin',"CREATE TABLE Professionals (email_address VARCHAR, state VARCHAR)"
What are the arriving date and the departing date of all the dogs?,"SELECT date_arrived, date_departed FROM Dogs","CREATE TABLE Dogs (date_arrived VARCHAR, date_departed VARCHAR)"
How many dogs went through any treatments?,SELECT COUNT(DISTINCT dog_id) FROM Treatments,CREATE TABLE Treatments (dog_id VARCHAR)
How many professionals have performed any treatment to dogs?,SELECT COUNT(DISTINCT professional_id) FROM Treatments,CREATE TABLE Treatments (professional_id VARCHAR)
"Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","SELECT role_code, street, city, state FROM professionals WHERE city LIKE '%West%'","CREATE TABLE professionals (role_code VARCHAR, street VARCHAR, city VARCHAR, state VARCHAR)"
"Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","SELECT first_name, last_name, email_address FROM Owners WHERE state LIKE '%North%'","CREATE TABLE Owners (first_name VARCHAR, last_name VARCHAR, email_address VARCHAR, state VARCHAR)"
How many dogs have an age below the average?,SELECT COUNT(*) FROM Dogs WHERE age < (SELECT AVG(age) FROM Dogs),CREATE TABLE Dogs (age INTEGER)
How much does the most recent treatment cost?,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,"CREATE TABLE Treatments (cost_of_treatment VARCHAR, date_of_treatment VARCHAR)"
How many dogs have not gone through any treatment?,SELECT COUNT(*) FROM Dogs WHERE NOT dog_id IN (SELECT dog_id FROM Treatments),CREATE TABLE Dogs (dog_id VARCHAR); CREATE TABLE Treatments (dog_id VARCHAR)
Tell me the number of dogs that have not received any treatment .,SELECT COUNT(*) FROM dogs WHERE NOT dog_id IN (SELECT dog_id FROM treatments),CREATE TABLE treatments (dog_id VARCHAR); CREATE TABLE dogs (dog_id VARCHAR)
How many owners temporarily do not have any dogs?,SELECT COUNT(*) FROM Owners WHERE NOT owner_id IN (SELECT owner_id FROM Dogs),CREATE TABLE Dogs (owner_id VARCHAR); CREATE TABLE Owners (owner_id VARCHAR)
How many professionals did not operate any treatment on dogs?,SELECT COUNT(*) FROM Professionals WHERE NOT professional_id IN (SELECT professional_id FROM Treatments),CREATE TABLE Professionals (professional_id VARCHAR); CREATE TABLE Treatments (professional_id VARCHAR)
"List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","SELECT name, age, weight FROM Dogs WHERE abandoned_yn = 1","CREATE TABLE Dogs (name VARCHAR, age VARCHAR, weight VARCHAR, abandoned_yn VARCHAR)"
What is the average age of all the dogs?,SELECT AVG(age) FROM Dogs,CREATE TABLE Dogs (age INTEGER)
What is the age of the oldest dog?,SELECT MAX(age) FROM Dogs,CREATE TABLE Dogs (age INTEGER)
How much does each charge type costs? List both charge type and amount.,"SELECT charge_type, charge_amount FROM Charges","CREATE TABLE Charges (charge_type VARCHAR, charge_amount VARCHAR)"
How much does the most expensive charge type costs?,SELECT MAX(charge_amount) FROM Charges,CREATE TABLE Charges (charge_amount INTEGER)
"List the email, cell phone and home phone of all the professionals.","SELECT email_address, cell_number, home_phone FROM professionals","CREATE TABLE professionals (email_address VARCHAR, cell_number VARCHAR, home_phone VARCHAR)"
What are all the possible breed type and size type combinations?,"SELECT DISTINCT breed_code, size_code FROM dogs","CREATE TABLE dogs (breed_code VARCHAR, size_code VARCHAR)"
List the first name of all the professionals along with the description of the treatment they have done.,"SELECT DISTINCT T1.first_name, T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id = T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code = T3.treatment_type_code","CREATE TABLE Treatments (professional_id VARCHAR, treatment_type_code VARCHAR); CREATE TABLE Treatment_types (treatment_type_description VARCHAR, treatment_type_code VARCHAR); CREATE TABLE professionals (first_name VARCHAR, professional_id VARCHAR)"
List the name of singers in ascending order of net worth.,SELECT Name FROM singer ORDER BY Net_Worth_Millions,"CREATE TABLE singer (Name VARCHAR, Net_Worth_Millions VARCHAR)"
What are the birth year and citizenship of singers?,"SELECT Birth_Year, Citizenship FROM singer","CREATE TABLE singer (Birth_Year VARCHAR, Citizenship VARCHAR)"
"List the name of singers whose citizenship is not ""France"".","SELECT Name FROM singer WHERE Citizenship <> ""France""","CREATE TABLE singer (Name VARCHAR, Citizenship VARCHAR)"
Show the name of singers whose birth year is either 1948 or 1949?,SELECT Name FROM singer WHERE Birth_Year = 1948 OR Birth_Year = 1949,"CREATE TABLE singer (Name VARCHAR, Birth_Year VARCHAR)"
What is the name of the singer with the largest net worth?,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,"CREATE TABLE singer (Name VARCHAR, Net_Worth_Millions VARCHAR)"
Show different citizenship of singers and the number of singers of each citizenship.,"SELECT Citizenship, COUNT(*) FROM singer GROUP BY Citizenship",CREATE TABLE singer (Citizenship VARCHAR)
Please show the most common citizenship of singers.,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE singer (Citizenship VARCHAR)
What is the most common singer citizenship ?,SELECT citizenship FROM singer GROUP BY citizenship ORDER BY COUNT(*) DESC LIMIT 1,CREATE TABLE singer (citizenship VARCHAR)
Show different citizenships and the maximum net worth of singers of each citizenship.,"SELECT Citizenship, MAX(Net_Worth_Millions) FROM singer GROUP BY Citizenship","CREATE TABLE singer (Citizenship VARCHAR, Net_Worth_Millions INTEGER)"
Show titles of songs and names of singers.,"SELECT T2.Title, T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID","CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Title VARCHAR, Singer_ID VARCHAR)"
Show distinct names of singers that have songs with sales more than 300000.,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID WHERE T2.Sales > 300000,"CREATE TABLE song (Singer_ID VARCHAR, Sales INTEGER); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)"
Show the names of singers that have more than one song.,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*) > 1,"CREATE TABLE song (Singer_ID VARCHAR); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)"
Show the names of singers and the total sales of their songs.,"SELECT T1.Name, SUM(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name","CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE song (Sales INTEGER, Singer_ID VARCHAR)"
List the name of singers that do not have any song.,SELECT Name FROM singer WHERE NOT Singer_ID IN (SELECT Singer_ID FROM song),"CREATE TABLE song (Name VARCHAR, Singer_ID VARCHAR); CREATE TABLE singer (Name VARCHAR, Singer_ID VARCHAR)"
Show the citizenship shared by singers with birth year before 1945 and after 1955.,SELECT Citizenship FROM singer WHERE Birth_Year < 1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year > 1955,"CREATE TABLE singer (Citizenship VARCHAR, Birth_Year INTEGER)"
How many available features are there in total?,SELECT COUNT(*) FROM Other_Available_Features,CREATE TABLE Other_Available_Features (Id VARCHAR)
What is the feature type name of feature AirCon?,"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T1.feature_name = ""AirCon""","CREATE TABLE Other_Available_Features (feature_type_code VARCHAR, feature_name VARCHAR); CREATE TABLE Ref_Feature_Types (feature_type_name VARCHAR, feature_type_code VARCHAR)"
Show the property type descriptions of properties belonging to that code.,SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code GROUP BY T1.property_type_code,"CREATE TABLE Properties (property_type_code VARCHAR); CREATE TABLE Ref_Property_Types (property_type_description VARCHAR, property_type_code VARCHAR)"
What are the names of properties that are either houses or apartments with more than 1 room?,"SELECT property_name FROM Properties WHERE property_type_code = ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code = ""Apartment"" AND room_count > 1","CREATE TABLE Properties (property_name VARCHAR, property_type_code VARCHAR, room_count VARCHAR)"
Name the position for chivu,SELECT position FROM table WHERE player = Chivu,"CREATE TABLE table (position VARCHAR, player VARCHAR, Chivu VARCHAR)"
Name the total number of r for coppa italia larger than 1.0,SELECT COUNT(r) FROM table WHERE coppa_italia > 1.0,"CREATE TABLE table (r VARCHAR, coppa_italia INTEGER)"
The Roman value of t is associated with what allophone?,"SELECT sound__allophone_ FROM ""t"" AS able_name_50 WHERE roman = ""t""",CREATE TABLE t (Id VARCHAR)
Name the h when c max is 99,SELECT h FROM table WHERE c__max_ = 99,"CREATE TABLE table (h VARCHAR, c__max_ VARCHAR)"
Name the least europa league,SELECT MIN(europa_league) FROM table,CREATE TABLE table (europa_league INTEGER)
"If the total is 6, what is the maximum R?",SELECT MAX(r) FROM table WHERE total = 6,"CREATE TABLE table (r INTEGER, total VARCHAR)"
"If the player is Marcelo, what is the minimum R?",SELECT MIN(r) FROM table WHERE player = Marcelo,"CREATE TABLE table (r INTEGER, player VARCHAR, Marcelo VARCHAR)"
"If the player is Marcelo, what is the position?",SELECT position FROM table WHERE player = Marcelo,"CREATE TABLE table (position VARCHAR, player VARCHAR, Marcelo VARCHAR)"
"If the position is AM and the league is larger than 7.0, what is the total R number?",SELECT COUNT(r) FROM table WHERE position = AM AND league > 7.0,"CREATE TABLE table (r VARCHAR, position VARCHAR, AM VARCHAR, league VARCHAR)"
"If the market name is Xperia U, what is the weight?","SELECT weight FROM table WHERE market_name = ""Xperia U""","CREATE TABLE table (weight VARCHAR, market_name VARCHAR)"
What is the release date if the code name is Aoba?,"SELECT release_date FROM table WHERE code_name = ""Aoba""","CREATE TABLE table (release_date VARCHAR, code_name VARCHAR)"
"If the weight is 126g and the NFC is yes, what is the battery (MAH)?","SELECT battery___mah__ FROM table WHERE nfc = ""Yes"" AND weight = ""126g""","CREATE TABLE table (battery___mah__ VARCHAR, nfc VARCHAR, weight VARCHAR)"
What is the platform if the weight is 131.5g?,"SELECT platform FROM table WHERE weight = ""131.5g""","CREATE TABLE table (platform VARCHAR, weight VARCHAR)"
What is the Android version is the code name is Lotus?,"SELECT android_version FROM table WHERE code_name = ""Lotus""","CREATE TABLE table (android_version VARCHAR, code_name VARCHAR)"
What is the R when the total is 1 and the position is fw?,"SELECT r FROM table WHERE total = 1 AND position = ""FW""","CREATE TABLE table (r VARCHAR, total VARCHAR, position VARCHAR)"
What is the lowest league cup?,SELECT MIN(league_cup) FROM table,CREATE TABLE table (league_cup INTEGER)
What is the position for the player becchio?,SELECT position FROM table WHERE player = Becchio,"CREATE TABLE table (position VARCHAR, player VARCHAR, Becchio VARCHAR)"
How many times was the r 4?,SELECT COUNT(league_cup) FROM table WHERE r = 4,"CREATE TABLE table (league_cup VARCHAR, r VARCHAR)"
What college did the T who was pick after 13 go to?,"SELECT college FROM ""t"" AS able_name_20 WHERE pick__number > 13 AND position = ""t""",CREATE TABLE t (Id VARCHAR)
"In the Class T, what is the total of the 1958 UTA?","SELECT COUNT(1958 AS _uta) FROM ""t"" AS able_name_49 WHERE class = ""t""",CREATE TABLE t (Id VARCHAR)
